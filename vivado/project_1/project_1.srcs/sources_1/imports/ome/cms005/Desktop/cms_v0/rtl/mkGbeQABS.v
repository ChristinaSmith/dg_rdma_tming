//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Wed Jun 12 15:18:50 CDT 2013
//
// Method conflict info:
// Method: client_request_get
// Conflict-free: client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: client_request_get
//
// Method: client_response_put
// Conflict-free: client_request_get,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: client_response_put
//
// Method: gmii_rx_rxd
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rxd
//
// Method: gmii_rx_rx_dv
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_dv
//
// Method: gmii_rx_rx_er
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_er
//
// Method: gmii_tx_txd
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_en
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_er
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_col
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_col
//
// Method: gmii_crs
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_crs
//
// Method: gmii_intr
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_led
// Conflicts: gmii_intr
//
// Method: gmii_led
// Conflict-free: client_request_get,
// 	       client_response_put,
// 	       gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
//
// Ports:
// Name                         I/O  size props
// client_request_get             O    40
// RDY_client_request_get         O     1 reg
// RDY_client_response_put        O     1 reg
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// CLK_gmii_tx_tx_clk             O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// CLK_rxclkBnd                   O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// RST_N_gmii_rstn                O     1 reset
// CLK_gmii_rx_clk                I     1 clock
// CLK_gmiixo_clk                 I     1 clock
// RST_N_gmiixo_rst               I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// client_response_put            I    40
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// EN_client_response_put         I     1
// EN_client_request_get          I     1
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkGbeQABS(CLK_gmii_rx_clk,
		 CLK_gmiixo_clk,
		 RST_N_gmiixo_rst,
		 CLK,
		 RST_N,

		 .mdio_mdd(mdi_tMDD_IO),
		 .mdio_mdc(mdi_tMDC_IO),

		 EN_client_request_get,
		 client_request_get,
		 RDY_client_request_get,

		 client_response_put,
		 EN_client_response_put,
		 RDY_client_response_put,

		 gmii_rx_rxd_i,

		 gmii_rx_rx_dv_i,

		 gmii_rx_rx_er_i,

		 gmii_tx_txd,

		 gmii_tx_tx_en,

		 gmii_tx_tx_er,

		 gmii_col_i,

		 gmii_crs_i,

		 gmii_intr_i,

		 gmii_led,

		 CLK_gmii_tx_tx_clk,
		 CLK_GATE_gmii_tx_tx_clk,

		 CLK_rxclkBnd,
		 CLK_GATE_rxclkBnd,

		 RST_N_gmii_rstn);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  CLK_gmii_rx_clk;
  input  CLK_gmiixo_clk;
  input  RST_N_gmiixo_rst;
  input  CLK;
  input  RST_N;

  inout  mdi_tMDD_IO;
  inout  mdi_tMDC_IO;

  // actionvalue method client_request_get
  input  EN_client_request_get;
  output [39 : 0] client_request_get;
  output RDY_client_request_get;

  // action method client_response_put
  input  [39 : 0] client_response_put;
  input  EN_client_response_put;
  output RDY_client_response_put;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  output CLK_gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock CLK_rxclkBnd
  output CLK_rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // output resets
  output RST_N_gmii_rstn;

  // signals for module outputs
  wire [39 : 0] client_request_get;
  wire [7 : 0] gmii_tx_txd;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       CLK_gmii_tx_tx_clk,
       CLK_rxclkBnd,
       RDY_client_request_get,
       RDY_client_response_put,
       RST_N_gmii_rstn,
       gmii_led,
       gmii_tx_tx_en,
       gmii_tx_tx_er;

  // register gbeControl
  reg [31 : 0] gbeControl;
  wire [31 : 0] gbeControl_D_IN;
  wire gbeControl_EN;

  // register mdi_rMDC
  reg mdi_rMDC;
  wire mdi_rMDC_D_IN, mdi_rMDC_EN;

  // register mdi_rMDD
  reg mdi_rMDD;
  wire mdi_rMDD_D_IN, mdi_rMDD_EN;

  // register mdi_rOutEn
  reg mdi_rOutEn;
  wire mdi_rOutEn_D_IN, mdi_rOutEn_EN;

  // register mdi_rPhyAddr
  reg [4 : 0] mdi_rPhyAddr;
  wire [4 : 0] mdi_rPhyAddr_D_IN;
  wire mdi_rPhyAddr_EN;

  // register mdi_rRegAddr
  reg [4 : 0] mdi_rRegAddr;
  wire [4 : 0] mdi_rRegAddr_D_IN;
  wire mdi_rRegAddr_EN;

  // register mdi_rState
  reg mdi_rState;
  wire mdi_rState_D_IN, mdi_rState_EN;

  // register mdi_rWrite
  reg mdi_rWrite;
  wire mdi_rWrite_D_IN, mdi_rWrite_EN;

  // register mdi_rWriteData
  reg [15 : 0] mdi_rWriteData;
  wire [15 : 0] mdi_rWriteData_D_IN;
  wire mdi_rWriteData_EN;

  // register mdi_vrReadData_0
  reg mdi_vrReadData_0;
  wire mdi_vrReadData_0_D_IN, mdi_vrReadData_0_EN;

  // register mdi_vrReadData_1
  reg mdi_vrReadData_1;
  wire mdi_vrReadData_1_D_IN, mdi_vrReadData_1_EN;

  // register mdi_vrReadData_10
  reg mdi_vrReadData_10;
  wire mdi_vrReadData_10_D_IN, mdi_vrReadData_10_EN;

  // register mdi_vrReadData_11
  reg mdi_vrReadData_11;
  wire mdi_vrReadData_11_D_IN, mdi_vrReadData_11_EN;

  // register mdi_vrReadData_12
  reg mdi_vrReadData_12;
  wire mdi_vrReadData_12_D_IN, mdi_vrReadData_12_EN;

  // register mdi_vrReadData_13
  reg mdi_vrReadData_13;
  wire mdi_vrReadData_13_D_IN, mdi_vrReadData_13_EN;

  // register mdi_vrReadData_14
  reg mdi_vrReadData_14;
  wire mdi_vrReadData_14_D_IN, mdi_vrReadData_14_EN;

  // register mdi_vrReadData_15
  reg mdi_vrReadData_15;
  wire mdi_vrReadData_15_D_IN, mdi_vrReadData_15_EN;

  // register mdi_vrReadData_2
  reg mdi_vrReadData_2;
  wire mdi_vrReadData_2_D_IN, mdi_vrReadData_2_EN;

  // register mdi_vrReadData_3
  reg mdi_vrReadData_3;
  wire mdi_vrReadData_3_D_IN, mdi_vrReadData_3_EN;

  // register mdi_vrReadData_4
  reg mdi_vrReadData_4;
  wire mdi_vrReadData_4_D_IN, mdi_vrReadData_4_EN;

  // register mdi_vrReadData_5
  reg mdi_vrReadData_5;
  wire mdi_vrReadData_5_D_IN, mdi_vrReadData_5_EN;

  // register mdi_vrReadData_6
  reg mdi_vrReadData_6;
  wire mdi_vrReadData_6_D_IN, mdi_vrReadData_6_EN;

  // register mdi_vrReadData_7
  reg mdi_vrReadData_7;
  wire mdi_vrReadData_7_D_IN, mdi_vrReadData_7_EN;

  // register mdi_vrReadData_8
  reg mdi_vrReadData_8;
  wire mdi_vrReadData_8_D_IN, mdi_vrReadData_8_EN;

  // register mdi_vrReadData_9
  reg mdi_vrReadData_9;
  wire mdi_vrReadData_9_D_IN, mdi_vrReadData_9_EN;

  // register phyMdiInit
  reg phyMdiInit;
  wire phyMdiInit_D_IN, phyMdiInit_EN;

  // register phyResetWaitCnt
  reg [24 : 0] phyResetWaitCnt;
  wire [24 : 0] phyResetWaitCnt_D_IN;
  wire phyResetWaitCnt_EN;

  // register rxCount
  reg [31 : 0] rxCount;
  wire [31 : 0] rxCount_D_IN;
  wire rxCount_EN;

  // register rxOvfCount
  reg [31 : 0] rxOvfCount;
  wire [31 : 0] rxOvfCount_D_IN;
  wire rxOvfCount_EN;

  // register splitReadInFlight
  reg splitReadInFlight;
  wire splitReadInFlight_D_IN, splitReadInFlight_EN;

  // register txCount
  reg [31 : 0] txCount;
  wire [31 : 0] txCount_D_IN;
  wire txCount_EN;

  // register txUndCount
  reg [31 : 0] txUndCount;
  wire [31 : 0] txUndCount_D_IN;
  wire txUndCount_EN;

  // ports of submodule eReqF
  wire [39 : 0] eReqF_D_IN, eReqF_D_OUT;
  wire eReqF_CLR, eReqF_DEQ, eReqF_EMPTY_N, eReqF_ENQ, eReqF_FULL_N;

  // ports of submodule eRespF
  wire [39 : 0] eRespF_D_IN, eRespF_D_OUT;
  wire eRespF_CLR, eRespF_DEQ, eRespF_EMPTY_N, eRespF_ENQ, eRespF_FULL_N;

  // ports of submodule mdi_fRequest
  wire [26 : 0] mdi_fRequest_D_IN, mdi_fRequest_D_OUT;
  wire mdi_fRequest_CLR,
       mdi_fRequest_DEQ,
       mdi_fRequest_EMPTY_N,
       mdi_fRequest_ENQ,
       mdi_fRequest_FULL_N;

  // ports of submodule mdi_fResponse
  wire [16 : 0] mdi_fResponse_D_IN;
  wire mdi_fResponse_CLR,
       mdi_fResponse_DEQ,
       mdi_fResponse_ENQ,
       mdi_fResponse_FULL_N;

  // ports of submodule mdi_rPlayIndex
  wire [7 : 0] mdi_rPlayIndex_DATA_A,
	       mdi_rPlayIndex_DATA_B,
	       mdi_rPlayIndex_DATA_C,
	       mdi_rPlayIndex_DATA_F,
	       mdi_rPlayIndex_Q_OUT;
  wire mdi_rPlayIndex_ADDA,
       mdi_rPlayIndex_ADDB,
       mdi_rPlayIndex_SETC,
       mdi_rPlayIndex_SETF;

  // ports of submodule mdi_rPrescaler
  wire [3 : 0] mdi_rPrescaler_DATA_A,
	       mdi_rPrescaler_DATA_B,
	       mdi_rPrescaler_DATA_C,
	       mdi_rPrescaler_DATA_F,
	       mdi_rPrescaler_Q_OUT;
  wire mdi_rPrescaler_ADDA,
       mdi_rPrescaler_ADDB,
       mdi_rPrescaler_SETC,
       mdi_rPrescaler_SETF;

  // ports of submodule mdi_tMDC
  wire mdi_tMDC_IO;

  // ports of submodule mdi_tMDD
  wire mdi_tMDD_IO, mdi_tMDD_O;

  // ports of submodule phyRst
  wire phyRst_ASSERT_IN, phyRst_OUT_RST;

  // ports of submodule qbgmac
  wire [39 : 0] qbgmac_rx_get, qbgmac_tx_put;
  wire [7 : 0] qbgmac_gmii_rx_rxd_i, qbgmac_gmii_tx_txd;
  wire qbgmac_CLK_gmii_tx_tx_clk,
       qbgmac_CLK_rxclkBnd,
       qbgmac_EN_rxOperate,
       qbgmac_EN_rx_get,
       qbgmac_EN_txOperate,
       qbgmac_EN_tx_put,
       qbgmac_RDY_rx_get,
       qbgmac_RDY_tx_put,
       qbgmac_gmii_col_i,
       qbgmac_gmii_crs_i,
       qbgmac_gmii_intr_i,
       qbgmac_gmii_led,
       qbgmac_gmii_rx_rx_dv_i,
       qbgmac_gmii_rx_rx_er_i,
       qbgmac_gmii_tx_tx_en,
       qbgmac_gmii_tx_tx_er,
       qbgmac_rxOverFlow,
       qbgmac_txUnderFlow;

  // rule scheduling signals
  wire CAN_FIRE_RL_gbe_operate,
       CAN_FIRE_RL_inc_rx_overflow,
       CAN_FIRE_RL_inc_tx_underflow,
       CAN_FIRE_RL_mdi_reset_prescaler,
       CAN_FIRE_RL_mdi_run_frame,
       CAN_FIRE_RL_mdi_start,
       CAN_FIRE_RL_mdi_update_prescaler,
       CAN_FIRE_RL_phy_mdio_init,
       CAN_FIRE_RL_phy_reset_drive,
       CAN_FIRE_RL_phy_reset_wait,
       CAN_FIRE_RL_rx_pump,
       CAN_FIRE_RL_tx_pump,
       CAN_FIRE_client_request_get,
       CAN_FIRE_client_response_put,
       CAN_FIRE_gmii_col,
       CAN_FIRE_gmii_crs,
       CAN_FIRE_gmii_intr,
       CAN_FIRE_gmii_rx_rx_dv,
       CAN_FIRE_gmii_rx_rx_er,
       CAN_FIRE_gmii_rx_rxd,
       WILL_FIRE_RL_gbe_operate,
       WILL_FIRE_RL_inc_rx_overflow,
       WILL_FIRE_RL_inc_tx_underflow,
       WILL_FIRE_RL_mdi_reset_prescaler,
       WILL_FIRE_RL_mdi_run_frame,
       WILL_FIRE_RL_mdi_start,
       WILL_FIRE_RL_mdi_update_prescaler,
       WILL_FIRE_RL_phy_mdio_init,
       WILL_FIRE_RL_phy_reset_drive,
       WILL_FIRE_RL_phy_reset_wait,
       WILL_FIRE_RL_rx_pump,
       WILL_FIRE_RL_tx_pump,
       WILL_FIRE_client_request_get,
       WILL_FIRE_client_response_put,
       WILL_FIRE_gmii_col,
       WILL_FIRE_gmii_crs,
       WILL_FIRE_gmii_intr,
       WILL_FIRE_gmii_rx_rx_dv,
       WILL_FIRE_gmii_rx_rx_er,
       WILL_FIRE_gmii_rx_rxd;

  // inputs to muxes for submodule ports
  wire MUX_mdi_rState_write_1__SEL_1;

  // remaining internal signals
  reg [1 : 0] CASE_client_response_put_BITS_19_TO_18_0_clien_ETC__q11,
	      CASE_client_response_put_BITS_29_TO_28_0_clien_ETC__q10,
	      CASE_client_response_put_BITS_39_TO_38_0_clien_ETC__q9,
	      CASE_client_response_put_BITS_9_TO_8_0_client__ETC__q12,
	      CASE_eReqFD_OUT_BITS_19_TO_18_0_eReqFD_OUT_B_ETC__q3,
	      CASE_eReqFD_OUT_BITS_29_TO_28_0_eReqFD_OUT_B_ETC__q2,
	      CASE_eReqFD_OUT_BITS_39_TO_38_0_eReqFD_OUT_B_ETC__q1,
	      CASE_eReqFD_OUT_BITS_9_TO_8_0_eReqFD_OUT_BIT_ETC__q4,
	      CASE_eRespFD_OUT_BITS_19_TO_18_0_eRespFD_OUT_ETC__q16,
	      CASE_eRespFD_OUT_BITS_29_TO_28_0_eRespFD_OUT_ETC__q15,
	      CASE_eRespFD_OUT_BITS_39_TO_38_0_eRespFD_OUT_ETC__q14,
	      CASE_eRespFD_OUT_BITS_9_TO_8_0_eRespFD_OUT_B_ETC__q17,
	      CASE_qbgmacrx_get_BITS_19_TO_18_0_qbgmacrx_g_ETC__q7,
	      CASE_qbgmacrx_get_BITS_29_TO_28_0_qbgmacrx_g_ETC__q6,
	      CASE_qbgmacrx_get_BITS_39_TO_38_0_qbgmacrx_g_ETC__q5,
	      CASE_qbgmacrx_get_BITS_9_TO_8_0_qbgmacrx_get_ETC__q8;
  wire [194 : 0] _1434766110945527031733894725304609466537681244_ETC__q13,
		 _643371375338640__q18,
		 bs__h15220,
		 bs__h2461;
  wire [15 : 0] x_data__h18497;
  wire [2 : 0] d0__h2087,
	       d10__h2077,
	       d11__h2076,
	       d12__h2075,
	       d13__h2074,
	       d14__h2073,
	       d15__h2072,
	       d1__h2086,
	       d2__h2085,
	       d3__h2084,
	       d4__h2083,
	       d5__h2082,
	       d6__h2081,
	       d7__h2080,
	       d8__h2079,
	       d9__h2078,
	       pa0__h2064,
	       pa1__h2063,
	       pa2__h2062,
	       pa3__h2061,
	       pa4__h2060,
	       ra0__h2070,
	       ra1__h2069,
	       ra2__h2068,
	       ra3__h2067,
	       ra4__h2066;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  assign CLK_gmii_tx_tx_clk = qbgmac_CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclkBnd
  assign CLK_rxclkBnd = qbgmac_CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // output resets
  assign RST_N_gmii_rstn = phyRst_OUT_RST ;

  // actionvalue method client_request_get
  assign client_request_get =
	     { CASE_eReqFD_OUT_BITS_39_TO_38_0_eReqFD_OUT_B_ETC__q1,
	       eReqF_D_OUT[37:30],
	       CASE_eReqFD_OUT_BITS_29_TO_28_0_eReqFD_OUT_B_ETC__q2,
	       eReqF_D_OUT[27:20],
	       CASE_eReqFD_OUT_BITS_19_TO_18_0_eReqFD_OUT_B_ETC__q3,
	       eReqF_D_OUT[17:10],
	       CASE_eReqFD_OUT_BITS_9_TO_8_0_eReqFD_OUT_BIT_ETC__q4,
	       eReqF_D_OUT[7:0] } ;
  assign RDY_client_request_get = eReqF_EMPTY_N ;
  assign CAN_FIRE_client_request_get = eReqF_EMPTY_N ;
  assign WILL_FIRE_client_request_get = EN_client_request_get ;

  // action method client_response_put
  assign RDY_client_response_put = eRespF_FULL_N ;
  assign CAN_FIRE_client_response_put = eRespF_FULL_N ;
  assign WILL_FIRE_client_response_put = EN_client_response_put ;

  // action method gmii_rx_rxd
  assign CAN_FIRE_gmii_rx_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rxd = 1'd1 ;

  // action method gmii_rx_rx_dv
  assign CAN_FIRE_gmii_rx_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_dv = 1'd1 ;

  // action method gmii_rx_rx_er
  assign CAN_FIRE_gmii_rx_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_er = 1'd1 ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = qbgmac_gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = qbgmac_gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = qbgmac_gmii_tx_tx_er ;

  // action method gmii_col
  assign CAN_FIRE_gmii_col = 1'd1 ;
  assign WILL_FIRE_gmii_col = 1'd1 ;

  // action method gmii_crs
  assign CAN_FIRE_gmii_crs = 1'd1 ;
  assign WILL_FIRE_gmii_crs = 1'd1 ;

  // action method gmii_intr
  assign CAN_FIRE_gmii_intr = 1'd1 ;
  assign WILL_FIRE_gmii_intr = 1'd1 ;

  // value method gmii_led
  assign gmii_led = qbgmac_gmii_led ;

  // submodule eReqF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) eReqF(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(eReqF_D_IN),
						 .ENQ(eReqF_ENQ),
						 .DEQ(eReqF_DEQ),
						 .CLR(eReqF_CLR),
						 .D_OUT(eReqF_D_OUT),
						 .FULL_N(eReqF_FULL_N),
						 .EMPTY_N(eReqF_EMPTY_N));

  // submodule eRespF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) eRespF(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(eRespF_D_IN),
						  .ENQ(eRespF_ENQ),
						  .DEQ(eRespF_DEQ),
						  .CLR(eRespF_CLR),
						  .D_OUT(eRespF_D_OUT),
						  .FULL_N(eRespF_FULL_N),
						  .EMPTY_N(eRespF_EMPTY_N));

  // submodule mdi_fRequest
  FIFO2 #(.width(32'd27), .guarded(32'd1)) mdi_fRequest(.RST(RST_N),
							.CLK(CLK),
							.D_IN(mdi_fRequest_D_IN),
							.ENQ(mdi_fRequest_ENQ),
							.DEQ(mdi_fRequest_DEQ),
							.CLR(mdi_fRequest_CLR),
							.D_OUT(mdi_fRequest_D_OUT),
							.FULL_N(mdi_fRequest_FULL_N),
							.EMPTY_N(mdi_fRequest_EMPTY_N));

  // submodule mdi_fResponse
  FIFO2 #(.width(32'd17), .guarded(32'd1)) mdi_fResponse(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(mdi_fResponse_D_IN),
							 .ENQ(mdi_fResponse_ENQ),
							 .DEQ(mdi_fResponse_DEQ),
							 .CLR(mdi_fResponse_CLR),
							 .D_OUT(),
							 .FULL_N(mdi_fResponse_FULL_N),
							 .EMPTY_N());

  // submodule mdi_rPlayIndex
  Counter #(.width(32'd8), .init(8'd0)) mdi_rPlayIndex(.CLK(CLK),
						       .RST(RST_N),
						       .DATA_A(mdi_rPlayIndex_DATA_A),
						       .DATA_B(mdi_rPlayIndex_DATA_B),
						       .DATA_C(mdi_rPlayIndex_DATA_C),
						       .DATA_F(mdi_rPlayIndex_DATA_F),
						       .ADDA(mdi_rPlayIndex_ADDA),
						       .ADDB(mdi_rPlayIndex_ADDB),
						       .SETC(mdi_rPlayIndex_SETC),
						       .SETF(mdi_rPlayIndex_SETF),
						       .Q_OUT(mdi_rPlayIndex_Q_OUT));

  // submodule mdi_rPrescaler
  Counter #(.width(32'd4), .init(4'd6)) mdi_rPrescaler(.CLK(CLK),
						       .RST(RST_N),
						       .DATA_A(mdi_rPrescaler_DATA_A),
						       .DATA_B(mdi_rPrescaler_DATA_B),
						       .DATA_C(mdi_rPrescaler_DATA_C),
						       .DATA_F(mdi_rPrescaler_DATA_F),
						       .ADDA(mdi_rPrescaler_ADDA),
						       .ADDB(mdi_rPrescaler_ADDB),
						       .SETC(mdi_rPrescaler_SETC),
						       .SETF(mdi_rPrescaler_SETF),
						       .Q_OUT(mdi_rPrescaler_Q_OUT));

  // submodule mdi_tMDC
  TriState #(.width(32'd1)) mdi_tMDC(.I(mdi_rMDC),
				     .OE(1'd1),
				     .O(),
				     .IO(mdi_tMDC_IO));

  // submodule mdi_tMDD
  TriState #(.width(32'd1)) mdi_tMDD(.I(mdi_rMDD),
				     .OE(mdi_rOutEn),
				     .O(mdi_tMDD_O),
				     .IO(mdi_tMDD_IO));

  // submodule phyRst
  MakeResetA #(.RSTDELAY(32'd16), .init(1'd0)) phyRst(.CLK(CLK),
						      .RST(RST_N),
						      .DST_CLK(CLK),
						      .ASSERT_IN(phyRst_ASSERT_IN),
						      .ASSERT_OUT(),
						      .OUT_RST(phyRst_OUT_RST));

  // submodule qbgmac
  mkQBGMAC qbgmac(.CLK_rxClk(CLK_gmii_rx_clk),
		  .CLK_txClk(CLK_gmiixo_clk),
		  .RST_N_gmRst(RST_N_gmiixo_rst),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .gmii_col_i(qbgmac_gmii_col_i),
		  .gmii_crs_i(qbgmac_gmii_crs_i),
		  .gmii_intr_i(qbgmac_gmii_intr_i),
		  .gmii_rx_rx_dv_i(qbgmac_gmii_rx_rx_dv_i),
		  .gmii_rx_rx_er_i(qbgmac_gmii_rx_rx_er_i),
		  .gmii_rx_rxd_i(qbgmac_gmii_rx_rxd_i),
		  .tx_put(qbgmac_tx_put),
		  .EN_rx_get(qbgmac_EN_rx_get),
		  .EN_tx_put(qbgmac_EN_tx_put),
		  .EN_rxOperate(qbgmac_EN_rxOperate),
		  .EN_txOperate(qbgmac_EN_txOperate),
		  .gmii_tx_txd(qbgmac_gmii_tx_txd),
		  .gmii_tx_tx_en(qbgmac_gmii_tx_tx_en),
		  .gmii_tx_tx_er(qbgmac_gmii_tx_tx_er),
		  .gmii_led(qbgmac_gmii_led),
		  .rx_get(qbgmac_rx_get),
		  .RDY_rx_get(qbgmac_RDY_rx_get),
		  .RDY_tx_put(qbgmac_RDY_tx_put),
		  .RDY_rxOperate(),
		  .RDY_txOperate(),
		  .rxOverFlow(qbgmac_rxOverFlow),
		  .RDY_rxOverFlow(),
		  .txUnderFlow(qbgmac_txUnderFlow),
		  .RDY_txUnderFlow(),
		  .phyInterrupt(),
		  .RDY_phyInterrupt(),
		  .CLK_gmii_tx_tx_clk(qbgmac_CLK_gmii_tx_tx_clk),
		  .CLK_GATE_gmii_tx_tx_clk(),
		  .CLK_rxclkBnd(qbgmac_CLK_rxclkBnd),
		  .CLK_GATE_rxclkBnd());

  // rule RL_phy_reset_drive
  assign CAN_FIRE_RL_phy_reset_drive =
	     (phyResetWaitCnt ^ 25'h1000000) > 25'd17527216 ;
  assign WILL_FIRE_RL_phy_reset_drive = CAN_FIRE_RL_phy_reset_drive ;

  // rule RL_phy_mdio_init
  assign CAN_FIRE_RL_phy_mdio_init =
	     mdi_fRequest_FULL_N && phyResetWaitCnt == 25'd0 && !phyMdiInit ;
  assign WILL_FIRE_RL_phy_mdio_init = CAN_FIRE_RL_phy_mdio_init ;

  // rule RL_phy_reset_wait
  assign CAN_FIRE_RL_phy_reset_wait = 1'd1 ;
  assign WILL_FIRE_RL_phy_reset_wait = 1'd1 ;

  // rule RL_inc_rx_overflow
  assign CAN_FIRE_RL_inc_rx_overflow = qbgmac_rxOverFlow ;
  assign WILL_FIRE_RL_inc_rx_overflow = qbgmac_rxOverFlow ;

  // rule RL_inc_tx_underflow
  assign CAN_FIRE_RL_inc_tx_underflow = qbgmac_txUnderFlow ;
  assign WILL_FIRE_RL_inc_tx_underflow = qbgmac_txUnderFlow ;

  // rule RL_gbe_operate
  assign CAN_FIRE_RL_gbe_operate = phyMdiInit ;
  assign WILL_FIRE_RL_gbe_operate = phyMdiInit ;

  // rule RL_rx_pump
  assign CAN_FIRE_RL_rx_pump = qbgmac_RDY_rx_get && eReqF_FULL_N ;
  assign WILL_FIRE_RL_rx_pump = CAN_FIRE_RL_rx_pump ;

  // rule RL_tx_pump
  assign CAN_FIRE_RL_tx_pump = qbgmac_RDY_tx_put && eRespF_EMPTY_N ;
  assign WILL_FIRE_RL_tx_pump = CAN_FIRE_RL_tx_pump ;

  // rule RL_mdi_update_prescaler
  assign CAN_FIRE_RL_mdi_update_prescaler = mdi_rPrescaler_Q_OUT != 4'd0 ;
  assign WILL_FIRE_RL_mdi_update_prescaler =
	     CAN_FIRE_RL_mdi_update_prescaler ;

  // rule RL_mdi_reset_prescaler
  assign CAN_FIRE_RL_mdi_reset_prescaler = mdi_rPrescaler_Q_OUT == 4'd0 ;
  assign WILL_FIRE_RL_mdi_reset_prescaler = CAN_FIRE_RL_mdi_reset_prescaler ;

  // rule RL_mdi_start
  assign CAN_FIRE_RL_mdi_start = mdi_fRequest_EMPTY_N && !mdi_rState ;
  assign WILL_FIRE_RL_mdi_start = CAN_FIRE_RL_mdi_start ;

  // rule RL_mdi_run_frame
  assign CAN_FIRE_RL_mdi_run_frame =
	     (mdi_rPlayIndex_Q_OUT != 8'd0 || mdi_rWrite ||
	      mdi_fResponse_FULL_N) &&
	     mdi_rState &&
	     mdi_rPrescaler_Q_OUT == 4'd0 ;
  assign WILL_FIRE_RL_mdi_run_frame = CAN_FIRE_RL_mdi_run_frame ;

  // inputs to muxes for submodule ports
  assign MUX_mdi_rState_write_1__SEL_1 =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT == 8'd0 ;

  // register gbeControl
  assign gbeControl_D_IN = 32'h0 ;
  assign gbeControl_EN = 1'b0 ;

  // register mdi_rMDC
  assign mdi_rMDC_D_IN =
	     _1434766110945527031733894725304609466537681244_ETC__q13[mdi_rPlayIndex_Q_OUT] ;
  assign mdi_rMDC_EN = CAN_FIRE_RL_mdi_run_frame ;

  // register mdi_rMDD
  assign mdi_rMDD_D_IN = bs__h2461[mdi_rPlayIndex_Q_OUT] ;
  assign mdi_rMDD_EN = CAN_FIRE_RL_mdi_run_frame ;

  // register mdi_rOutEn
  assign mdi_rOutEn_D_IN = bs__h15220[mdi_rPlayIndex_Q_OUT] ;
  assign mdi_rOutEn_EN = CAN_FIRE_RL_mdi_run_frame ;

  // register mdi_rPhyAddr
  assign mdi_rPhyAddr_D_IN = mdi_fRequest_D_OUT[25:21] ;
  assign mdi_rPhyAddr_EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_rRegAddr
  assign mdi_rRegAddr_D_IN = mdi_fRequest_D_OUT[20:16] ;
  assign mdi_rRegAddr_EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_rState
  assign mdi_rState_D_IN = !MUX_mdi_rState_write_1__SEL_1 ;
  assign mdi_rState_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT == 8'd0 ||
	     WILL_FIRE_RL_mdi_start ;

  // register mdi_rWrite
  assign mdi_rWrite_D_IN = mdi_fRequest_D_OUT[26] ;
  assign mdi_rWrite_EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_rWriteData
  assign mdi_rWriteData_D_IN = mdi_fRequest_D_OUT[15:0] ;
  assign mdi_rWriteData_EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_vrReadData_0
  assign mdi_vrReadData_0_D_IN = mdi_tMDD_O ;
  assign mdi_vrReadData_0_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_1
  assign mdi_vrReadData_1_D_IN = mdi_vrReadData_0 ;
  assign mdi_vrReadData_1_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_10
  assign mdi_vrReadData_10_D_IN = mdi_vrReadData_9 ;
  assign mdi_vrReadData_10_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_11
  assign mdi_vrReadData_11_D_IN = mdi_vrReadData_10 ;
  assign mdi_vrReadData_11_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_12
  assign mdi_vrReadData_12_D_IN = mdi_vrReadData_11 ;
  assign mdi_vrReadData_12_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_13
  assign mdi_vrReadData_13_D_IN = mdi_vrReadData_12 ;
  assign mdi_vrReadData_13_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_14
  assign mdi_vrReadData_14_D_IN = mdi_vrReadData_13 ;
  assign mdi_vrReadData_14_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_15
  assign mdi_vrReadData_15_D_IN = mdi_vrReadData_14 ;
  assign mdi_vrReadData_15_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_2
  assign mdi_vrReadData_2_D_IN = mdi_vrReadData_1 ;
  assign mdi_vrReadData_2_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_3
  assign mdi_vrReadData_3_D_IN = mdi_vrReadData_2 ;
  assign mdi_vrReadData_3_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_4
  assign mdi_vrReadData_4_D_IN = mdi_vrReadData_3 ;
  assign mdi_vrReadData_4_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_5
  assign mdi_vrReadData_5_D_IN = mdi_vrReadData_4 ;
  assign mdi_vrReadData_5_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_6
  assign mdi_vrReadData_6_D_IN = mdi_vrReadData_5 ;
  assign mdi_vrReadData_6_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_7
  assign mdi_vrReadData_7_D_IN = mdi_vrReadData_6 ;
  assign mdi_vrReadData_7_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_8
  assign mdi_vrReadData_8_D_IN = mdi_vrReadData_7 ;
  assign mdi_vrReadData_8_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register mdi_vrReadData_9
  assign mdi_vrReadData_9_D_IN = mdi_vrReadData_8 ;
  assign mdi_vrReadData_9_EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q18[mdi_rPlayIndex_Q_OUT] ;

  // register phyMdiInit
  assign phyMdiInit_D_IN = 1'd1 ;
  assign phyMdiInit_EN = CAN_FIRE_RL_phy_mdio_init ;

  // register phyResetWaitCnt
  assign phyResetWaitCnt_D_IN =
	     gbeControl[31] ?
	       25'd753125 :
	       (((phyResetWaitCnt ^ 25'h1000000) <= 25'd16777216) ?
		  25'd0 :
		  phyResetWaitCnt - 25'd1) ;
  assign phyResetWaitCnt_EN = 1'd1 ;

  // register rxCount
  assign rxCount_D_IN = rxCount + 32'd1 ;
  assign rxCount_EN = CAN_FIRE_RL_rx_pump ;

  // register rxOvfCount
  assign rxOvfCount_D_IN = rxOvfCount + 32'd1 ;
  assign rxOvfCount_EN = qbgmac_rxOverFlow ;

  // register splitReadInFlight
  assign splitReadInFlight_D_IN = 1'b0 ;
  assign splitReadInFlight_EN = 1'b0 ;

  // register txCount
  assign txCount_D_IN = txCount + 32'd1 ;
  assign txCount_EN = CAN_FIRE_RL_tx_pump ;

  // register txUndCount
  assign txUndCount_D_IN = txUndCount + 32'd1 ;
  assign txUndCount_EN = qbgmac_txUnderFlow ;

  // submodule eReqF
  assign eReqF_D_IN =
	     { CASE_qbgmacrx_get_BITS_39_TO_38_0_qbgmacrx_g_ETC__q5,
	       qbgmac_rx_get[37:30],
	       CASE_qbgmacrx_get_BITS_29_TO_28_0_qbgmacrx_g_ETC__q6,
	       qbgmac_rx_get[27:20],
	       CASE_qbgmacrx_get_BITS_19_TO_18_0_qbgmacrx_g_ETC__q7,
	       qbgmac_rx_get[17:10],
	       CASE_qbgmacrx_get_BITS_9_TO_8_0_qbgmacrx_get_ETC__q8,
	       qbgmac_rx_get[7:0] } ;
  assign eReqF_ENQ = CAN_FIRE_RL_rx_pump ;
  assign eReqF_DEQ = EN_client_request_get ;
  assign eReqF_CLR = 1'b0 ;

  // submodule eRespF
  assign eRespF_D_IN =
	     { CASE_client_response_put_BITS_39_TO_38_0_clien_ETC__q9,
	       client_response_put[37:30],
	       CASE_client_response_put_BITS_29_TO_28_0_clien_ETC__q10,
	       client_response_put[27:20],
	       CASE_client_response_put_BITS_19_TO_18_0_clien_ETC__q11,
	       client_response_put[17:10],
	       CASE_client_response_put_BITS_9_TO_8_0_client__ETC__q12,
	       client_response_put[7:0] } ;
  assign eRespF_ENQ = EN_client_response_put ;
  assign eRespF_DEQ = CAN_FIRE_RL_tx_pump ;
  assign eRespF_CLR = 1'b0 ;

  // submodule mdi_fRequest
  assign mdi_fRequest_D_IN = { 1'd1, gbeControl[4:0], 21'd1890288 } ;
  assign mdi_fRequest_ENQ = CAN_FIRE_RL_phy_mdio_init ;
  assign mdi_fRequest_DEQ = CAN_FIRE_RL_mdi_start ;
  assign mdi_fRequest_CLR = 1'b0 ;

  // submodule mdi_fResponse
  assign mdi_fResponse_D_IN = { 1'd1, x_data__h18497 } ;
  assign mdi_fResponse_ENQ =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex_Q_OUT == 8'd0 &&
	     !mdi_rWrite ;
  assign mdi_fResponse_DEQ = 1'b0 ;
  assign mdi_fResponse_CLR = 1'b0 ;

  // submodule mdi_rPlayIndex
  assign mdi_rPlayIndex_DATA_A = 8'h0 ;
  assign mdi_rPlayIndex_DATA_B = 8'd255 ;
  assign mdi_rPlayIndex_DATA_C = 8'h0 ;
  assign mdi_rPlayIndex_DATA_F = 8'd194 ;
  assign mdi_rPlayIndex_ADDA = 1'b0 ;
  assign mdi_rPlayIndex_ADDB = CAN_FIRE_RL_mdi_run_frame ;
  assign mdi_rPlayIndex_SETC = 1'b0 ;
  assign mdi_rPlayIndex_SETF = CAN_FIRE_RL_mdi_start ;

  // submodule mdi_rPrescaler
  assign mdi_rPrescaler_DATA_A = 4'h0 ;
  assign mdi_rPrescaler_DATA_B = 4'd15 ;
  assign mdi_rPrescaler_DATA_C = 4'h0 ;
  assign mdi_rPrescaler_DATA_F = 4'd6 ;
  assign mdi_rPrescaler_ADDA = 1'b0 ;
  assign mdi_rPrescaler_ADDB = CAN_FIRE_RL_mdi_update_prescaler ;
  assign mdi_rPrescaler_SETC = 1'b0 ;
  assign mdi_rPrescaler_SETF = CAN_FIRE_RL_mdi_reset_prescaler ;

  // submodule phyRst
  assign phyRst_ASSERT_IN = CAN_FIRE_RL_phy_reset_drive ;

  // submodule qbgmac
  assign qbgmac_gmii_col_i = gmii_col_i ;
  assign qbgmac_gmii_crs_i = gmii_crs_i ;
  assign qbgmac_gmii_intr_i = gmii_intr_i ;
  assign qbgmac_gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign qbgmac_gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign qbgmac_gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign qbgmac_tx_put =
	     { CASE_eRespFD_OUT_BITS_39_TO_38_0_eRespFD_OUT_ETC__q14,
	       eRespF_D_OUT[37:30],
	       CASE_eRespFD_OUT_BITS_29_TO_28_0_eRespFD_OUT_ETC__q15,
	       eRespF_D_OUT[27:20],
	       CASE_eRespFD_OUT_BITS_19_TO_18_0_eRespFD_OUT_ETC__q16,
	       eRespF_D_OUT[17:10],
	       CASE_eRespFD_OUT_BITS_9_TO_8_0_eRespFD_OUT_B_ETC__q17,
	       eRespF_D_OUT[7:0] } ;
  assign qbgmac_EN_rx_get = CAN_FIRE_RL_rx_pump ;
  assign qbgmac_EN_tx_put = CAN_FIRE_RL_tx_pump ;
  assign qbgmac_EN_rxOperate = phyMdiInit ;
  assign qbgmac_EN_txOperate = phyMdiInit ;

  // remaining internal signals
  assign _1434766110945527031733894725304609466537681244_ETC__q13 =
	     195'h2492492492492492492492492492492492492492492492492 ;
  assign _643371375338640__q18 =
	     195'h0000000000000000000000000000000000002492492492490 ;
  assign bs__h15220 =
	     mdi_rWrite ?
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8 :
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000 ;
  assign bs__h2461 =
	     { mdi_rWrite ?
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1C7 :
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1F8,
	       pa4__h2060,
	       pa3__h2061,
	       pa2__h2062,
	       pa1__h2063,
	       pa0__h2064,
	       ra4__h2066,
	       ra3__h2067,
	       ra2__h2068,
	       ra1__h2069,
	       ra0__h2070,
	       6'd56,
	       d15__h2072,
	       d14__h2073,
	       d13__h2074,
	       d12__h2075,
	       d11__h2076,
	       d10__h2077,
	       d9__h2078,
	       d8__h2079,
	       d7__h2080,
	       d6__h2081,
	       d5__h2082,
	       d4__h2083,
	       d3__h2084,
	       d2__h2085,
	       d1__h2086,
	       d0__h2087,
	       3'b111 } ;
  assign d0__h2087 = {3{mdi_rWriteData[0]}} ;
  assign d10__h2077 = {3{mdi_rWriteData[10]}} ;
  assign d11__h2076 = {3{mdi_rWriteData[11]}} ;
  assign d12__h2075 = {3{mdi_rWriteData[12]}} ;
  assign d13__h2074 = {3{mdi_rWriteData[13]}} ;
  assign d14__h2073 = {3{mdi_rWriteData[14]}} ;
  assign d15__h2072 = {3{mdi_rWriteData[15]}} ;
  assign d1__h2086 = {3{mdi_rWriteData[1]}} ;
  assign d2__h2085 = {3{mdi_rWriteData[2]}} ;
  assign d3__h2084 = {3{mdi_rWriteData[3]}} ;
  assign d4__h2083 = {3{mdi_rWriteData[4]}} ;
  assign d5__h2082 = {3{mdi_rWriteData[5]}} ;
  assign d6__h2081 = {3{mdi_rWriteData[6]}} ;
  assign d7__h2080 = {3{mdi_rWriteData[7]}} ;
  assign d8__h2079 = {3{mdi_rWriteData[8]}} ;
  assign d9__h2078 = {3{mdi_rWriteData[9]}} ;
  assign pa0__h2064 = {3{mdi_rPhyAddr[0]}} ;
  assign pa1__h2063 = {3{mdi_rPhyAddr[1]}} ;
  assign pa2__h2062 = {3{mdi_rPhyAddr[2]}} ;
  assign pa3__h2061 = {3{mdi_rPhyAddr[3]}} ;
  assign pa4__h2060 = {3{mdi_rPhyAddr[4]}} ;
  assign ra0__h2070 = {3{mdi_rRegAddr[0]}} ;
  assign ra1__h2069 = {3{mdi_rRegAddr[1]}} ;
  assign ra2__h2068 = {3{mdi_rRegAddr[2]}} ;
  assign ra3__h2067 = {3{mdi_rRegAddr[3]}} ;
  assign ra4__h2066 = {3{mdi_rRegAddr[4]}} ;
  assign x_data__h18497 =
	     { mdi_vrReadData_15,
	       mdi_vrReadData_14,
	       mdi_vrReadData_13,
	       mdi_vrReadData_12,
	       mdi_vrReadData_11,
	       mdi_vrReadData_10,
	       mdi_vrReadData_9,
	       mdi_vrReadData_8,
	       mdi_vrReadData_7,
	       mdi_vrReadData_6,
	       mdi_vrReadData_5,
	       mdi_vrReadData_4,
	       mdi_vrReadData_3,
	       mdi_vrReadData_2,
	       mdi_vrReadData_1,
	       mdi_vrReadData_0 } ;
  always@(eReqF_D_OUT)
  begin
    case (eReqF_D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_eReqFD_OUT_BITS_39_TO_38_0_eReqFD_OUT_B_ETC__q1 =
	      eReqF_D_OUT[39:38];
      2'd3: CASE_eReqFD_OUT_BITS_39_TO_38_0_eReqFD_OUT_B_ETC__q1 = 2'd3;
    endcase
  end
  always@(eReqF_D_OUT)
  begin
    case (eReqF_D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_eReqFD_OUT_BITS_29_TO_28_0_eReqFD_OUT_B_ETC__q2 =
	      eReqF_D_OUT[29:28];
      2'd3: CASE_eReqFD_OUT_BITS_29_TO_28_0_eReqFD_OUT_B_ETC__q2 = 2'd3;
    endcase
  end
  always@(eReqF_D_OUT)
  begin
    case (eReqF_D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_eReqFD_OUT_BITS_19_TO_18_0_eReqFD_OUT_B_ETC__q3 =
	      eReqF_D_OUT[19:18];
      2'd3: CASE_eReqFD_OUT_BITS_19_TO_18_0_eReqFD_OUT_B_ETC__q3 = 2'd3;
    endcase
  end
  always@(eReqF_D_OUT)
  begin
    case (eReqF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_eReqFD_OUT_BITS_9_TO_8_0_eReqFD_OUT_BIT_ETC__q4 =
	      eReqF_D_OUT[9:8];
      2'd3: CASE_eReqFD_OUT_BITS_9_TO_8_0_eReqFD_OUT_BIT_ETC__q4 = 2'd3;
    endcase
  end
  always@(qbgmac_rx_get)
  begin
    case (qbgmac_rx_get[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_qbgmacrx_get_BITS_39_TO_38_0_qbgmacrx_g_ETC__q5 =
	      qbgmac_rx_get[39:38];
      2'd3: CASE_qbgmacrx_get_BITS_39_TO_38_0_qbgmacrx_g_ETC__q5 = 2'd3;
    endcase
  end
  always@(qbgmac_rx_get)
  begin
    case (qbgmac_rx_get[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_qbgmacrx_get_BITS_29_TO_28_0_qbgmacrx_g_ETC__q6 =
	      qbgmac_rx_get[29:28];
      2'd3: CASE_qbgmacrx_get_BITS_29_TO_28_0_qbgmacrx_g_ETC__q6 = 2'd3;
    endcase
  end
  always@(qbgmac_rx_get)
  begin
    case (qbgmac_rx_get[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_qbgmacrx_get_BITS_19_TO_18_0_qbgmacrx_g_ETC__q7 =
	      qbgmac_rx_get[19:18];
      2'd3: CASE_qbgmacrx_get_BITS_19_TO_18_0_qbgmacrx_g_ETC__q7 = 2'd3;
    endcase
  end
  always@(qbgmac_rx_get)
  begin
    case (qbgmac_rx_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_qbgmacrx_get_BITS_9_TO_8_0_qbgmacrx_get_ETC__q8 =
	      qbgmac_rx_get[9:8];
      2'd3: CASE_qbgmacrx_get_BITS_9_TO_8_0_qbgmacrx_get_ETC__q8 = 2'd3;
    endcase
  end
  always@(client_response_put)
  begin
    case (client_response_put[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_client_response_put_BITS_39_TO_38_0_clien_ETC__q9 =
	      client_response_put[39:38];
      2'd3: CASE_client_response_put_BITS_39_TO_38_0_clien_ETC__q9 = 2'd3;
    endcase
  end
  always@(client_response_put)
  begin
    case (client_response_put[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_client_response_put_BITS_29_TO_28_0_clien_ETC__q10 =
	      client_response_put[29:28];
      2'd3: CASE_client_response_put_BITS_29_TO_28_0_clien_ETC__q10 = 2'd3;
    endcase
  end
  always@(client_response_put)
  begin
    case (client_response_put[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_client_response_put_BITS_19_TO_18_0_clien_ETC__q11 =
	      client_response_put[19:18];
      2'd3: CASE_client_response_put_BITS_19_TO_18_0_clien_ETC__q11 = 2'd3;
    endcase
  end
  always@(client_response_put)
  begin
    case (client_response_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_client_response_put_BITS_9_TO_8_0_client__ETC__q12 =
	      client_response_put[9:8];
      2'd3: CASE_client_response_put_BITS_9_TO_8_0_client__ETC__q12 = 2'd3;
    endcase
  end
  always@(eRespF_D_OUT)
  begin
    case (eRespF_D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_eRespFD_OUT_BITS_39_TO_38_0_eRespFD_OUT_ETC__q14 =
	      eRespF_D_OUT[39:38];
      2'd3: CASE_eRespFD_OUT_BITS_39_TO_38_0_eRespFD_OUT_ETC__q14 = 2'd3;
    endcase
  end
  always@(eRespF_D_OUT)
  begin
    case (eRespF_D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_eRespFD_OUT_BITS_29_TO_28_0_eRespFD_OUT_ETC__q15 =
	      eRespF_D_OUT[29:28];
      2'd3: CASE_eRespFD_OUT_BITS_29_TO_28_0_eRespFD_OUT_ETC__q15 = 2'd3;
    endcase
  end
  always@(eRespF_D_OUT)
  begin
    case (eRespF_D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_eRespFD_OUT_BITS_19_TO_18_0_eRespFD_OUT_ETC__q16 =
	      eRespF_D_OUT[19:18];
      2'd3: CASE_eRespFD_OUT_BITS_19_TO_18_0_eRespFD_OUT_ETC__q16 = 2'd3;
    endcase
  end
  always@(eRespF_D_OUT)
  begin
    case (eRespF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_eRespFD_OUT_BITS_9_TO_8_0_eRespFD_OUT_B_ETC__q17 =
	      eRespF_D_OUT[9:8];
      2'd3: CASE_eRespFD_OUT_BITS_9_TO_8_0_eRespFD_OUT_B_ETC__q17 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        gbeControl <= `BSV_ASSIGNMENT_DELAY 32'h00000101;
	mdi_rMDC <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mdi_rMDD <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	phyMdiInit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY 25'd753125;
	rxCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rxOvfCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	splitReadInFlight <= `BSV_ASSIGNMENT_DELAY 1'd0;
	txCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	txUndCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (gbeControl_EN)
	  gbeControl <= `BSV_ASSIGNMENT_DELAY gbeControl_D_IN;
	if (mdi_rMDC_EN) mdi_rMDC <= `BSV_ASSIGNMENT_DELAY mdi_rMDC_D_IN;
	if (mdi_rMDD_EN) mdi_rMDD <= `BSV_ASSIGNMENT_DELAY mdi_rMDD_D_IN;
	if (mdi_rOutEn_EN)
	  mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY mdi_rOutEn_D_IN;
	if (mdi_rState_EN)
	  mdi_rState <= `BSV_ASSIGNMENT_DELAY mdi_rState_D_IN;
	if (phyMdiInit_EN)
	  phyMdiInit <= `BSV_ASSIGNMENT_DELAY phyMdiInit_D_IN;
	if (phyResetWaitCnt_EN)
	  phyResetWaitCnt <= `BSV_ASSIGNMENT_DELAY phyResetWaitCnt_D_IN;
	if (rxCount_EN) rxCount <= `BSV_ASSIGNMENT_DELAY rxCount_D_IN;
	if (rxOvfCount_EN)
	  rxOvfCount <= `BSV_ASSIGNMENT_DELAY rxOvfCount_D_IN;
	if (splitReadInFlight_EN)
	  splitReadInFlight <= `BSV_ASSIGNMENT_DELAY splitReadInFlight_D_IN;
	if (txCount_EN) txCount <= `BSV_ASSIGNMENT_DELAY txCount_D_IN;
	if (txUndCount_EN)
	  txUndCount <= `BSV_ASSIGNMENT_DELAY txUndCount_D_IN;
      end
    if (mdi_rPhyAddr_EN)
      mdi_rPhyAddr <= `BSV_ASSIGNMENT_DELAY mdi_rPhyAddr_D_IN;
    if (mdi_rRegAddr_EN)
      mdi_rRegAddr <= `BSV_ASSIGNMENT_DELAY mdi_rRegAddr_D_IN;
    if (mdi_rWrite_EN) mdi_rWrite <= `BSV_ASSIGNMENT_DELAY mdi_rWrite_D_IN;
    if (mdi_rWriteData_EN)
      mdi_rWriteData <= `BSV_ASSIGNMENT_DELAY mdi_rWriteData_D_IN;
    if (mdi_vrReadData_0_EN)
      mdi_vrReadData_0 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_0_D_IN;
    if (mdi_vrReadData_1_EN)
      mdi_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_1_D_IN;
    if (mdi_vrReadData_10_EN)
      mdi_vrReadData_10 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_10_D_IN;
    if (mdi_vrReadData_11_EN)
      mdi_vrReadData_11 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_11_D_IN;
    if (mdi_vrReadData_12_EN)
      mdi_vrReadData_12 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_12_D_IN;
    if (mdi_vrReadData_13_EN)
      mdi_vrReadData_13 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_13_D_IN;
    if (mdi_vrReadData_14_EN)
      mdi_vrReadData_14 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_14_D_IN;
    if (mdi_vrReadData_15_EN)
      mdi_vrReadData_15 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_15_D_IN;
    if (mdi_vrReadData_2_EN)
      mdi_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_2_D_IN;
    if (mdi_vrReadData_3_EN)
      mdi_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_3_D_IN;
    if (mdi_vrReadData_4_EN)
      mdi_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_4_D_IN;
    if (mdi_vrReadData_5_EN)
      mdi_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_5_D_IN;
    if (mdi_vrReadData_6_EN)
      mdi_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_6_D_IN;
    if (mdi_vrReadData_7_EN)
      mdi_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_7_D_IN;
    if (mdi_vrReadData_8_EN)
      mdi_vrReadData_8 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_8_D_IN;
    if (mdi_vrReadData_9_EN)
      mdi_vrReadData_9 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_9_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    gbeControl = 32'hAAAAAAAA;
    mdi_rMDC = 1'h0;
    mdi_rMDD = 1'h0;
    mdi_rOutEn = 1'h0;
    mdi_rPhyAddr = 5'h0A;
    mdi_rRegAddr = 5'h0A;
    mdi_rState = 1'h0;
    mdi_rWrite = 1'h0;
    mdi_rWriteData = 16'hAAAA;
    mdi_vrReadData_0 = 1'h0;
    mdi_vrReadData_1 = 1'h0;
    mdi_vrReadData_10 = 1'h0;
    mdi_vrReadData_11 = 1'h0;
    mdi_vrReadData_12 = 1'h0;
    mdi_vrReadData_13 = 1'h0;
    mdi_vrReadData_14 = 1'h0;
    mdi_vrReadData_15 = 1'h0;
    mdi_vrReadData_2 = 1'h0;
    mdi_vrReadData_3 = 1'h0;
    mdi_vrReadData_4 = 1'h0;
    mdi_vrReadData_5 = 1'h0;
    mdi_vrReadData_6 = 1'h0;
    mdi_vrReadData_7 = 1'h0;
    mdi_vrReadData_8 = 1'h0;
    mdi_vrReadData_9 = 1'h0;
    phyMdiInit = 1'h0;
    phyResetWaitCnt = 25'h0AAAAAA;
    rxCount = 32'hAAAAAAAA;
    rxOvfCount = 32'hAAAAAAAA;
    splitReadInFlight = 1'h0;
    txCount = 32'hAAAAAAAA;
    txUndCount = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkGbeQABS

