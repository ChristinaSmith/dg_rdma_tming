//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Sun Jun 23 18:26:49 CDT 2013
//
// Method conflict info:
// Method: gmii_rx_rxd
// Conflict-free: gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
// Sequenced before (restricted): gmii_rx_rxd
//
// Method: gmii_rx_rx_dv
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
// Sequenced before (restricted): gmii_rx_rx_dv
//
// Method: gmii_rx_rx_er
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
// Sequenced before (restricted): gmii_rx_rx_er
//
// Method: gmii_tx_txd
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
//
// Method: gmii_tx_tx_en
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
//
// Method: gmii_tx_tx_er
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
//
// Method: gmii_col
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
// Conflicts: gmii_col
//
// Method: gmii_crs
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
// Conflicts: gmii_crs
//
// Method: gmii_intr
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_led,
// 	       ledOut
// Conflicts: gmii_intr
//
// Method: gmii_led
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
//
// Method: ledOut
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       ledOut
//
//
// Ports:
// Name                         I/O  size props
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// ledOut                         O     8 reg
// CLK_gmii_tx_tx_clk             O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// CLK_rxclkBnd                   O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// RST_N_gmii_rstn                O     1 reset
// CLK_sys1_clkp                  I     1 clock
// CLK_sys1_clkn                  I     1 clock
// CLK_gmii_rx_clk                I     1 clock
// sys0_clk                       I     1 clock
// sys0_rstn                      I     1 reset
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFTop_mm705(CLK_sys1_clkp,
		    CLK_sys1_clkn,
		    CLK_gmii_rx_clk,
		    sys0_clk,
		    sys0_rstn,

		    gmii_rx_rxd_i,

		    gmii_rx_rx_dv_i,

		    gmii_rx_rx_er_i,

		    gmii_tx_txd,

		    gmii_tx_tx_en,

		    gmii_tx_tx_er,

		    gmii_col_i,

		    gmii_crs_i,

		    gmii_intr_i,

		    gmii_led,

		    ledOut,

		    CLK_gmii_tx_tx_clk,
		    CLK_GATE_gmii_tx_tx_clk,

		    CLK_rxclkBnd,
		    CLK_GATE_rxclkBnd,

		    RST_N_gmii_rstn);
  input  CLK_sys1_clkp;
  input  CLK_sys1_clkn;
  input  CLK_gmii_rx_clk;
  input  sys0_clk;
  input  sys0_rstn;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // value method ledOut
  output [7 : 0] ledOut;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  output CLK_gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock CLK_rxclkBnd
  output CLK_rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // output resets
  output RST_N_gmii_rstn;

  // signals for module outputs
  wire [7 : 0] gmii_tx_txd, ledOut;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       CLK_gmii_tx_tx_clk,
       CLK_rxclkBnd,
       RST_N_gmii_rstn,
       gmii_led,
       gmii_tx_tx_en,
       gmii_tx_tx_er;

  // register cycleCount
  reg [31 : 0] cycleCount;
  wire [31 : 0] cycleCount_D_IN;
  wire cycleCount_EN;

  // register forkSndDM1_control
  reg forkSndDM1_control;
  wire forkSndDM1_control_D_IN, forkSndDM1_control_EN;

  // register idc_doResetCount
  reg [3 : 0] idc_doResetCount;
  wire [3 : 0] idc_doResetCount_D_IN;
  wire idc_doResetCount_EN;

  // register idc_preResetCount
  reg [3 : 0] idc_preResetCount;
  wire [3 : 0] idc_preResetCount_D_IN;
  wire idc_preResetCount_EN;

  // ports of submodule ackAggregatorDM1
  wire [133 : 0] ackAggregatorDM1_ackEgress_get;
  wire [15 : 0] ackAggregatorDM1_frameAck1_put,
		ackAggregatorDM1_frameAck2_put;
  wire ackAggregatorDM1_EN_ackEgress_get,
       ackAggregatorDM1_EN_frameAck1_put,
       ackAggregatorDM1_EN_frameAck2_put,
       ackAggregatorDM1_RDY_ackEgress_get,
       ackAggregatorDM1_RDY_frameAck1_put,
       ackAggregatorDM1_RDY_frameAck2_put;

  // ports of submodule ackTrackerDM1
  wire [133 : 0] ackTrackerDM1_ackIngress_put;
  wire [15 : 0] ackTrackerDM1_frameAck1_request_put,
		ackTrackerDM1_frameAck1_response_get,
		ackTrackerDM1_frameAck2_request_put,
		ackTrackerDM1_frameAck2_response_get;
  wire ackTrackerDM1_EN_ackIngress_put,
       ackTrackerDM1_EN_frameAck1_request_put,
       ackTrackerDM1_EN_frameAck1_response_get,
       ackTrackerDM1_EN_frameAck2_request_put,
       ackTrackerDM1_EN_frameAck2_response_get,
       ackTrackerDM1_RDY_ackIngress_put,
       ackTrackerDM1_RDY_frameAck1_request_put,
       ackTrackerDM1_RDY_frameAck1_response_get,
       ackTrackerDM1_RDY_frameAck2_request_put,
       ackTrackerDM1_RDY_frameAck2_response_get;

  // ports of submodule consumerDM1
  wire [128 : 0] consumerDM1_mesgExpected_put, consumerDM1_mesgReceived_put;
  wire [3 : 0] consumerDM1_incorrectCnt;
  wire consumerDM1_EN_mesgExpected_put,
       consumerDM1_EN_mesgReceived_put,
       consumerDM1_RDY_mesgExpected_put,
       consumerDM1_RDY_mesgReceived_put;

  // ports of submodule fau1DM1
  wire [133 : 0] fau1DM1_egress_get, fau1DM1_ingress_put;
  wire [15 : 0] fau1DM1_frameAck_get;
  wire fau1DM1_EN_egress_get,
       fau1DM1_EN_frameAck_get,
       fau1DM1_EN_free_get,
       fau1DM1_EN_ingress_put,
       fau1DM1_RDY_egress_get,
       fau1DM1_RDY_frameAck_get,
       fau1DM1_RDY_free_get,
       fau1DM1_RDY_ingress_put;

  // ports of submodule fau2DM1
  wire [133 : 0] fau2DM1_egress_get, fau2DM1_ingress_put;
  wire [15 : 0] fau2DM1_frameAck_get;
  wire fau2DM1_EN_egress_get,
       fau2DM1_EN_frameAck_get,
       fau2DM1_EN_free_get,
       fau2DM1_EN_ingress_put,
       fau2DM1_RDY_egress_get,
       fau2DM1_RDY_frameAck_get,
       fau2DM1_RDY_free_get,
       fau2DM1_RDY_ingress_put;

  // ports of submodule fdu1DM1
  wire [133 : 0] fdu1DM1_datagramRcv_get, fdu1DM1_datagramSnd_put;
  wire [15 : 0] fdu1DM1_frameAck_request_get, fdu1DM1_frameAck_response_put;
  wire fdu1DM1_EN_datagramRcv_get,
       fdu1DM1_EN_datagramSnd_put,
       fdu1DM1_EN_frameAck_request_get,
       fdu1DM1_EN_frameAck_response_put,
       fdu1DM1_EN_free_get,
       fdu1DM1_RDY_datagramRcv_get,
       fdu1DM1_RDY_datagramSnd_put,
       fdu1DM1_RDY_frameAck_request_get,
       fdu1DM1_RDY_frameAck_response_put,
       fdu1DM1_RDY_free_get;

  // ports of submodule fdu2DM1
  wire [133 : 0] fdu2DM1_datagramRcv_get, fdu2DM1_datagramSnd_put;
  wire [15 : 0] fdu2DM1_frameAck_request_get, fdu2DM1_frameAck_response_put;
  wire fdu2DM1_EN_datagramRcv_get,
       fdu2DM1_EN_datagramSnd_put,
       fdu2DM1_EN_frameAck_request_get,
       fdu2DM1_EN_frameAck_response_put,
       fdu2DM1_EN_free_get,
       fdu2DM1_RDY_datagramRcv_get,
       fdu2DM1_RDY_datagramSnd_put,
       fdu2DM1_RDY_frameAck_request_get,
       fdu2DM1_RDY_frameAck_response_put,
       fdu2DM1_RDY_free_get;

  // ports of submodule forkSndDM1_datagramEgressF1
  wire [133 : 0] forkSndDM1_datagramEgressF1_D_IN,
		 forkSndDM1_datagramEgressF1_D_OUT;
  wire forkSndDM1_datagramEgressF1_CLR,
       forkSndDM1_datagramEgressF1_DEQ,
       forkSndDM1_datagramEgressF1_EMPTY_N,
       forkSndDM1_datagramEgressF1_ENQ,
       forkSndDM1_datagramEgressF1_FULL_N;

  // ports of submodule forkSndDM1_datagramEgressF2
  wire [133 : 0] forkSndDM1_datagramEgressF2_D_IN,
		 forkSndDM1_datagramEgressF2_D_OUT;
  wire forkSndDM1_datagramEgressF2_CLR,
       forkSndDM1_datagramEgressF2_DEQ,
       forkSndDM1_datagramEgressF2_EMPTY_N,
       forkSndDM1_datagramEgressF2_ENQ,
       forkSndDM1_datagramEgressF2_FULL_N;

  // ports of submodule forkSndDM1_datagramIngressF
  wire [133 : 0] forkSndDM1_datagramIngressF_D_IN,
		 forkSndDM1_datagramIngressF_D_OUT;
  wire forkSndDM1_datagramIngressF_CLR,
       forkSndDM1_datagramIngressF_DEQ,
       forkSndDM1_datagramIngressF_EMPTY_N,
       forkSndDM1_datagramIngressF_ENQ,
       forkSndDM1_datagramIngressF_FULL_N;

  // ports of submodule forkSndDM1_freeF1
  wire forkSndDM1_freeF1_CLR,
       forkSndDM1_freeF1_DEQ,
       forkSndDM1_freeF1_EMPTY_N,
       forkSndDM1_freeF1_ENQ,
       forkSndDM1_freeF1_FULL_N;

  // ports of submodule forkSndDM1_freeF2
  wire forkSndDM1_freeF2_CLR,
       forkSndDM1_freeF2_DEQ,
       forkSndDM1_freeF2_EMPTY_N,
       forkSndDM1_freeF2_ENQ,
       forkSndDM1_freeF2_FULL_N;

  // ports of submodule gmac
  wire [39 : 0] gmac_rx_get, gmac_tx_put;
  wire [7 : 0] gmac_gmii_rx_rxd_i, gmac_gmii_tx_txd;
  wire gmac_CLK_gmii_tx_tx_clk,
       gmac_CLK_rxclkBnd,
       gmac_EN_rxOperate,
       gmac_EN_rx_get,
       gmac_EN_txOperate,
       gmac_EN_tx_put,
       gmac_RDY_rx_get,
       gmac_RDY_tx_put,
       gmac_gmii_col_i,
       gmac_gmii_crs_i,
       gmac_gmii_intr_i,
       gmac_gmii_led,
       gmac_gmii_rx_rx_dv_i,
       gmac_gmii_rx_rx_er_i,
       gmac_gmii_tx_tx_en,
       gmac_gmii_tx_tx_er;

  // ports of submodule hbdg2qabs
  wire [133 : 0] hbdg2qabs_hIn_put;
  wire [39 : 0] hbdg2qabs_qOut_get;
  wire hbdg2qabs_EN_hIn_put,
       hbdg2qabs_EN_qOut_get,
       hbdg2qabs_RDY_hIn_put,
       hbdg2qabs_RDY_qOut_get;

  // ports of submodule idc_idcRst
  wire idc_idcRst_ASSERT_IN, idc_idcRst_OUT_RST;

  // ports of submodule idc_resetP
  wire idc_resetP_RESET_OUT;

  // ports of submodule l2header
  wire [39 : 0] l2header_qIn_put, l2header_qOut_get;
  wire l2header_EN_qIn_put,
       l2header_EN_qOut_get,
       l2header_RDY_qIn_put,
       l2header_RDY_qOut_get;

  // ports of submodule l2remover
  wire [39 : 0] l2remover_qIn_put, l2remover_qOut_get;
  wire l2remover_EN_qIn_put,
       l2remover_EN_qOut_get,
       l2remover_RDY_qIn_put,
       l2remover_RDY_qOut_get;

  // ports of submodule mergeRcvDM1_datagramEgressF
  wire [133 : 0] mergeRcvDM1_datagramEgressF_D_IN,
		 mergeRcvDM1_datagramEgressF_D_OUT;
  wire mergeRcvDM1_datagramEgressF_CLR,
       mergeRcvDM1_datagramEgressF_DEQ,
       mergeRcvDM1_datagramEgressF_EMPTY_N,
       mergeRcvDM1_datagramEgressF_ENQ,
       mergeRcvDM1_datagramEgressF_FULL_N;

  // ports of submodule mergeRcvDM1_datagramIngressF1
  wire [133 : 0] mergeRcvDM1_datagramIngressF1_D_IN,
		 mergeRcvDM1_datagramIngressF1_D_OUT;
  wire mergeRcvDM1_datagramIngressF1_CLR,
       mergeRcvDM1_datagramIngressF1_DEQ,
       mergeRcvDM1_datagramIngressF1_EMPTY_N,
       mergeRcvDM1_datagramIngressF1_ENQ,
       mergeRcvDM1_datagramIngressF1_FULL_N;

  // ports of submodule mergeRcvDM1_datagramIngressF2
  wire [133 : 0] mergeRcvDM1_datagramIngressF2_D_IN,
		 mergeRcvDM1_datagramIngressF2_D_OUT;
  wire mergeRcvDM1_datagramIngressF2_CLR,
       mergeRcvDM1_datagramIngressF2_DEQ,
       mergeRcvDM1_datagramIngressF2_EMPTY_N,
       mergeRcvDM1_datagramIngressF2_ENQ,
       mergeRcvDM1_datagramIngressF2_FULL_N;

  // ports of submodule mergeWireDM1
  wire [133 : 0] mergeWireDM1_egressWire_request_get,
		 mergeWireDM1_egressWire_response_put,
		 mergeWireDM1_ingressRcv_request_get,
		 mergeWireDM1_ingressRcv_response_put,
		 mergeWireDM1_ingressSnd_request_put,
		 mergeWireDM1_ingressSnd_response_get;
  wire mergeWireDM1_EN_egressWire_request_get,
       mergeWireDM1_EN_egressWire_response_put,
       mergeWireDM1_EN_ingressRcv_request_get,
       mergeWireDM1_EN_ingressRcv_response_put,
       mergeWireDM1_EN_ingressSnd_request_put,
       mergeWireDM1_EN_ingressSnd_response_get,
       mergeWireDM1_RDY_egressWire_request_get,
       mergeWireDM1_RDY_egressWire_response_put,
       mergeWireDM1_RDY_ingressRcv_request_get,
       mergeWireDM1_RDY_ingressRcv_response_put,
       mergeWireDM1_RDY_ingressSnd_request_put,
       mergeWireDM1_RDY_ingressSnd_response_get;

  // ports of submodule mfFAUDM1
  wire [133 : 0] mfFAUDM1_ack_put,
		 mfFAUDM1_egress1_get,
		 mfFAUDM1_egress2_get,
		 mfFAUDM1_ingress_request_put,
		 mfFAUDM1_ingress_response_get;
  wire mfFAUDM1_EN_ack_put,
       mfFAUDM1_EN_egress1_get,
       mfFAUDM1_EN_egress2_get,
       mfFAUDM1_EN_free1_put,
       mfFAUDM1_EN_free2_put,
       mfFAUDM1_EN_ingress_request_put,
       mfFAUDM1_EN_ingress_response_get,
       mfFAUDM1_RDY_ack_put,
       mfFAUDM1_RDY_egress1_get,
       mfFAUDM1_RDY_egress2_get,
       mfFAUDM1_RDY_free1_put,
       mfFAUDM1_RDY_free2_put,
       mfFAUDM1_RDY_ingress_request_put,
       mfFAUDM1_RDY_ingress_response_get;

  // ports of submodule mfFDUDM1
  wire [133 : 0] mfFDUDM1_ack_get,
		 mfFDUDM1_egress_request_get,
		 mfFDUDM1_egress_response_put,
		 mfFDUDM1_ingress1_put,
		 mfFDUDM1_ingress2_put;
  wire mfFDUDM1_EN_ack_get,
       mfFDUDM1_EN_egress_request_get,
       mfFDUDM1_EN_egress_response_put,
       mfFDUDM1_EN_ingress1_put,
       mfFDUDM1_EN_ingress2_put,
       mfFDUDM1_RDY_ack_get,
       mfFDUDM1_RDY_egress_request_get,
       mfFDUDM1_RDY_egress_response_put,
       mfFDUDM1_RDY_ingress1_put,
       mfFDUDM1_RDY_ingress2_put;

  // ports of submodule producer1DM1
  wire [128 : 0] producer1DM1_mesg_get;
  wire producer1DM1_EN_mesg_get, producer1DM1_RDY_mesg_get;

  // ports of submodule producer2DM1
  wire [128 : 0] producer2DM1_mesg_get;
  wire producer2DM1_EN_mesg_get, producer2DM1_RDY_mesg_get;

  // ports of submodule qabs2hbdg
  wire [133 : 0] qabs2hbdg_hOut_get;
  wire [39 : 0] qabs2hbdg_qIn_put;
  wire qabs2hbdg_EN_hOut_get,
       qabs2hbdg_EN_qIn_put,
       qabs2hbdg_RDY_hOut_get,
       qabs2hbdg_RDY_qIn_put;

  // ports of submodule receiverDM1
  wire [133 : 0] receiverDM1_datagram_put;
  wire [128 : 0] receiverDM1_mesg_get;
  wire receiverDM1_EN_datagram_put,
       receiverDM1_EN_mesg_get,
       receiverDM1_RDY_datagram_put,
       receiverDM1_RDY_mesg_get;

  // ports of submodule rstndb
  wire rstndb_OUT_RST;

  // ports of submodule senderDM1
  wire [133 : 0] senderDM1_datagram_get;
  wire [128 : 0] senderDM1_mesg_put;
  wire senderDM1_EN_datagram_get,
       senderDM1_EN_mesg_put,
       senderDM1_RDY_datagram_get,
       senderDM1_RDY_mesg_put;

  // ports of submodule sys1_clk
  wire sys1_clk_O;

  // ports of submodule sys1_clki
  wire sys1_clki_O;

  // ports of submodule sys1_rst
  wire sys1_rst_OUT_RST;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_countCycles,
       CAN_FIRE_RL_forkSndDM1_muxFrame1,
       CAN_FIRE_RL_forkSndDM1_muxFrame2,
       CAN_FIRE_RL_gbe_operate,
       CAN_FIRE_RL_idc_do_reset,
       CAN_FIRE_RL_idc_my_reset_condition,
       CAN_FIRE_RL_idc_pre_reset,
       CAN_FIRE_RL_mergeRcvDM1_mergeFrame1,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_10,
       CAN_FIRE_RL_mkConnectionGetPut_11,
       CAN_FIRE_RL_mkConnectionGetPut_12,
       CAN_FIRE_RL_mkConnectionGetPut_13,
       CAN_FIRE_RL_mkConnectionGetPut_14,
       CAN_FIRE_RL_mkConnectionGetPut_15,
       CAN_FIRE_RL_mkConnectionGetPut_16,
       CAN_FIRE_RL_mkConnectionGetPut_17,
       CAN_FIRE_RL_mkConnectionGetPut_18,
       CAN_FIRE_RL_mkConnectionGetPut_19,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_20,
       CAN_FIRE_RL_mkConnectionGetPut_21,
       CAN_FIRE_RL_mkConnectionGetPut_22,
       CAN_FIRE_RL_mkConnectionGetPut_23,
       CAN_FIRE_RL_mkConnectionGetPut_24,
       CAN_FIRE_RL_mkConnectionGetPut_25,
       CAN_FIRE_RL_mkConnectionGetPut_26,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionGetPut_5,
       CAN_FIRE_RL_mkConnectionGetPut_6,
       CAN_FIRE_RL_mkConnectionGetPut_7,
       CAN_FIRE_RL_mkConnectionGetPut_8,
       CAN_FIRE_RL_mkConnectionGetPut_9,
       CAN_FIRE_gmii_col,
       CAN_FIRE_gmii_crs,
       CAN_FIRE_gmii_intr,
       CAN_FIRE_gmii_rx_rx_dv,
       CAN_FIRE_gmii_rx_rx_er,
       CAN_FIRE_gmii_rx_rxd,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_countCycles,
       WILL_FIRE_RL_forkSndDM1_muxFrame1,
       WILL_FIRE_RL_forkSndDM1_muxFrame2,
       WILL_FIRE_RL_gbe_operate,
       WILL_FIRE_RL_idc_do_reset,
       WILL_FIRE_RL_idc_my_reset_condition,
       WILL_FIRE_RL_idc_pre_reset,
       WILL_FIRE_RL_mergeRcvDM1_mergeFrame1,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_10,
       WILL_FIRE_RL_mkConnectionGetPut_11,
       WILL_FIRE_RL_mkConnectionGetPut_12,
       WILL_FIRE_RL_mkConnectionGetPut_13,
       WILL_FIRE_RL_mkConnectionGetPut_14,
       WILL_FIRE_RL_mkConnectionGetPut_15,
       WILL_FIRE_RL_mkConnectionGetPut_16,
       WILL_FIRE_RL_mkConnectionGetPut_17,
       WILL_FIRE_RL_mkConnectionGetPut_18,
       WILL_FIRE_RL_mkConnectionGetPut_19,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_20,
       WILL_FIRE_RL_mkConnectionGetPut_21,
       WILL_FIRE_RL_mkConnectionGetPut_22,
       WILL_FIRE_RL_mkConnectionGetPut_23,
       WILL_FIRE_RL_mkConnectionGetPut_24,
       WILL_FIRE_RL_mkConnectionGetPut_25,
       WILL_FIRE_RL_mkConnectionGetPut_26,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionGetPut_5,
       WILL_FIRE_RL_mkConnectionGetPut_6,
       WILL_FIRE_RL_mkConnectionGetPut_7,
       WILL_FIRE_RL_mkConnectionGetPut_8,
       WILL_FIRE_RL_mkConnectionGetPut_9,
       WILL_FIRE_gmii_col,
       WILL_FIRE_gmii_crs,
       WILL_FIRE_gmii_intr,
       WILL_FIRE_gmii_rx_rx_dv,
       WILL_FIRE_gmii_rx_rx_er,
       WILL_FIRE_gmii_rx_rxd;

  // inputs to muxes for submodule ports
  wire MUX_forkSndDM1_control_write_1__VAL_1,
       MUX_forkSndDM1_control_write_1__VAL_2;

  // remaining internal signals
  reg [1 : 0] CASE_gmacrx_get_BITS_19_TO_18_0_gmacrx_get_B_ETC__q11,
	      CASE_gmacrx_get_BITS_29_TO_28_0_gmacrx_get_B_ETC__q10,
	      CASE_gmacrx_get_BITS_39_TO_38_0_gmacrx_get_B_ETC__q9,
	      CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q12,
	      CASE_hbdg2qabsqOut_get_BITS_19_TO_18_0_hbdg2q_ETC__q7,
	      CASE_hbdg2qabsqOut_get_BITS_29_TO_28_0_hbdg2q_ETC__q6,
	      CASE_hbdg2qabsqOut_get_BITS_39_TO_38_0_hbdg2q_ETC__q5,
	      CASE_hbdg2qabsqOut_get_BITS_9_TO_8_0_hbdg2qab_ETC__q8,
	      CASE_l2headerqOut_get_BITS_19_TO_18_0_l2heade_ETC__q3,
	      CASE_l2headerqOut_get_BITS_29_TO_28_0_l2heade_ETC__q2,
	      CASE_l2headerqOut_get_BITS_39_TO_38_0_l2heade_ETC__q1,
	      CASE_l2headerqOut_get_BITS_9_TO_8_0_l2header_ETC__q4,
	      CASE_l2removerqOut_get_BITS_19_TO_18_0_l2remo_ETC__q15,
	      CASE_l2removerqOut_get_BITS_29_TO_28_0_l2remo_ETC__q14,
	      CASE_l2removerqOut_get_BITS_39_TO_38_0_l2remo_ETC__q13,
	      CASE_l2removerqOut_get_BITS_9_TO_8_0_l2remove_ETC__q16;
  wire forkSndDM1_datagramIngressF_i_notEmpty__1_AND__ETC___d22,
       forkSndDM1_datagramIngressF_i_notEmpty__1_AND__ETC___d34;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  assign CLK_gmii_tx_tx_clk = gmac_CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclkBnd
  assign CLK_rxclkBnd = gmac_CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // output resets
  assign RST_N_gmii_rstn = sys1_rst_OUT_RST ;

  // action method gmii_rx_rxd
  assign CAN_FIRE_gmii_rx_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rxd = 1'd1 ;

  // action method gmii_rx_rx_dv
  assign CAN_FIRE_gmii_rx_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_dv = 1'd1 ;

  // action method gmii_rx_rx_er
  assign CAN_FIRE_gmii_rx_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_er = 1'd1 ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gmac_gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gmac_gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gmac_gmii_tx_tx_er ;

  // action method gmii_col
  assign CAN_FIRE_gmii_col = 1'd1 ;
  assign WILL_FIRE_gmii_col = 1'd1 ;

  // action method gmii_crs
  assign CAN_FIRE_gmii_crs = 1'd1 ;
  assign WILL_FIRE_gmii_crs = 1'd1 ;

  // action method gmii_intr
  assign CAN_FIRE_gmii_intr = 1'd1 ;
  assign WILL_FIRE_gmii_intr = 1'd1 ;

  // value method gmii_led
  assign gmii_led = gmac_gmii_led ;

  // value method ledOut
  assign ledOut = { cycleCount[31:28], consumerDM1_incorrectCnt } ;

  // submodule ackAggregatorDM1
  mkAckAggregatorDM1 ackAggregatorDM1(.CLK(sys0_clk),
				      .RST_N(rstndb_OUT_RST),
				      .frameAck1_put(ackAggregatorDM1_frameAck1_put),
				      .frameAck2_put(ackAggregatorDM1_frameAck2_put),
				      .EN_frameAck1_put(ackAggregatorDM1_EN_frameAck1_put),
				      .EN_frameAck2_put(ackAggregatorDM1_EN_frameAck2_put),
				      .EN_ackEgress_get(ackAggregatorDM1_EN_ackEgress_get),
				      .RDY_frameAck1_put(ackAggregatorDM1_RDY_frameAck1_put),
				      .RDY_frameAck2_put(ackAggregatorDM1_RDY_frameAck2_put),
				      .ackEgress_get(ackAggregatorDM1_ackEgress_get),
				      .RDY_ackEgress_get(ackAggregatorDM1_RDY_ackEgress_get));

  // submodule ackTrackerDM1
  mkAckTracker ackTrackerDM1(.CLK(sys0_clk),
			     .RST_N(rstndb_OUT_RST),
			     .ackIngress_put(ackTrackerDM1_ackIngress_put),
			     .frameAck1_request_put(ackTrackerDM1_frameAck1_request_put),
			     .frameAck2_request_put(ackTrackerDM1_frameAck2_request_put),
			     .EN_frameAck1_request_put(ackTrackerDM1_EN_frameAck1_request_put),
			     .EN_frameAck1_response_get(ackTrackerDM1_EN_frameAck1_response_get),
			     .EN_frameAck2_request_put(ackTrackerDM1_EN_frameAck2_request_put),
			     .EN_frameAck2_response_get(ackTrackerDM1_EN_frameAck2_response_get),
			     .EN_ackIngress_put(ackTrackerDM1_EN_ackIngress_put),
			     .RDY_frameAck1_request_put(ackTrackerDM1_RDY_frameAck1_request_put),
			     .frameAck1_response_get(ackTrackerDM1_frameAck1_response_get),
			     .RDY_frameAck1_response_get(ackTrackerDM1_RDY_frameAck1_response_get),
			     .RDY_frameAck2_request_put(ackTrackerDM1_RDY_frameAck2_request_put),
			     .frameAck2_response_get(ackTrackerDM1_frameAck2_response_get),
			     .RDY_frameAck2_response_get(ackTrackerDM1_RDY_frameAck2_response_get),
			     .RDY_ackIngress_put(ackTrackerDM1_RDY_ackIngress_put));

  // submodule consumerDM1
  mkMLConsumer consumerDM1(.CLK(sys0_clk),
			   .RST_N(rstndb_OUT_RST),
			   .mesgExpected_put(consumerDM1_mesgExpected_put),
			   .mesgReceived_put(consumerDM1_mesgReceived_put),
			   .EN_mesgExpected_put(consumerDM1_EN_mesgExpected_put),
			   .EN_mesgReceived_put(consumerDM1_EN_mesgReceived_put),
			   .RDY_mesgExpected_put(consumerDM1_RDY_mesgExpected_put),
			   .RDY_mesgReceived_put(consumerDM1_RDY_mesgReceived_put),
			   .incorrectCnt(consumerDM1_incorrectCnt),
			   .RDY_incorrectCnt());

  // submodule fau1DM1
  mkFAU fau1DM1(.CLK(sys0_clk),
		.RST_N(rstndb_OUT_RST),
		.ingress_put(fau1DM1_ingress_put),
		.EN_free_get(fau1DM1_EN_free_get),
		.EN_ingress_put(fau1DM1_EN_ingress_put),
		.EN_egress_get(fau1DM1_EN_egress_get),
		.EN_frameAck_get(fau1DM1_EN_frameAck_get),
		.RDY_free_get(fau1DM1_RDY_free_get),
		.RDY_ingress_put(fau1DM1_RDY_ingress_put),
		.egress_get(fau1DM1_egress_get),
		.RDY_egress_get(fau1DM1_RDY_egress_get),
		.frameAck_get(fau1DM1_frameAck_get),
		.RDY_frameAck_get(fau1DM1_RDY_frameAck_get));

  // submodule fau2DM1
  mkFAU fau2DM1(.CLK(sys0_clk),
		.RST_N(rstndb_OUT_RST),
		.ingress_put(fau2DM1_ingress_put),
		.EN_free_get(fau2DM1_EN_free_get),
		.EN_ingress_put(fau2DM1_EN_ingress_put),
		.EN_egress_get(fau2DM1_EN_egress_get),
		.EN_frameAck_get(fau2DM1_EN_frameAck_get),
		.RDY_free_get(fau2DM1_RDY_free_get),
		.RDY_ingress_put(fau2DM1_RDY_ingress_put),
		.egress_get(fau2DM1_egress_get),
		.RDY_egress_get(fau2DM1_RDY_egress_get),
		.frameAck_get(fau2DM1_frameAck_get),
		.RDY_frameAck_get(fau2DM1_RDY_frameAck_get));

  // submodule fdu1DM1
  mkFDU fdu1DM1(.CLK(sys0_clk),
		.RST_N(rstndb_OUT_RST),
		.datagramSnd_put(fdu1DM1_datagramSnd_put),
		.frameAck_response_put(fdu1DM1_frameAck_response_put),
		.EN_free_get(fdu1DM1_EN_free_get),
		.EN_datagramSnd_put(fdu1DM1_EN_datagramSnd_put),
		.EN_datagramRcv_get(fdu1DM1_EN_datagramRcv_get),
		.EN_frameAck_request_get(fdu1DM1_EN_frameAck_request_get),
		.EN_frameAck_response_put(fdu1DM1_EN_frameAck_response_put),
		.RDY_free_get(fdu1DM1_RDY_free_get),
		.RDY_datagramSnd_put(fdu1DM1_RDY_datagramSnd_put),
		.datagramRcv_get(fdu1DM1_datagramRcv_get),
		.RDY_datagramRcv_get(fdu1DM1_RDY_datagramRcv_get),
		.frameAck_request_get(fdu1DM1_frameAck_request_get),
		.RDY_frameAck_request_get(fdu1DM1_RDY_frameAck_request_get),
		.RDY_frameAck_response_put(fdu1DM1_RDY_frameAck_response_put));

  // submodule fdu2DM1
  mkFDU fdu2DM1(.CLK(sys0_clk),
		.RST_N(rstndb_OUT_RST),
		.datagramSnd_put(fdu2DM1_datagramSnd_put),
		.frameAck_response_put(fdu2DM1_frameAck_response_put),
		.EN_free_get(fdu2DM1_EN_free_get),
		.EN_datagramSnd_put(fdu2DM1_EN_datagramSnd_put),
		.EN_datagramRcv_get(fdu2DM1_EN_datagramRcv_get),
		.EN_frameAck_request_get(fdu2DM1_EN_frameAck_request_get),
		.EN_frameAck_response_put(fdu2DM1_EN_frameAck_response_put),
		.RDY_free_get(fdu2DM1_RDY_free_get),
		.RDY_datagramSnd_put(fdu2DM1_RDY_datagramSnd_put),
		.datagramRcv_get(fdu2DM1_datagramRcv_get),
		.RDY_datagramRcv_get(fdu2DM1_RDY_datagramRcv_get),
		.frameAck_request_get(fdu2DM1_frameAck_request_get),
		.RDY_frameAck_request_get(fdu2DM1_RDY_frameAck_request_get),
		.RDY_frameAck_response_put(fdu2DM1_RDY_frameAck_response_put));

  // submodule forkSndDM1_datagramEgressF1
  FIFO2 #(.width(32'd134),
	  .guarded(32'd1)) forkSndDM1_datagramEgressF1(.RST(rstndb_OUT_RST),
						       .CLK(sys0_clk),
						       .D_IN(forkSndDM1_datagramEgressF1_D_IN),
						       .ENQ(forkSndDM1_datagramEgressF1_ENQ),
						       .DEQ(forkSndDM1_datagramEgressF1_DEQ),
						       .CLR(forkSndDM1_datagramEgressF1_CLR),
						       .D_OUT(forkSndDM1_datagramEgressF1_D_OUT),
						       .FULL_N(forkSndDM1_datagramEgressF1_FULL_N),
						       .EMPTY_N(forkSndDM1_datagramEgressF1_EMPTY_N));

  // submodule forkSndDM1_datagramEgressF2
  FIFO2 #(.width(32'd134),
	  .guarded(32'd1)) forkSndDM1_datagramEgressF2(.RST(rstndb_OUT_RST),
						       .CLK(sys0_clk),
						       .D_IN(forkSndDM1_datagramEgressF2_D_IN),
						       .ENQ(forkSndDM1_datagramEgressF2_ENQ),
						       .DEQ(forkSndDM1_datagramEgressF2_DEQ),
						       .CLR(forkSndDM1_datagramEgressF2_CLR),
						       .D_OUT(forkSndDM1_datagramEgressF2_D_OUT),
						       .FULL_N(forkSndDM1_datagramEgressF2_FULL_N),
						       .EMPTY_N(forkSndDM1_datagramEgressF2_EMPTY_N));

  // submodule forkSndDM1_datagramIngressF
  FIFO2 #(.width(32'd134),
	  .guarded(32'd1)) forkSndDM1_datagramIngressF(.RST(rstndb_OUT_RST),
						       .CLK(sys0_clk),
						       .D_IN(forkSndDM1_datagramIngressF_D_IN),
						       .ENQ(forkSndDM1_datagramIngressF_ENQ),
						       .DEQ(forkSndDM1_datagramIngressF_DEQ),
						       .CLR(forkSndDM1_datagramIngressF_CLR),
						       .D_OUT(forkSndDM1_datagramIngressF_D_OUT),
						       .FULL_N(forkSndDM1_datagramIngressF_FULL_N),
						       .EMPTY_N(forkSndDM1_datagramIngressF_EMPTY_N));

  // submodule forkSndDM1_freeF1
  FIFO10 #(.guarded(32'd1)) forkSndDM1_freeF1(.RST(rstndb_OUT_RST),
					      .CLK(sys0_clk),
					      .ENQ(forkSndDM1_freeF1_ENQ),
					      .DEQ(forkSndDM1_freeF1_DEQ),
					      .CLR(forkSndDM1_freeF1_CLR),
					      .FULL_N(forkSndDM1_freeF1_FULL_N),
					      .EMPTY_N(forkSndDM1_freeF1_EMPTY_N));

  // submodule forkSndDM1_freeF2
  FIFO10 #(.guarded(32'd1)) forkSndDM1_freeF2(.RST(rstndb_OUT_RST),
					      .CLK(sys0_clk),
					      .ENQ(forkSndDM1_freeF2_ENQ),
					      .DEQ(forkSndDM1_freeF2_DEQ),
					      .CLR(forkSndDM1_freeF2_CLR),
					      .FULL_N(forkSndDM1_freeF2_FULL_N),
					      .EMPTY_N(forkSndDM1_freeF2_EMPTY_N));

  // submodule gmac
  mkQBGMAC gmac(.CLK_rxClk(CLK_gmii_rx_clk),
		.CLK_txClk(sys1_clk_O),
		.RST_N_gmRst(sys1_rst_OUT_RST),
		.CLK(sys0_clk),
		.RST_N(sys0_rstn),
		.gmii_col_i(gmac_gmii_col_i),
		.gmii_crs_i(gmac_gmii_crs_i),
		.gmii_intr_i(gmac_gmii_intr_i),
		.gmii_rx_rx_dv_i(gmac_gmii_rx_rx_dv_i),
		.gmii_rx_rx_er_i(gmac_gmii_rx_rx_er_i),
		.gmii_rx_rxd_i(gmac_gmii_rx_rxd_i),
		.tx_put(gmac_tx_put),
		.EN_rx_get(gmac_EN_rx_get),
		.EN_tx_put(gmac_EN_tx_put),
		.EN_rxOperate(gmac_EN_rxOperate),
		.EN_txOperate(gmac_EN_txOperate),
		.gmii_tx_txd(gmac_gmii_tx_txd),
		.gmii_tx_tx_en(gmac_gmii_tx_tx_en),
		.gmii_tx_tx_er(gmac_gmii_tx_tx_er),
		.gmii_led(gmac_gmii_led),
		.rx_get(gmac_rx_get),
		.RDY_rx_get(gmac_RDY_rx_get),
		.RDY_tx_put(gmac_RDY_tx_put),
		.RDY_rxOperate(),
		.RDY_txOperate(),
		.rxOverFlow(),
		.RDY_rxOverFlow(),
		.txUnderFlow(),
		.RDY_txUnderFlow(),
		.phyInterrupt(),
		.RDY_phyInterrupt(),
		.CLK_gmii_tx_tx_clk(gmac_CLK_gmii_tx_tx_clk),
		.CLK_GATE_gmii_tx_tx_clk(),
		.CLK_rxclkBnd(gmac_CLK_rxclkBnd),
		.CLK_GATE_rxclkBnd());

  // submodule hbdg2qabs
  mkHBDG2QABS hbdg2qabs(.CLK(sys0_clk),
			.RST_N(rstndb_OUT_RST),
			.hIn_put(hbdg2qabs_hIn_put),
			.EN_hIn_put(hbdg2qabs_EN_hIn_put),
			.EN_qOut_get(hbdg2qabs_EN_qOut_get),
			.RDY_hIn_put(hbdg2qabs_RDY_hIn_put),
			.qOut_get(hbdg2qabs_qOut_get),
			.RDY_qOut_get(hbdg2qabs_RDY_qOut_get));

  // submodule idc
  IDELAYCTRL idc(.REFCLK(sys0_clk), .RST(idc_resetP_RESET_OUT), .RDY());

  // submodule idc_idcRst
  MakeResetA #(.RSTDELAY(32'd1), .init(1'd0)) idc_idcRst(.CLK(sys0_clk),
							 .RST(sys0_rstn),
							 .DST_CLK(sys0_clk),
							 .ASSERT_IN(idc_idcRst_ASSERT_IN),
							 .ASSERT_OUT(),
							 .OUT_RST(idc_idcRst_OUT_RST));

  // submodule idc_resetP
  ResetInverter idc_resetP(.RESET_IN(idc_idcRst_OUT_RST),
			   .RESET_OUT(idc_resetP_RESET_OUT));

  // submodule l2header
  mkL2Inserter l2header(.CLK(sys0_clk),
			.RST_N(rstndb_OUT_RST),
			.qIn_put(l2header_qIn_put),
			.EN_qIn_put(l2header_EN_qIn_put),
			.EN_qOut_get(l2header_EN_qOut_get),
			.RDY_qIn_put(l2header_RDY_qIn_put),
			.qOut_get(l2header_qOut_get),
			.RDY_qOut_get(l2header_RDY_qOut_get));

  // submodule l2remover
  mkL2Remover l2remover(.CLK(sys0_clk),
			.RST_N(rstndb_OUT_RST),
			.qIn_put(l2remover_qIn_put),
			.EN_qIn_put(l2remover_EN_qIn_put),
			.EN_qOut_get(l2remover_EN_qOut_get),
			.RDY_qIn_put(l2remover_RDY_qIn_put),
			.qOut_get(l2remover_qOut_get),
			.RDY_qOut_get(l2remover_RDY_qOut_get));

  // submodule mergeRcvDM1_datagramEgressF
  FIFO2 #(.width(32'd134),
	  .guarded(32'd1)) mergeRcvDM1_datagramEgressF(.RST(rstndb_OUT_RST),
						       .CLK(sys0_clk),
						       .D_IN(mergeRcvDM1_datagramEgressF_D_IN),
						       .ENQ(mergeRcvDM1_datagramEgressF_ENQ),
						       .DEQ(mergeRcvDM1_datagramEgressF_DEQ),
						       .CLR(mergeRcvDM1_datagramEgressF_CLR),
						       .D_OUT(mergeRcvDM1_datagramEgressF_D_OUT),
						       .FULL_N(mergeRcvDM1_datagramEgressF_FULL_N),
						       .EMPTY_N(mergeRcvDM1_datagramEgressF_EMPTY_N));

  // submodule mergeRcvDM1_datagramIngressF1
  FIFO2 #(.width(32'd134),
	  .guarded(32'd1)) mergeRcvDM1_datagramIngressF1(.RST(rstndb_OUT_RST),
							 .CLK(sys0_clk),
							 .D_IN(mergeRcvDM1_datagramIngressF1_D_IN),
							 .ENQ(mergeRcvDM1_datagramIngressF1_ENQ),
							 .DEQ(mergeRcvDM1_datagramIngressF1_DEQ),
							 .CLR(mergeRcvDM1_datagramIngressF1_CLR),
							 .D_OUT(mergeRcvDM1_datagramIngressF1_D_OUT),
							 .FULL_N(mergeRcvDM1_datagramIngressF1_FULL_N),
							 .EMPTY_N(mergeRcvDM1_datagramIngressF1_EMPTY_N));

  // submodule mergeRcvDM1_datagramIngressF2
  FIFO2 #(.width(32'd134),
	  .guarded(32'd1)) mergeRcvDM1_datagramIngressF2(.RST(rstndb_OUT_RST),
							 .CLK(sys0_clk),
							 .D_IN(mergeRcvDM1_datagramIngressF2_D_IN),
							 .ENQ(mergeRcvDM1_datagramIngressF2_ENQ),
							 .DEQ(mergeRcvDM1_datagramIngressF2_DEQ),
							 .CLR(mergeRcvDM1_datagramIngressF2_CLR),
							 .D_OUT(mergeRcvDM1_datagramIngressF2_D_OUT),
							 .FULL_N(mergeRcvDM1_datagramIngressF2_FULL_N),
							 .EMPTY_N(mergeRcvDM1_datagramIngressF2_EMPTY_N));

  // submodule mergeWireDM1
  mkMergeToWireDM1 mergeWireDM1(.CLK(sys0_clk),
				.RST_N(rstndb_OUT_RST),
				.egressWire_response_put(mergeWireDM1_egressWire_response_put),
				.ingressRcv_response_put(mergeWireDM1_ingressRcv_response_put),
				.ingressSnd_request_put(mergeWireDM1_ingressSnd_request_put),
				.EN_ingressSnd_request_put(mergeWireDM1_EN_ingressSnd_request_put),
				.EN_ingressSnd_response_get(mergeWireDM1_EN_ingressSnd_response_get),
				.EN_ingressRcv_request_get(mergeWireDM1_EN_ingressRcv_request_get),
				.EN_ingressRcv_response_put(mergeWireDM1_EN_ingressRcv_response_put),
				.EN_egressWire_request_get(mergeWireDM1_EN_egressWire_request_get),
				.EN_egressWire_response_put(mergeWireDM1_EN_egressWire_response_put),
				.RDY_ingressSnd_request_put(mergeWireDM1_RDY_ingressSnd_request_put),
				.ingressSnd_response_get(mergeWireDM1_ingressSnd_response_get),
				.RDY_ingressSnd_response_get(mergeWireDM1_RDY_ingressSnd_response_get),
				.ingressRcv_request_get(mergeWireDM1_ingressRcv_request_get),
				.RDY_ingressRcv_request_get(mergeWireDM1_RDY_ingressRcv_request_get),
				.RDY_ingressRcv_response_put(mergeWireDM1_RDY_ingressRcv_response_put),
				.egressWire_request_get(mergeWireDM1_egressWire_request_get),
				.RDY_egressWire_request_get(mergeWireDM1_RDY_egressWire_request_get),
				.RDY_egressWire_response_put(mergeWireDM1_RDY_egressWire_response_put));

  // submodule mfFAUDM1
  mkMergeForkFAU mfFAUDM1(.CLK(sys0_clk),
			  .RST_N(rstndb_OUT_RST),
			  .ack_put(mfFAUDM1_ack_put),
			  .ingress_request_put(mfFAUDM1_ingress_request_put),
			  .EN_ingress_request_put(mfFAUDM1_EN_ingress_request_put),
			  .EN_ingress_response_get(mfFAUDM1_EN_ingress_response_get),
			  .EN_egress1_get(mfFAUDM1_EN_egress1_get),
			  .EN_egress2_get(mfFAUDM1_EN_egress2_get),
			  .EN_ack_put(mfFAUDM1_EN_ack_put),
			  .EN_free1_put(mfFAUDM1_EN_free1_put),
			  .EN_free2_put(mfFAUDM1_EN_free2_put),
			  .RDY_ingress_request_put(mfFAUDM1_RDY_ingress_request_put),
			  .ingress_response_get(mfFAUDM1_ingress_response_get),
			  .RDY_ingress_response_get(mfFAUDM1_RDY_ingress_response_get),
			  .egress1_get(mfFAUDM1_egress1_get),
			  .RDY_egress1_get(mfFAUDM1_RDY_egress1_get),
			  .egress2_get(mfFAUDM1_egress2_get),
			  .RDY_egress2_get(mfFAUDM1_RDY_egress2_get),
			  .RDY_ack_put(mfFAUDM1_RDY_ack_put),
			  .RDY_free1_put(mfFAUDM1_RDY_free1_put),
			  .RDY_free2_put(mfFAUDM1_RDY_free2_put));

  // submodule mfFDUDM1
  mkMergeForkFDU mfFDUDM1(.CLK(sys0_clk),
			  .RST_N(rstndb_OUT_RST),
			  .egress_response_put(mfFDUDM1_egress_response_put),
			  .ingress1_put(mfFDUDM1_ingress1_put),
			  .ingress2_put(mfFDUDM1_ingress2_put),
			  .EN_egress_request_get(mfFDUDM1_EN_egress_request_get),
			  .EN_egress_response_put(mfFDUDM1_EN_egress_response_put),
			  .EN_ingress1_put(mfFDUDM1_EN_ingress1_put),
			  .EN_ingress2_put(mfFDUDM1_EN_ingress2_put),
			  .EN_ack_get(mfFDUDM1_EN_ack_get),
			  .egress_request_get(mfFDUDM1_egress_request_get),
			  .RDY_egress_request_get(mfFDUDM1_RDY_egress_request_get),
			  .RDY_egress_response_put(mfFDUDM1_RDY_egress_response_put),
			  .RDY_ingress1_put(mfFDUDM1_RDY_ingress1_put),
			  .RDY_ingress2_put(mfFDUDM1_RDY_ingress2_put),
			  .ack_get(mfFDUDM1_ack_get),
			  .RDY_ack_get(mfFDUDM1_RDY_ack_get));

  // submodule producer1DM1
  mkMLProducer producer1DM1(.length(32'd8),
			    .lMode(2'd0),
			    .minL(32'd0),
			    .maxL(32'd0),
			    .dMode(2'd0),
			    .nukeVal(8'hAA),
			    .CLK(sys0_clk),
			    .RST_N(rstndb_OUT_RST),
			    .EN_mesg_get(producer1DM1_EN_mesg_get),
			    .mesg_get(producer1DM1_mesg_get),
			    .RDY_mesg_get(producer1DM1_RDY_mesg_get));

  // submodule producer2DM1
  mkMLProducer producer2DM1(.length(32'd8),
			    .lMode(2'd0),
			    .minL(32'd0),
			    .maxL(32'd0),
			    .dMode(2'd0),
			    .nukeVal(8'hEE),
			    .CLK(sys0_clk),
			    .RST_N(rstndb_OUT_RST),
			    .EN_mesg_get(producer2DM1_EN_mesg_get),
			    .mesg_get(producer2DM1_mesg_get),
			    .RDY_mesg_get(producer2DM1_RDY_mesg_get));

  // submodule qabs2hbdg
  mkQABS2HBDG qabs2hbdg(.CLK(sys0_clk),
			.RST_N(rstndb_OUT_RST),
			.qIn_put(qabs2hbdg_qIn_put),
			.EN_qIn_put(qabs2hbdg_EN_qIn_put),
			.EN_hOut_get(qabs2hbdg_EN_hOut_get),
			.RDY_qIn_put(qabs2hbdg_RDY_qIn_put),
			.hOut_get(qabs2hbdg_hOut_get),
			.RDY_hOut_get(qabs2hbdg_RDY_hOut_get));

  // submodule receiverDM1
  mkReceiver receiverDM1(.CLK(sys0_clk),
			 .RST_N(rstndb_OUT_RST),
			 .datagram_put(receiverDM1_datagram_put),
			 .EN_datagram_put(receiverDM1_EN_datagram_put),
			 .EN_mesg_get(receiverDM1_EN_mesg_get),
			 .RDY_datagram_put(receiverDM1_RDY_datagram_put),
			 .mesg_get(receiverDM1_mesg_get),
			 .RDY_mesg_get(receiverDM1_RDY_mesg_get));

  // submodule rstndb
  SyncResetA #(.RSTDELAY(32'd15)) rstndb(.CLK(sys0_clk),
					 .IN_RST(sys0_rstn),
					 .OUT_RST(rstndb_OUT_RST));

  // submodule senderDM1
  mkSenderDM1 senderDM1(.CLK(sys0_clk),
			.RST_N(rstndb_OUT_RST),
			.mesg_put(senderDM1_mesg_put),
			.EN_datagram_get(senderDM1_EN_datagram_get),
			.EN_mesg_put(senderDM1_EN_mesg_put),
			.datagram_get(senderDM1_datagram_get),
			.RDY_datagram_get(senderDM1_RDY_datagram_get),
			.RDY_mesg_put(senderDM1_RDY_mesg_put));

  // submodule sys1_clk
  BUFG sys1_clk(.I(sys1_clki_O), .O(sys1_clk_O));

  // submodule sys1_clki
  IBUFDS_GTE2 sys1_clki(.I(CLK_sys1_clkp),
			.IB(CLK_sys1_clkn),
			.CEB(1'd0),
			.O(sys1_clki_O),
			.ODIV2());

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk_O),
					  .IN_RST(rstndb_OUT_RST),
					  .OUT_RST(sys1_rst_OUT_RST));

  // rule RL_countCycles
  assign CAN_FIRE_RL_countCycles = 1'd1 ;
  assign WILL_FIRE_RL_countCycles = 1'd1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     producer1DM1_RDY_mesg_get && senderDM1_RDY_mesg_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     senderDM1_RDY_datagram_get &&
	     forkSndDM1_datagramIngressF_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     fdu1DM1_RDY_datagramSnd_put &&
	     forkSndDM1_datagramEgressF1_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     fdu2DM1_RDY_datagramSnd_put &&
	     forkSndDM1_datagramEgressF2_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // rule RL_mkConnectionGetPut_6
  assign CAN_FIRE_RL_mkConnectionGetPut_6 =
	     fdu1DM1_RDY_datagramRcv_get && mfFDUDM1_RDY_ingress1_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_6 =
	     CAN_FIRE_RL_mkConnectionGetPut_6 ;

  // rule RL_mkConnectionGetPut_7
  assign CAN_FIRE_RL_mkConnectionGetPut_7 =
	     fdu2DM1_RDY_datagramRcv_get && mfFDUDM1_RDY_ingress2_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_7 =
	     CAN_FIRE_RL_mkConnectionGetPut_7 ;

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     fdu1DM1_RDY_frameAck_request_get &&
	     ackTrackerDM1_RDY_frameAck1_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     fdu1DM1_RDY_frameAck_response_put &&
	     ackTrackerDM1_RDY_frameAck1_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     fdu2DM1_RDY_frameAck_request_get &&
	     ackTrackerDM1_RDY_frameAck2_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     fdu2DM1_RDY_frameAck_response_put &&
	     ackTrackerDM1_RDY_frameAck2_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_mkConnectionGetPut_8
  assign CAN_FIRE_RL_mkConnectionGetPut_8 =
	     mfFDUDM1_RDY_ack_get && ackTrackerDM1_RDY_ackIngress_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_8 =
	     CAN_FIRE_RL_mkConnectionGetPut_8 ;

  // rule RL_mkConnectionGetPut_9
  assign CAN_FIRE_RL_mkConnectionGetPut_9 =
	     fau1DM1_RDY_ingress_put && mfFAUDM1_RDY_egress1_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_9 =
	     CAN_FIRE_RL_mkConnectionGetPut_9 ;

  // rule RL_mkConnectionGetPut_10
  assign CAN_FIRE_RL_mkConnectionGetPut_10 =
	     fau1DM1_RDY_free_get && mfFAUDM1_RDY_free1_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_10 =
	     CAN_FIRE_RL_mkConnectionGetPut_10 ;

  // rule RL_mkConnectionGetPut_11
  assign CAN_FIRE_RL_mkConnectionGetPut_11 =
	     fau2DM1_RDY_ingress_put && mfFAUDM1_RDY_egress2_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_11 =
	     CAN_FIRE_RL_mkConnectionGetPut_11 ;

  // rule RL_mkConnectionGetPut_12
  assign CAN_FIRE_RL_mkConnectionGetPut_12 =
	     fau2DM1_RDY_free_get && mfFAUDM1_RDY_free2_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_12 =
	     CAN_FIRE_RL_mkConnectionGetPut_12 ;

  // rule RL_mkConnectionGetPut_13
  assign CAN_FIRE_RL_mkConnectionGetPut_13 =
	     mfFAUDM1_RDY_ack_put && ackAggregatorDM1_RDY_ackEgress_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_13 =
	     CAN_FIRE_RL_mkConnectionGetPut_13 ;

  // rule RL_mkConnectionGetPut_14
  assign CAN_FIRE_RL_mkConnectionGetPut_14 =
	     fau1DM1_RDY_frameAck_get && ackAggregatorDM1_RDY_frameAck1_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_14 =
	     CAN_FIRE_RL_mkConnectionGetPut_14 ;

  // rule RL_mkConnectionGetPut_15
  assign CAN_FIRE_RL_mkConnectionGetPut_15 =
	     fau2DM1_RDY_frameAck_get && ackAggregatorDM1_RDY_frameAck2_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_15 =
	     CAN_FIRE_RL_mkConnectionGetPut_15 ;

  // rule RL_mkConnectionGetPut_18
  assign CAN_FIRE_RL_mkConnectionGetPut_18 =
	     receiverDM1_RDY_datagram_put &&
	     mergeRcvDM1_datagramEgressF_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_18 =
	     CAN_FIRE_RL_mkConnectionGetPut_18 ;

  // rule RL_mkConnectionGetPut_19
  assign CAN_FIRE_RL_mkConnectionGetPut_19 =
	     receiverDM1_RDY_mesg_get && consumerDM1_RDY_mesgReceived_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_19 =
	     CAN_FIRE_RL_mkConnectionGetPut_19 ;

  // rule RL_mkConnectionGetPut_20
  assign CAN_FIRE_RL_mkConnectionGetPut_20 =
	     producer2DM1_RDY_mesg_get && consumerDM1_RDY_mesgExpected_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_20 =
	     CAN_FIRE_RL_mkConnectionGetPut_20 ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     mfFDUDM1_RDY_egress_request_get &&
	     mergeWireDM1_RDY_ingressSnd_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     mfFDUDM1_RDY_egress_response_put &&
	     mergeWireDM1_RDY_ingressSnd_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     mfFAUDM1_RDY_ingress_request_put &&
	     mergeWireDM1_RDY_ingressRcv_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     mfFAUDM1_RDY_ingress_response_get &&
	     mergeWireDM1_RDY_ingressRcv_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_mkConnectionGetPut_21
  assign CAN_FIRE_RL_mkConnectionGetPut_21 =
	     hbdg2qabs_RDY_hIn_put &&
	     mergeWireDM1_RDY_egressWire_request_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_21 =
	     CAN_FIRE_RL_mkConnectionGetPut_21 ;

  // rule RL_mkConnectionGetPut_22
  assign CAN_FIRE_RL_mkConnectionGetPut_22 =
	     qabs2hbdg_RDY_hOut_get &&
	     mergeWireDM1_RDY_egressWire_response_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_22 =
	     CAN_FIRE_RL_mkConnectionGetPut_22 ;

  // rule RL_mkConnectionGetPut_23
  assign CAN_FIRE_RL_mkConnectionGetPut_23 =
	     l2header_RDY_qIn_put && hbdg2qabs_RDY_qOut_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_23 =
	     CAN_FIRE_RL_mkConnectionGetPut_23 ;

  // rule RL_mkConnectionGetPut_24
  assign CAN_FIRE_RL_mkConnectionGetPut_24 =
	     gmac_RDY_tx_put && l2header_RDY_qOut_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_24 =
	     CAN_FIRE_RL_mkConnectionGetPut_24 ;

  // rule RL_mkConnectionGetPut_25
  assign CAN_FIRE_RL_mkConnectionGetPut_25 =
	     qabs2hbdg_RDY_qIn_put && l2remover_RDY_qOut_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_25 =
	     CAN_FIRE_RL_mkConnectionGetPut_25 ;

  // rule RL_mkConnectionGetPut_26
  assign CAN_FIRE_RL_mkConnectionGetPut_26 =
	     gmac_RDY_rx_get && l2remover_RDY_qIn_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_26 =
	     CAN_FIRE_RL_mkConnectionGetPut_26 ;

  // rule RL_gbe_operate
  assign CAN_FIRE_RL_gbe_operate = 1'd1 ;
  assign WILL_FIRE_RL_gbe_operate = 1'd1 ;

  // rule RL_idc_my_reset_condition
  assign CAN_FIRE_RL_idc_my_reset_condition =
	     idc_preResetCount == 4'hF && idc_doResetCount != 4'hF ;
  assign WILL_FIRE_RL_idc_my_reset_condition =
	     CAN_FIRE_RL_idc_my_reset_condition ;

  // rule RL_idc_do_reset
  assign CAN_FIRE_RL_idc_do_reset = idc_preResetCount == 4'hF ;
  assign WILL_FIRE_RL_idc_do_reset = CAN_FIRE_RL_idc_do_reset ;

  // rule RL_idc_pre_reset
  assign CAN_FIRE_RL_idc_pre_reset = 1'd1 ;
  assign WILL_FIRE_RL_idc_pre_reset = 1'd1 ;

  // rule RL_forkSndDM1_muxFrame1
  assign CAN_FIRE_RL_forkSndDM1_muxFrame1 =
	     forkSndDM1_datagramIngressF_i_notEmpty__1_AND__ETC___d22 &&
	     forkSndDM1_control ;
  assign WILL_FIRE_RL_forkSndDM1_muxFrame1 =
	     CAN_FIRE_RL_forkSndDM1_muxFrame1 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     fdu1DM1_RDY_free_get && forkSndDM1_freeF1_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_forkSndDM1_muxFrame2
  assign CAN_FIRE_RL_forkSndDM1_muxFrame2 =
	     forkSndDM1_datagramIngressF_i_notEmpty__1_AND__ETC___d34 &&
	     !forkSndDM1_control ;
  assign WILL_FIRE_RL_forkSndDM1_muxFrame2 =
	     CAN_FIRE_RL_forkSndDM1_muxFrame2 ;

  // rule RL_mkConnectionGetPut_5
  assign CAN_FIRE_RL_mkConnectionGetPut_5 =
	     fdu2DM1_RDY_free_get && forkSndDM1_freeF2_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_5 =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // rule RL_mergeRcvDM1_mergeFrame1
  assign CAN_FIRE_RL_mergeRcvDM1_mergeFrame1 =
	     (mergeRcvDM1_datagramIngressF1_EMPTY_N ?
		mergeRcvDM1_datagramEgressF_FULL_N &&
		mergeRcvDM1_datagramIngressF1_EMPTY_N :
		!mergeRcvDM1_datagramIngressF2_EMPTY_N ||
		mergeRcvDM1_datagramEgressF_FULL_N) &&
	     (mergeRcvDM1_datagramIngressF1_EMPTY_N ||
	      mergeRcvDM1_datagramIngressF2_EMPTY_N) ;
  assign WILL_FIRE_RL_mergeRcvDM1_mergeFrame1 =
	     CAN_FIRE_RL_mergeRcvDM1_mergeFrame1 ;

  // rule RL_mkConnectionGetPut_16
  assign CAN_FIRE_RL_mkConnectionGetPut_16 =
	     fau1DM1_RDY_egress_get && mergeRcvDM1_datagramIngressF1_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_16 =
	     CAN_FIRE_RL_mkConnectionGetPut_16 ;

  // rule RL_mkConnectionGetPut_17
  assign CAN_FIRE_RL_mkConnectionGetPut_17 =
	     fau2DM1_RDY_egress_get && mergeRcvDM1_datagramIngressF2_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_17 =
	     CAN_FIRE_RL_mkConnectionGetPut_17 ;

  // inputs to muxes for submodule ports
  assign MUX_forkSndDM1_control_write_1__VAL_1 =
	     !forkSndDM1_datagramIngressF_D_OUT[0] &&
	     forkSndDM1_freeF1_EMPTY_N ;
  assign MUX_forkSndDM1_control_write_1__VAL_2 =
	     forkSndDM1_datagramIngressF_D_OUT[0] ||
	     !forkSndDM1_freeF2_EMPTY_N ;

  // register cycleCount
  assign cycleCount_D_IN = cycleCount + 32'd1 ;
  assign cycleCount_EN = 1'd1 ;

  // register forkSndDM1_control
  assign forkSndDM1_control_D_IN =
	     WILL_FIRE_RL_forkSndDM1_muxFrame1 ?
	       MUX_forkSndDM1_control_write_1__VAL_1 :
	       MUX_forkSndDM1_control_write_1__VAL_2 ;
  assign forkSndDM1_control_EN =
	     WILL_FIRE_RL_forkSndDM1_muxFrame1 ||
	     WILL_FIRE_RL_forkSndDM1_muxFrame2 ;

  // register idc_doResetCount
  assign idc_doResetCount_D_IN =
	     (idc_doResetCount == 4'hF) ?
	       idc_doResetCount :
	       idc_doResetCount + 4'd1 ;
  assign idc_doResetCount_EN = CAN_FIRE_RL_idc_do_reset ;

  // register idc_preResetCount
  assign idc_preResetCount_D_IN =
	     (idc_preResetCount == 4'hF) ?
	       idc_preResetCount :
	       idc_preResetCount + 4'd1 ;
  assign idc_preResetCount_EN = 1'd1 ;

  // submodule ackAggregatorDM1
  assign ackAggregatorDM1_frameAck1_put = fau1DM1_frameAck_get ;
  assign ackAggregatorDM1_frameAck2_put = fau2DM1_frameAck_get ;
  assign ackAggregatorDM1_EN_frameAck1_put =
	     CAN_FIRE_RL_mkConnectionGetPut_14 ;
  assign ackAggregatorDM1_EN_frameAck2_put =
	     CAN_FIRE_RL_mkConnectionGetPut_15 ;
  assign ackAggregatorDM1_EN_ackEgress_get =
	     CAN_FIRE_RL_mkConnectionGetPut_13 ;

  // submodule ackTrackerDM1
  assign ackTrackerDM1_ackIngress_put = mfFDUDM1_ack_get ;
  assign ackTrackerDM1_frameAck1_request_put = fdu1DM1_frameAck_request_get ;
  assign ackTrackerDM1_frameAck2_request_put = fdu2DM1_frameAck_request_get ;
  assign ackTrackerDM1_EN_frameAck1_request_put =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign ackTrackerDM1_EN_frameAck1_response_get =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign ackTrackerDM1_EN_frameAck2_request_put =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign ackTrackerDM1_EN_frameAck2_response_get =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign ackTrackerDM1_EN_ackIngress_put = CAN_FIRE_RL_mkConnectionGetPut_8 ;

  // submodule consumerDM1
  assign consumerDM1_mesgExpected_put = producer2DM1_mesg_get ;
  assign consumerDM1_mesgReceived_put = receiverDM1_mesg_get ;
  assign consumerDM1_EN_mesgExpected_put = CAN_FIRE_RL_mkConnectionGetPut_20 ;
  assign consumerDM1_EN_mesgReceived_put = CAN_FIRE_RL_mkConnectionGetPut_19 ;

  // submodule fau1DM1
  assign fau1DM1_ingress_put = mfFAUDM1_egress1_get ;
  assign fau1DM1_EN_free_get = CAN_FIRE_RL_mkConnectionGetPut_10 ;
  assign fau1DM1_EN_ingress_put = CAN_FIRE_RL_mkConnectionGetPut_9 ;
  assign fau1DM1_EN_egress_get = CAN_FIRE_RL_mkConnectionGetPut_16 ;
  assign fau1DM1_EN_frameAck_get = CAN_FIRE_RL_mkConnectionGetPut_14 ;

  // submodule fau2DM1
  assign fau2DM1_ingress_put = mfFAUDM1_egress2_get ;
  assign fau2DM1_EN_free_get = CAN_FIRE_RL_mkConnectionGetPut_12 ;
  assign fau2DM1_EN_ingress_put = CAN_FIRE_RL_mkConnectionGetPut_11 ;
  assign fau2DM1_EN_egress_get = CAN_FIRE_RL_mkConnectionGetPut_17 ;
  assign fau2DM1_EN_frameAck_get = CAN_FIRE_RL_mkConnectionGetPut_15 ;

  // submodule fdu1DM1
  assign fdu1DM1_datagramSnd_put = forkSndDM1_datagramEgressF1_D_OUT ;
  assign fdu1DM1_frameAck_response_put =
	     ackTrackerDM1_frameAck1_response_get ;
  assign fdu1DM1_EN_free_get = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign fdu1DM1_EN_datagramSnd_put = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign fdu1DM1_EN_datagramRcv_get = CAN_FIRE_RL_mkConnectionGetPut_6 ;
  assign fdu1DM1_EN_frameAck_request_get = CAN_FIRE_RL_ClientServerRequest ;
  assign fdu1DM1_EN_frameAck_response_put = CAN_FIRE_RL_ClientServerResponse ;

  // submodule fdu2DM1
  assign fdu2DM1_datagramSnd_put = forkSndDM1_datagramEgressF2_D_OUT ;
  assign fdu2DM1_frameAck_response_put =
	     ackTrackerDM1_frameAck2_response_get ;
  assign fdu2DM1_EN_free_get = CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign fdu2DM1_EN_datagramSnd_put = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign fdu2DM1_EN_datagramRcv_get = CAN_FIRE_RL_mkConnectionGetPut_7 ;
  assign fdu2DM1_EN_frameAck_request_get = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign fdu2DM1_EN_frameAck_response_put =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // submodule forkSndDM1_datagramEgressF1
  assign forkSndDM1_datagramEgressF1_D_IN =
	     forkSndDM1_datagramIngressF_D_OUT ;
  assign forkSndDM1_datagramEgressF1_ENQ =
	     WILL_FIRE_RL_forkSndDM1_muxFrame1 && forkSndDM1_freeF1_EMPTY_N ;
  assign forkSndDM1_datagramEgressF1_DEQ = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign forkSndDM1_datagramEgressF1_CLR = 1'b0 ;

  // submodule forkSndDM1_datagramEgressF2
  assign forkSndDM1_datagramEgressF2_D_IN =
	     forkSndDM1_datagramIngressF_D_OUT ;
  assign forkSndDM1_datagramEgressF2_ENQ =
	     WILL_FIRE_RL_forkSndDM1_muxFrame2 && forkSndDM1_freeF2_EMPTY_N ;
  assign forkSndDM1_datagramEgressF2_DEQ = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign forkSndDM1_datagramEgressF2_CLR = 1'b0 ;

  // submodule forkSndDM1_datagramIngressF
  assign forkSndDM1_datagramIngressF_D_IN = senderDM1_datagram_get ;
  assign forkSndDM1_datagramIngressF_ENQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign forkSndDM1_datagramIngressF_DEQ =
	     WILL_FIRE_RL_forkSndDM1_muxFrame1 && forkSndDM1_freeF1_EMPTY_N ||
	     WILL_FIRE_RL_forkSndDM1_muxFrame2 && forkSndDM1_freeF2_EMPTY_N ;
  assign forkSndDM1_datagramIngressF_CLR = 1'b0 ;

  // submodule forkSndDM1_freeF1
  assign forkSndDM1_freeF1_ENQ = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign forkSndDM1_freeF1_DEQ =
	     WILL_FIRE_RL_forkSndDM1_muxFrame1 && forkSndDM1_freeF1_EMPTY_N &&
	     forkSndDM1_datagramIngressF_D_OUT[0] ;
  assign forkSndDM1_freeF1_CLR = 1'b0 ;

  // submodule forkSndDM1_freeF2
  assign forkSndDM1_freeF2_ENQ = CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign forkSndDM1_freeF2_DEQ =
	     WILL_FIRE_RL_forkSndDM1_muxFrame2 && forkSndDM1_freeF2_EMPTY_N &&
	     forkSndDM1_datagramIngressF_D_OUT[0] ;
  assign forkSndDM1_freeF2_CLR = 1'b0 ;

  // submodule gmac
  assign gmac_gmii_col_i = gmii_col_i ;
  assign gmac_gmii_crs_i = gmii_crs_i ;
  assign gmac_gmii_intr_i = gmii_intr_i ;
  assign gmac_gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gmac_gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gmac_gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gmac_tx_put =
	     { CASE_l2headerqOut_get_BITS_39_TO_38_0_l2heade_ETC__q1,
	       l2header_qOut_get[37:30],
	       CASE_l2headerqOut_get_BITS_29_TO_28_0_l2heade_ETC__q2,
	       l2header_qOut_get[27:20],
	       CASE_l2headerqOut_get_BITS_19_TO_18_0_l2heade_ETC__q3,
	       l2header_qOut_get[17:10],
	       CASE_l2headerqOut_get_BITS_9_TO_8_0_l2header_ETC__q4,
	       l2header_qOut_get[7:0] } ;
  assign gmac_EN_rx_get = gmac_RDY_rx_get && l2remover_RDY_qIn_put ;
  assign gmac_EN_tx_put = gmac_RDY_tx_put && l2header_RDY_qOut_get ;
  assign gmac_EN_rxOperate = 1'd1 ;
  assign gmac_EN_txOperate = 1'd1 ;

  // submodule hbdg2qabs
  assign hbdg2qabs_hIn_put = mergeWireDM1_egressWire_request_get ;
  assign hbdg2qabs_EN_hIn_put = CAN_FIRE_RL_mkConnectionGetPut_21 ;
  assign hbdg2qabs_EN_qOut_get = CAN_FIRE_RL_mkConnectionGetPut_23 ;

  // submodule idc_idcRst
  assign idc_idcRst_ASSERT_IN = CAN_FIRE_RL_idc_my_reset_condition ;

  // submodule l2header
  assign l2header_qIn_put =
	     { CASE_hbdg2qabsqOut_get_BITS_39_TO_38_0_hbdg2q_ETC__q5,
	       hbdg2qabs_qOut_get[37:30],
	       CASE_hbdg2qabsqOut_get_BITS_29_TO_28_0_hbdg2q_ETC__q6,
	       hbdg2qabs_qOut_get[27:20],
	       CASE_hbdg2qabsqOut_get_BITS_19_TO_18_0_hbdg2q_ETC__q7,
	       hbdg2qabs_qOut_get[17:10],
	       CASE_hbdg2qabsqOut_get_BITS_9_TO_8_0_hbdg2qab_ETC__q8,
	       hbdg2qabs_qOut_get[7:0] } ;
  assign l2header_EN_qIn_put = CAN_FIRE_RL_mkConnectionGetPut_23 ;
  assign l2header_EN_qOut_get = CAN_FIRE_RL_mkConnectionGetPut_24 ;

  // submodule l2remover
  assign l2remover_qIn_put =
	     { CASE_gmacrx_get_BITS_39_TO_38_0_gmacrx_get_B_ETC__q9,
	       gmac_rx_get[37:30],
	       CASE_gmacrx_get_BITS_29_TO_28_0_gmacrx_get_B_ETC__q10,
	       gmac_rx_get[27:20],
	       CASE_gmacrx_get_BITS_19_TO_18_0_gmacrx_get_B_ETC__q11,
	       gmac_rx_get[17:10],
	       CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q12,
	       gmac_rx_get[7:0] } ;
  assign l2remover_EN_qIn_put = CAN_FIRE_RL_mkConnectionGetPut_26 ;
  assign l2remover_EN_qOut_get = CAN_FIRE_RL_mkConnectionGetPut_25 ;

  // submodule mergeRcvDM1_datagramEgressF
  assign mergeRcvDM1_datagramEgressF_D_IN =
	     mergeRcvDM1_datagramIngressF1_EMPTY_N ?
	       mergeRcvDM1_datagramIngressF1_D_OUT :
	       mergeRcvDM1_datagramIngressF2_D_OUT ;
  assign mergeRcvDM1_datagramEgressF_ENQ =
	     CAN_FIRE_RL_mergeRcvDM1_mergeFrame1 ;
  assign mergeRcvDM1_datagramEgressF_DEQ = CAN_FIRE_RL_mkConnectionGetPut_18 ;
  assign mergeRcvDM1_datagramEgressF_CLR = 1'b0 ;

  // submodule mergeRcvDM1_datagramIngressF1
  assign mergeRcvDM1_datagramIngressF1_D_IN = fau1DM1_egress_get ;
  assign mergeRcvDM1_datagramIngressF1_ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_16 ;
  assign mergeRcvDM1_datagramIngressF1_DEQ =
	     WILL_FIRE_RL_mergeRcvDM1_mergeFrame1 &&
	     mergeRcvDM1_datagramIngressF1_EMPTY_N ;
  assign mergeRcvDM1_datagramIngressF1_CLR = 1'b0 ;

  // submodule mergeRcvDM1_datagramIngressF2
  assign mergeRcvDM1_datagramIngressF2_D_IN = fau2DM1_egress_get ;
  assign mergeRcvDM1_datagramIngressF2_ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_17 ;
  assign mergeRcvDM1_datagramIngressF2_DEQ =
	     WILL_FIRE_RL_mergeRcvDM1_mergeFrame1 &&
	     !mergeRcvDM1_datagramIngressF1_EMPTY_N &&
	     mergeRcvDM1_datagramIngressF2_EMPTY_N ;
  assign mergeRcvDM1_datagramIngressF2_CLR = 1'b0 ;

  // submodule mergeWireDM1
  assign mergeWireDM1_egressWire_response_put = qabs2hbdg_hOut_get ;
  assign mergeWireDM1_ingressRcv_response_put =
	     mfFAUDM1_ingress_response_get ;
  assign mergeWireDM1_ingressSnd_request_put = mfFDUDM1_egress_request_get ;
  assign mergeWireDM1_EN_ingressSnd_request_put =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign mergeWireDM1_EN_ingressSnd_response_get =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign mergeWireDM1_EN_ingressRcv_request_get =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign mergeWireDM1_EN_ingressRcv_response_put =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign mergeWireDM1_EN_egressWire_request_get =
	     CAN_FIRE_RL_mkConnectionGetPut_21 ;
  assign mergeWireDM1_EN_egressWire_response_put =
	     CAN_FIRE_RL_mkConnectionGetPut_22 ;

  // submodule mfFAUDM1
  assign mfFAUDM1_ack_put = ackAggregatorDM1_ackEgress_get ;
  assign mfFAUDM1_ingress_request_put = mergeWireDM1_ingressRcv_request_get ;
  assign mfFAUDM1_EN_ingress_request_put = CAN_FIRE_RL_ClientServerRequest_3 ;
  assign mfFAUDM1_EN_ingress_response_get =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign mfFAUDM1_EN_egress1_get = CAN_FIRE_RL_mkConnectionGetPut_9 ;
  assign mfFAUDM1_EN_egress2_get = CAN_FIRE_RL_mkConnectionGetPut_11 ;
  assign mfFAUDM1_EN_ack_put = CAN_FIRE_RL_mkConnectionGetPut_13 ;
  assign mfFAUDM1_EN_free1_put = CAN_FIRE_RL_mkConnectionGetPut_10 ;
  assign mfFAUDM1_EN_free2_put = CAN_FIRE_RL_mkConnectionGetPut_12 ;

  // submodule mfFDUDM1
  assign mfFDUDM1_egress_response_put = mergeWireDM1_ingressSnd_response_get ;
  assign mfFDUDM1_ingress1_put = fdu1DM1_datagramRcv_get ;
  assign mfFDUDM1_ingress2_put = fdu2DM1_datagramRcv_get ;
  assign mfFDUDM1_EN_egress_request_get = CAN_FIRE_RL_ClientServerRequest_2 ;
  assign mfFDUDM1_EN_egress_response_put =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign mfFDUDM1_EN_ingress1_put = CAN_FIRE_RL_mkConnectionGetPut_6 ;
  assign mfFDUDM1_EN_ingress2_put = CAN_FIRE_RL_mkConnectionGetPut_7 ;
  assign mfFDUDM1_EN_ack_get = CAN_FIRE_RL_mkConnectionGetPut_8 ;

  // submodule producer1DM1
  assign producer1DM1_EN_mesg_get = CAN_FIRE_RL_mkConnectionGetPut ;

  // submodule producer2DM1
  assign producer2DM1_EN_mesg_get = CAN_FIRE_RL_mkConnectionGetPut_20 ;

  // submodule qabs2hbdg
  assign qabs2hbdg_qIn_put =
	     { CASE_l2removerqOut_get_BITS_39_TO_38_0_l2remo_ETC__q13,
	       l2remover_qOut_get[37:30],
	       CASE_l2removerqOut_get_BITS_29_TO_28_0_l2remo_ETC__q14,
	       l2remover_qOut_get[27:20],
	       CASE_l2removerqOut_get_BITS_19_TO_18_0_l2remo_ETC__q15,
	       l2remover_qOut_get[17:10],
	       CASE_l2removerqOut_get_BITS_9_TO_8_0_l2remove_ETC__q16,
	       l2remover_qOut_get[7:0] } ;
  assign qabs2hbdg_EN_qIn_put = CAN_FIRE_RL_mkConnectionGetPut_25 ;
  assign qabs2hbdg_EN_hOut_get = CAN_FIRE_RL_mkConnectionGetPut_22 ;

  // submodule receiverDM1
  assign receiverDM1_datagram_put = mergeRcvDM1_datagramEgressF_D_OUT ;
  assign receiverDM1_EN_datagram_put = CAN_FIRE_RL_mkConnectionGetPut_18 ;
  assign receiverDM1_EN_mesg_get = CAN_FIRE_RL_mkConnectionGetPut_19 ;

  // submodule senderDM1
  assign senderDM1_mesg_put = producer1DM1_mesg_get ;
  assign senderDM1_EN_datagram_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign senderDM1_EN_mesg_put = CAN_FIRE_RL_mkConnectionGetPut ;

  // remaining internal signals
  assign forkSndDM1_datagramIngressF_i_notEmpty__1_AND__ETC___d22 =
	     forkSndDM1_datagramIngressF_EMPTY_N &&
	     (!forkSndDM1_freeF1_EMPTY_N ||
	      forkSndDM1_datagramEgressF1_FULL_N &&
	      (!forkSndDM1_datagramIngressF_D_OUT[0] ||
	       forkSndDM1_freeF1_EMPTY_N)) ;
  assign forkSndDM1_datagramIngressF_i_notEmpty__1_AND__ETC___d34 =
	     forkSndDM1_datagramIngressF_EMPTY_N &&
	     (!forkSndDM1_freeF2_EMPTY_N ||
	      forkSndDM1_datagramEgressF2_FULL_N &&
	      (!forkSndDM1_datagramIngressF_D_OUT[0] ||
	       forkSndDM1_freeF2_EMPTY_N)) ;
  always@(l2header_qOut_get)
  begin
    case (l2header_qOut_get[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_l2headerqOut_get_BITS_39_TO_38_0_l2heade_ETC__q1 =
	      l2header_qOut_get[39:38];
      2'd3: CASE_l2headerqOut_get_BITS_39_TO_38_0_l2heade_ETC__q1 = 2'd3;
    endcase
  end
  always@(l2header_qOut_get)
  begin
    case (l2header_qOut_get[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_l2headerqOut_get_BITS_29_TO_28_0_l2heade_ETC__q2 =
	      l2header_qOut_get[29:28];
      2'd3: CASE_l2headerqOut_get_BITS_29_TO_28_0_l2heade_ETC__q2 = 2'd3;
    endcase
  end
  always@(l2header_qOut_get)
  begin
    case (l2header_qOut_get[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_l2headerqOut_get_BITS_19_TO_18_0_l2heade_ETC__q3 =
	      l2header_qOut_get[19:18];
      2'd3: CASE_l2headerqOut_get_BITS_19_TO_18_0_l2heade_ETC__q3 = 2'd3;
    endcase
  end
  always@(l2header_qOut_get)
  begin
    case (l2header_qOut_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2headerqOut_get_BITS_9_TO_8_0_l2header_ETC__q4 =
	      l2header_qOut_get[9:8];
      2'd3: CASE_l2headerqOut_get_BITS_9_TO_8_0_l2header_ETC__q4 = 2'd3;
    endcase
  end
  always@(hbdg2qabs_qOut_get)
  begin
    case (hbdg2qabs_qOut_get[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_hbdg2qabsqOut_get_BITS_39_TO_38_0_hbdg2q_ETC__q5 =
	      hbdg2qabs_qOut_get[39:38];
      2'd3: CASE_hbdg2qabsqOut_get_BITS_39_TO_38_0_hbdg2q_ETC__q5 = 2'd3;
    endcase
  end
  always@(hbdg2qabs_qOut_get)
  begin
    case (hbdg2qabs_qOut_get[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_hbdg2qabsqOut_get_BITS_29_TO_28_0_hbdg2q_ETC__q6 =
	      hbdg2qabs_qOut_get[29:28];
      2'd3: CASE_hbdg2qabsqOut_get_BITS_29_TO_28_0_hbdg2q_ETC__q6 = 2'd3;
    endcase
  end
  always@(hbdg2qabs_qOut_get)
  begin
    case (hbdg2qabs_qOut_get[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_hbdg2qabsqOut_get_BITS_19_TO_18_0_hbdg2q_ETC__q7 =
	      hbdg2qabs_qOut_get[19:18];
      2'd3: CASE_hbdg2qabsqOut_get_BITS_19_TO_18_0_hbdg2q_ETC__q7 = 2'd3;
    endcase
  end
  always@(hbdg2qabs_qOut_get)
  begin
    case (hbdg2qabs_qOut_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_hbdg2qabsqOut_get_BITS_9_TO_8_0_hbdg2qab_ETC__q8 =
	      hbdg2qabs_qOut_get[9:8];
      2'd3: CASE_hbdg2qabsqOut_get_BITS_9_TO_8_0_hbdg2qab_ETC__q8 = 2'd3;
    endcase
  end
  always@(gmac_rx_get)
  begin
    case (gmac_rx_get[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_gmacrx_get_BITS_39_TO_38_0_gmacrx_get_B_ETC__q9 =
	      gmac_rx_get[39:38];
      2'd3: CASE_gmacrx_get_BITS_39_TO_38_0_gmacrx_get_B_ETC__q9 = 2'd3;
    endcase
  end
  always@(gmac_rx_get)
  begin
    case (gmac_rx_get[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_gmacrx_get_BITS_29_TO_28_0_gmacrx_get_B_ETC__q10 =
	      gmac_rx_get[29:28];
      2'd3: CASE_gmacrx_get_BITS_29_TO_28_0_gmacrx_get_B_ETC__q10 = 2'd3;
    endcase
  end
  always@(gmac_rx_get)
  begin
    case (gmac_rx_get[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_gmacrx_get_BITS_19_TO_18_0_gmacrx_get_B_ETC__q11 =
	      gmac_rx_get[19:18];
      2'd3: CASE_gmacrx_get_BITS_19_TO_18_0_gmacrx_get_B_ETC__q11 = 2'd3;
    endcase
  end
  always@(gmac_rx_get)
  begin
    case (gmac_rx_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q12 =
	      gmac_rx_get[9:8];
      2'd3: CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q12 = 2'd3;
    endcase
  end
  always@(l2remover_qOut_get)
  begin
    case (l2remover_qOut_get[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_l2removerqOut_get_BITS_39_TO_38_0_l2remo_ETC__q13 =
	      l2remover_qOut_get[39:38];
      2'd3: CASE_l2removerqOut_get_BITS_39_TO_38_0_l2remo_ETC__q13 = 2'd3;
    endcase
  end
  always@(l2remover_qOut_get)
  begin
    case (l2remover_qOut_get[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_l2removerqOut_get_BITS_29_TO_28_0_l2remo_ETC__q14 =
	      l2remover_qOut_get[29:28];
      2'd3: CASE_l2removerqOut_get_BITS_29_TO_28_0_l2remo_ETC__q14 = 2'd3;
    endcase
  end
  always@(l2remover_qOut_get)
  begin
    case (l2remover_qOut_get[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_l2removerqOut_get_BITS_19_TO_18_0_l2remo_ETC__q15 =
	      l2remover_qOut_get[19:18];
      2'd3: CASE_l2removerqOut_get_BITS_19_TO_18_0_l2remo_ETC__q15 = 2'd3;
    endcase
  end
  always@(l2remover_qOut_get)
  begin
    case (l2remover_qOut_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_l2removerqOut_get_BITS_9_TO_8_0_l2remove_ETC__q16 =
	      l2remover_qOut_get[9:8];
      2'd3: CASE_l2removerqOut_get_BITS_9_TO_8_0_l2remove_ETC__q16 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge sys0_clk)
  begin
    if (sys0_rstn == `BSV_RESET_VALUE)
      begin
        idc_doResetCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	idc_preResetCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (idc_doResetCount_EN)
	  idc_doResetCount <= `BSV_ASSIGNMENT_DELAY idc_doResetCount_D_IN;
	if (idc_preResetCount_EN)
	  idc_preResetCount <= `BSV_ASSIGNMENT_DELAY idc_preResetCount_D_IN;
      end
    if (rstndb_OUT_RST == `BSV_RESET_VALUE)
      begin
        cycleCount <= `BSV_ASSIGNMENT_DELAY 32'd0;
	forkSndDM1_control <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (cycleCount_EN)
	  cycleCount <= `BSV_ASSIGNMENT_DELAY cycleCount_D_IN;
	if (forkSndDM1_control_EN)
	  forkSndDM1_control <= `BSV_ASSIGNMENT_DELAY forkSndDM1_control_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycleCount = 32'hAAAAAAAA;
    forkSndDM1_control = 1'h0;
    idc_doResetCount = 4'hA;
    idc_preResetCount = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFTop_mm705

