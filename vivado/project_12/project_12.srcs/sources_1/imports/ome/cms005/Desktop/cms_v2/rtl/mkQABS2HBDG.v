//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Wed Jun 26 17:46:18 CDT 2013
//
// Method conflict info:
// Method: qIn_put
// Conflict-free: hOut_get
// Conflicts: qIn_put
//
// Method: hOut_get
// Conflict-free: qIn_put
// Conflicts: hOut_get
//
//
// Ports:
// Name                         I/O  size props
// RDY_qIn_put                    O     1 reg
// hOut_get                       O   134 reg
// RDY_hOut_get                   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// qIn_put                        I    40
// EN_qIn_put                     I     1
// EN_hOut_get                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkQABS2HBDG(CLK,
		   RST_N,

		   qIn_put,
		   EN_qIn_put,
		   RDY_qIn_put,

		   EN_hOut_get,
		   hOut_get,
		   RDY_hOut_get);
  input  CLK;
  input  RST_N;

  // action method qIn_put
  input  [39 : 0] qIn_put;
  input  EN_qIn_put;
  output RDY_qIn_put;

  // actionvalue method hOut_get
  input  EN_hOut_get;
  output [133 : 0] hOut_get;
  output RDY_hOut_get;

  // signals for module outputs
  wire [133 : 0] hOut_get;
  wire RDY_hOut_get, RDY_qIn_put;

  // register eop
  reg eop;
  wire eop_D_IN, eop_EN;

  // register nbVal
  reg [4 : 0] nbVal;
  wire [4 : 0] nbVal_D_IN;
  wire nbVal_EN;

  // register nbValLastR
  reg [4 : 0] nbValLastR;
  wire [4 : 0] nbValLastR_D_IN;
  wire nbValLastR_EN;

  // register ptr
  reg [1 : 0] ptr;
  wire [1 : 0] ptr_D_IN;
  wire ptr_EN;

  // register sr
  reg [119 : 0] sr;
  wire [119 : 0] sr_D_IN;
  wire sr_EN;

  // ports of submodule hexbdgEgressF
  wire [133 : 0] hexbdgEgressF_D_IN, hexbdgEgressF_D_OUT;
  wire hexbdgEgressF_CLR,
       hexbdgEgressF_DEQ,
       hexbdgEgressF_EMPTY_N,
       hexbdgEgressF_ENQ,
       hexbdgEgressF_FULL_N;

  // ports of submodule qabsIngressF
  wire [39 : 0] qabsIngressF_D_IN, qabsIngressF_D_OUT;
  wire qabsIngressF_CLR,
       qabsIngressF_DEQ,
       qabsIngressF_EMPTY_N,
       qabsIngressF_ENQ,
       qabsIngressF_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_unfunnel,
       CAN_FIRE_hOut_get,
       CAN_FIRE_qIn_put,
       WILL_FIRE_RL_unfunnel,
       WILL_FIRE_hOut_get,
       WILL_FIRE_qIn_put;

  // remaining internal signals
  reg [4 : 0] CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_1_1_1_0__q2,
	      CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_1_1_1_0__q3,
	      CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_1_1_1_0__q4,
	      CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_1_1_1_0__q1;
  reg [1 : 0] CASE_qIn_put_BITS_19_TO_18_0_qIn_put_BITS_19_T_ETC__q7,
	      CASE_qIn_put_BITS_29_TO_28_0_qIn_put_BITS_29_T_ETC__q6,
	      CASE_qIn_put_BITS_39_TO_38_0_qIn_put_BITS_39_T_ETC__q5,
	      CASE_qIn_put_BITS_9_TO_8_0_qIn_put_BITS_9_TO_8_ETC__q8,
	      CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_qabsIn_ETC__q19,
	      CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_qabsIn_ETC__q18,
	      CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_qabsIn_ETC__q17,
	      CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_qabsIngr_ETC__q20,
	      CASE_sr_BITS_19_TO_18_0_sr_BITS_19_TO_18_1_sr__ETC__q15,
	      CASE_sr_BITS_29_TO_28_0_sr_BITS_29_TO_28_1_sr__ETC__q14,
	      CASE_sr_BITS_39_TO_38_0_sr_BITS_39_TO_38_1_sr__ETC__q13,
	      CASE_sr_BITS_49_TO_48_0_sr_BITS_49_TO_48_1_sr__ETC__q12,
	      CASE_sr_BITS_59_TO_58_0_sr_BITS_59_TO_58_1_sr__ETC__q11,
	      CASE_sr_BITS_69_TO_68_0_sr_BITS_69_TO_68_1_sr__ETC__q10,
	      CASE_sr_BITS_79_TO_78_0_sr_BITS_79_TO_78_1_sr__ETC__q9,
	      CASE_sr_BITS_9_TO_8_0_sr_BITS_9_TO_8_1_sr_BITS_ETC__q16;
  wire [119 : 0] IF_NOT_ptr_EQ_2_67_68_OR_qabsIngressF_first_BI_ETC___d354;
  wire [87 : 0] IF_NOT_ptr_EQ_2_67_68_OR_qabsIngressF_first_BI_ETC___d296;
  wire [55 : 0] IF_NOT_ptr_EQ_2_67_68_OR_qabsIngressF_first_BI_ETC___d254;
  wire [7 : 0] IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d319,
	       IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d335,
	       IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d350,
	       IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d366,
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d272,
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d283,
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d293,
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d304,
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d320,
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d336,
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d351,
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d367,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d233,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d243,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d252,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d262,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d273,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d284,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d294,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d305,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d321,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d337,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d352,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d368;
  wire [4 : 0] nbVal_55_PLUS_IF_qabsIngressF_first_BITS_9_TO__ETC___d163;

  // action method qIn_put
  assign RDY_qIn_put = qabsIngressF_FULL_N ;
  assign CAN_FIRE_qIn_put = qabsIngressF_FULL_N ;
  assign WILL_FIRE_qIn_put = EN_qIn_put ;

  // actionvalue method hOut_get
  assign hOut_get = hexbdgEgressF_D_OUT ;
  assign RDY_hOut_get = hexbdgEgressF_EMPTY_N ;
  assign CAN_FIRE_hOut_get = hexbdgEgressF_EMPTY_N ;
  assign WILL_FIRE_hOut_get = EN_hOut_get ;

  // submodule hexbdgEgressF
  FIFO2 #(.width(32'd134), .guarded(32'd1)) hexbdgEgressF(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(hexbdgEgressF_D_IN),
							  .ENQ(hexbdgEgressF_ENQ),
							  .DEQ(hexbdgEgressF_DEQ),
							  .CLR(hexbdgEgressF_CLR),
							  .D_OUT(hexbdgEgressF_D_OUT),
							  .FULL_N(hexbdgEgressF_FULL_N),
							  .EMPTY_N(hexbdgEgressF_EMPTY_N));

  // submodule qabsIngressF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) qabsIngressF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(qabsIngressF_D_IN),
							.ENQ(qabsIngressF_ENQ),
							.DEQ(qabsIngressF_DEQ),
							.CLR(qabsIngressF_CLR),
							.D_OUT(qabsIngressF_D_OUT),
							.FULL_N(qabsIngressF_FULL_N),
							.EMPTY_N(qabsIngressF_EMPTY_N));

  // rule RL_unfunnel
  assign CAN_FIRE_RL_unfunnel =
	     qabsIngressF_EMPTY_N &&
	     (ptr != 2'd3 && qabsIngressF_D_OUT[9:8] == 2'd0 &&
	      qabsIngressF_D_OUT[19:18] == 2'd0 &&
	      qabsIngressF_D_OUT[29:28] == 2'd0 &&
	      qabsIngressF_D_OUT[39:38] == 2'd0 ||
	      hexbdgEgressF_FULL_N) ;
  assign WILL_FIRE_RL_unfunnel = CAN_FIRE_RL_unfunnel ;

  // register eop
  assign eop_D_IN =
	     qabsIngressF_D_OUT[9:8] != 2'd0 ||
	     qabsIngressF_D_OUT[19:18] != 2'd0 ||
	     qabsIngressF_D_OUT[29:28] != 2'd0 ||
	     qabsIngressF_D_OUT[39:38] != 2'd0 ;
  assign eop_EN = CAN_FIRE_RL_unfunnel ;

  // register nbVal
  assign nbVal_D_IN =
	     (ptr == 2'd3 || qabsIngressF_D_OUT[9:8] != 2'd0 ||
	      qabsIngressF_D_OUT[19:18] != 2'd0 ||
	      qabsIngressF_D_OUT[29:28] != 2'd0 ||
	      qabsIngressF_D_OUT[39:38] != 2'd0) ?
	       5'd0 :
	       nbVal_55_PLUS_IF_qabsIngressF_first_BITS_9_TO__ETC___d163 ;
  assign nbVal_EN = CAN_FIRE_RL_unfunnel ;

  // register nbValLastR
  assign nbValLastR_D_IN =
	     (nbVal_55_PLUS_IF_qabsIngressF_first_BITS_9_TO__ETC___d163 ==
	      5'd16) ?
	       5'd0 :
	       nbVal_55_PLUS_IF_qabsIngressF_first_BITS_9_TO__ETC___d163 ;
  assign nbValLastR_EN = CAN_FIRE_RL_unfunnel ;

  // register ptr
  assign ptr_D_IN =
	     (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	      qabsIngressF_D_OUT[19:18] != 2'd0 ||
	      qabsIngressF_D_OUT[29:28] != 2'd0 ||
	      qabsIngressF_D_OUT[39:38] != 2'd0) ?
	       2'd0 :
	       ptr + 2'd1 ;
  assign ptr_EN = CAN_FIRE_RL_unfunnel ;

  // register sr
  assign sr_D_IN =
	     { CASE_sr_BITS_79_TO_78_0_sr_BITS_79_TO_78_1_sr__ETC__q9,
	       sr[77:70],
	       CASE_sr_BITS_69_TO_68_0_sr_BITS_69_TO_68_1_sr__ETC__q10,
	       sr[67:60],
	       CASE_sr_BITS_59_TO_58_0_sr_BITS_59_TO_58_1_sr__ETC__q11,
	       sr[57:50],
	       CASE_sr_BITS_49_TO_48_0_sr_BITS_49_TO_48_1_sr__ETC__q12,
	       sr[47:40],
	       CASE_sr_BITS_39_TO_38_0_sr_BITS_39_TO_38_1_sr__ETC__q13,
	       sr[37:30],
	       CASE_sr_BITS_29_TO_28_0_sr_BITS_29_TO_28_1_sr__ETC__q14,
	       sr[27:20],
	       CASE_sr_BITS_19_TO_18_0_sr_BITS_19_TO_18_1_sr__ETC__q15,
	       sr[17:10],
	       CASE_sr_BITS_9_TO_8_0_sr_BITS_9_TO_8_1_sr_BITS_ETC__q16,
	       sr[7:0],
	       CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_qabsIn_ETC__q17,
	       qabsIngressF_D_OUT[37:30],
	       CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_qabsIn_ETC__q18,
	       qabsIngressF_D_OUT[27:20],
	       CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_qabsIn_ETC__q19,
	       qabsIngressF_D_OUT[17:10],
	       CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_qabsIngr_ETC__q20,
	       qabsIngressF_D_OUT[7:0] } ;
  assign sr_EN = CAN_FIRE_RL_unfunnel ;

  // submodule hexbdgEgressF
  assign hexbdgEgressF_D_IN =
	     { IF_NOT_ptr_EQ_2_67_68_OR_qabsIngressF_first_BI_ETC___d354,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d368,
	       eop ?
		 nbValLastR :
		 nbVal_55_PLUS_IF_qabsIngressF_first_BITS_9_TO__ETC___d163,
	       qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0 } ;
  assign hexbdgEgressF_ENQ =
	     WILL_FIRE_RL_unfunnel &&
	     (ptr == 2'd3 || qabsIngressF_D_OUT[9:8] != 2'd0 ||
	      qabsIngressF_D_OUT[19:18] != 2'd0 ||
	      qabsIngressF_D_OUT[29:28] != 2'd0 ||
	      qabsIngressF_D_OUT[39:38] != 2'd0) ;
  assign hexbdgEgressF_DEQ = EN_hOut_get ;
  assign hexbdgEgressF_CLR = 1'b0 ;

  // submodule qabsIngressF
  assign qabsIngressF_D_IN =
	     { CASE_qIn_put_BITS_39_TO_38_0_qIn_put_BITS_39_T_ETC__q5,
	       qIn_put[37:30],
	       CASE_qIn_put_BITS_29_TO_28_0_qIn_put_BITS_29_T_ETC__q6,
	       qIn_put[27:20],
	       CASE_qIn_put_BITS_19_TO_18_0_qIn_put_BITS_19_T_ETC__q7,
	       qIn_put[17:10],
	       CASE_qIn_put_BITS_9_TO_8_0_qIn_put_BITS_9_TO_8_ETC__q8,
	       qIn_put[7:0] } ;
  assign qabsIngressF_ENQ = EN_qIn_put ;
  assign qabsIngressF_DEQ = CAN_FIRE_RL_unfunnel ;
  assign qabsIngressF_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_ptr_EQ_2_67_68_OR_qabsIngressF_first_BI_ETC___d254 =
	     { qabsIngressF_D_OUT[37:30],
	       qabsIngressF_D_OUT[27:20],
	       qabsIngressF_D_OUT[17:10],
	       qabsIngressF_D_OUT[7:0],
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d233,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d243,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d252 } ;
  assign IF_NOT_ptr_EQ_2_67_68_OR_qabsIngressF_first_BI_ETC___d296 =
	     { IF_NOT_ptr_EQ_2_67_68_OR_qabsIngressF_first_BI_ETC___d254,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d262,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d273,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d284,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d294 } ;
  assign IF_NOT_ptr_EQ_2_67_68_OR_qabsIngressF_first_BI_ETC___d354 =
	     { IF_NOT_ptr_EQ_2_67_68_OR_qabsIngressF_first_BI_ETC___d296,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d305,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d321,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d337,
	       IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d352 } ;
  assign IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d319 =
	     (ptr == 2'd0 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[37:30] :
	       sr[117:110] ;
  assign IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d335 =
	     (ptr == 2'd0 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[27:20] :
	       sr[107:100] ;
  assign IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d350 =
	     (ptr == 2'd0 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[17:10] :
	       sr[97:90] ;
  assign IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d366 =
	     (ptr == 2'd0 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[7:0] :
	       sr[87:80] ;
  assign IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d272 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[37:30] :
	       sr[77:70] ;
  assign IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d283 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[27:20] :
	       sr[67:60] ;
  assign IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d293 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[17:10] :
	       sr[57:50] ;
  assign IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d304 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[7:0] :
	       sr[47:40] ;
  assign IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d320 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[37:30] :
	       IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d319 ;
  assign IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d336 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[27:20] :
	       IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d335 ;
  assign IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d351 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[17:10] :
	       IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d350 ;
  assign IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d367 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[7:0] :
	       IF_ptr_EQ_0_75_AND_NOT_qabsIngressF_first_BITS_ETC___d366 ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d233 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[37:30] :
	       sr[37:30] ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d243 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[27:20] :
	       sr[27:20] ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d252 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[17:10] :
	       sr[17:10] ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d262 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[7:0] :
	       sr[7:0] ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d273 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[37:30] :
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d272 ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d284 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[27:20] :
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d283 ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d294 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[17:10] :
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d293 ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d305 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[7:0] :
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d304 ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d321 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[77:70] :
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d320 ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d337 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[67:60] :
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d336 ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d352 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[57:50] :
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d351 ;
  assign IF_ptr_EQ_2_67_AND_NOT_qabsIngressF_first_BITS_ETC___d368 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[47:40] :
	       IF_ptr_EQ_1_72_AND_NOT_qabsIngressF_first_BITS_ETC___d367 ;
  assign nbVal_55_PLUS_IF_qabsIngressF_first_BITS_9_TO__ETC___d163 =
	     nbVal + CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_1_1_1_0__q1 +
	     CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_1_1_1_0__q2 +
	     CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_1_1_1_0__q3 +
	     CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_1_1_1_0__q4 ;
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[9:8])
      2'd0, 2'd1: CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_1_1_1_0__q1 = 5'd1;
      default: CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_1_1_1_0__q1 = 5'd0;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[19:18])
      2'd0, 2'd1: CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_1_1_1_0__q2 = 5'd1;
      default: CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_1_1_1_0__q2 = 5'd0;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[29:28])
      2'd0, 2'd1: CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_1_1_1_0__q3 = 5'd1;
      default: CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_1_1_1_0__q3 = 5'd0;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[39:38])
      2'd0, 2'd1: CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_1_1_1_0__q4 = 5'd1;
      default: CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_1_1_1_0__q4 = 5'd0;
    endcase
  end
  always@(qIn_put)
  begin
    case (qIn_put[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_qIn_put_BITS_39_TO_38_0_qIn_put_BITS_39_T_ETC__q5 =
	      qIn_put[39:38];
      2'd3: CASE_qIn_put_BITS_39_TO_38_0_qIn_put_BITS_39_T_ETC__q5 = 2'd3;
    endcase
  end
  always@(qIn_put)
  begin
    case (qIn_put[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_qIn_put_BITS_29_TO_28_0_qIn_put_BITS_29_T_ETC__q6 =
	      qIn_put[29:28];
      2'd3: CASE_qIn_put_BITS_29_TO_28_0_qIn_put_BITS_29_T_ETC__q6 = 2'd3;
    endcase
  end
  always@(qIn_put)
  begin
    case (qIn_put[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_qIn_put_BITS_19_TO_18_0_qIn_put_BITS_19_T_ETC__q7 =
	      qIn_put[19:18];
      2'd3: CASE_qIn_put_BITS_19_TO_18_0_qIn_put_BITS_19_T_ETC__q7 = 2'd3;
    endcase
  end
  always@(qIn_put)
  begin
    case (qIn_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_qIn_put_BITS_9_TO_8_0_qIn_put_BITS_9_TO_8_ETC__q8 =
	      qIn_put[9:8];
      2'd3: CASE_qIn_put_BITS_9_TO_8_0_qIn_put_BITS_9_TO_8_ETC__q8 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[79:78])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_79_TO_78_0_sr_BITS_79_TO_78_1_sr__ETC__q9 = sr[79:78];
      2'd3: CASE_sr_BITS_79_TO_78_0_sr_BITS_79_TO_78_1_sr__ETC__q9 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[69:68])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_69_TO_68_0_sr_BITS_69_TO_68_1_sr__ETC__q10 = sr[69:68];
      2'd3: CASE_sr_BITS_69_TO_68_0_sr_BITS_69_TO_68_1_sr__ETC__q10 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[59:58])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_59_TO_58_0_sr_BITS_59_TO_58_1_sr__ETC__q11 = sr[59:58];
      2'd3: CASE_sr_BITS_59_TO_58_0_sr_BITS_59_TO_58_1_sr__ETC__q11 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[49:48])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_49_TO_48_0_sr_BITS_49_TO_48_1_sr__ETC__q12 = sr[49:48];
      2'd3: CASE_sr_BITS_49_TO_48_0_sr_BITS_49_TO_48_1_sr__ETC__q12 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_39_TO_38_0_sr_BITS_39_TO_38_1_sr__ETC__q13 = sr[39:38];
      2'd3: CASE_sr_BITS_39_TO_38_0_sr_BITS_39_TO_38_1_sr__ETC__q13 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_29_TO_28_0_sr_BITS_29_TO_28_1_sr__ETC__q14 = sr[29:28];
      2'd3: CASE_sr_BITS_29_TO_28_0_sr_BITS_29_TO_28_1_sr__ETC__q14 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_19_TO_18_0_sr_BITS_19_TO_18_1_sr__ETC__q15 = sr[19:18];
      2'd3: CASE_sr_BITS_19_TO_18_0_sr_BITS_19_TO_18_1_sr__ETC__q15 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_9_TO_8_0_sr_BITS_9_TO_8_1_sr_BITS_ETC__q16 = sr[9:8];
      2'd3: CASE_sr_BITS_9_TO_8_0_sr_BITS_9_TO_8_1_sr_BITS_ETC__q16 = 2'd3;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_qabsIn_ETC__q17 =
	      qabsIngressF_D_OUT[39:38];
      2'd3: CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_qabsIn_ETC__q17 = 2'd3;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_qabsIn_ETC__q18 =
	      qabsIngressF_D_OUT[29:28];
      2'd3: CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_qabsIn_ETC__q18 = 2'd3;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_qabsIn_ETC__q19 =
	      qabsIngressF_D_OUT[19:18];
      2'd3: CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_qabsIn_ETC__q19 = 2'd3;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_qabsIngr_ETC__q20 =
	      qabsIngressF_D_OUT[9:8];
      2'd3: CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_qabsIngr_ETC__q20 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        eop <= `BSV_ASSIGNMENT_DELAY 1'd0;
	nbVal <= `BSV_ASSIGNMENT_DELAY 5'd0;
	nbValLastR <= `BSV_ASSIGNMENT_DELAY 5'd0;
	ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (eop_EN) eop <= `BSV_ASSIGNMENT_DELAY eop_D_IN;
	if (nbVal_EN) nbVal <= `BSV_ASSIGNMENT_DELAY nbVal_D_IN;
	if (nbValLastR_EN)
	  nbValLastR <= `BSV_ASSIGNMENT_DELAY nbValLastR_D_IN;
	if (ptr_EN) ptr <= `BSV_ASSIGNMENT_DELAY ptr_D_IN;
      end
    if (sr_EN) sr <= `BSV_ASSIGNMENT_DELAY sr_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    eop = 1'h0;
    nbVal = 5'h0A;
    nbValLastR = 5'h0A;
    ptr = 2'h2;
    sr = 120'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkQABS2HBDG

