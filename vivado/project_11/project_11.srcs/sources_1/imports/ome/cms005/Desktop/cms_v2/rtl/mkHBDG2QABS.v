//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Wed Jun 26 16:46:35 CDT 2013
//
// Method conflict info:
// Method: hIn_put
// Conflict-free: qOut_get
// Conflicts: hIn_put
//
// Method: qOut_get
// Conflict-free: hIn_put
// Conflicts: qOut_get
//
//
// Ports:
// Name                         I/O  size props
// RDY_hIn_put                    O     1 reg
// qOut_get                       O    40
// RDY_qOut_get                   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hIn_put                        I   134 reg
// EN_hIn_put                     I     1
// EN_qOut_get                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkHBDG2QABS(CLK,
		   RST_N,

		   hIn_put,
		   EN_hIn_put,
		   RDY_hIn_put,

		   EN_qOut_get,
		   qOut_get,
		   RDY_qOut_get);
  input  CLK;
  input  RST_N;

  // action method hIn_put
  input  [133 : 0] hIn_put;
  input  EN_hIn_put;
  output RDY_hIn_put;

  // actionvalue method qOut_get
  input  EN_qOut_get;
  output [39 : 0] qOut_get;
  output RDY_qOut_get;

  // signals for module outputs
  wire [39 : 0] qOut_get;
  wire RDY_hIn_put, RDY_qOut_get;

  // register byteCountR
  reg [4 : 0] byteCountR;
  wire [4 : 0] byteCountR_D_IN;
  wire byteCountR_EN;

  // register index
  reg [4 : 0] index;
  wire [4 : 0] index_D_IN;
  wire index_EN;

  // ports of submodule hexbdgIngressF
  wire [133 : 0] hexbdgIngressF_D_IN, hexbdgIngressF_D_OUT;
  wire hexbdgIngressF_CLR,
       hexbdgIngressF_DEQ,
       hexbdgIngressF_EMPTY_N,
       hexbdgIngressF_ENQ,
       hexbdgIngressF_FULL_N;

  // ports of submodule qabsEgressF
  wire [39 : 0] qabsEgressF_D_IN, qabsEgressF_D_OUT;
  wire qabsEgressF_CLR,
       qabsEgressF_DEQ,
       qabsEgressF_EMPTY_N,
       qabsEgressF_ENQ,
       qabsEgressF_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_funnel,
       CAN_FIRE_hIn_put,
       CAN_FIRE_qOut_get,
       WILL_FIRE_RL_funnel,
       WILL_FIRE_hIn_put,
       WILL_FIRE_qOut_get;

  // remaining internal signals
  reg [7 : 0] SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101,
	      SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109,
	      SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115,
	      SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93;
  reg [4 : 0] CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q5;
  reg [1 : 0] CASE_qabsEgressFD_OUT_BITS_19_TO_18_0_qabsEgr_ETC__q3,
	      CASE_qabsEgressFD_OUT_BITS_29_TO_28_0_qabsEgr_ETC__q2,
	      CASE_qabsEgressFD_OUT_BITS_39_TO_38_0_qabsEgr_ETC__q1,
	      CASE_qabsEgressFD_OUT_BITS_9_TO_8_0_qabsEgres_ETC__q4;
  wire [9 : 0] IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d106,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d114,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d120,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d99;
  wire [4 : 0] IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12,
	       x__h1366,
	       x__h2829,
	       x__h3027;
  wire IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d34,
       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d13,
       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17,
       NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_BI_ETC___d57,
       NOT_index_EQ_12_AND_NOT_IF_index_EQ_0_THEN_hex_ETC___d58;

  // action method hIn_put
  assign RDY_hIn_put = hexbdgIngressF_FULL_N ;
  assign CAN_FIRE_hIn_put = hexbdgIngressF_FULL_N ;
  assign WILL_FIRE_hIn_put = EN_hIn_put ;

  // actionvalue method qOut_get
  assign qOut_get =
	     { CASE_qabsEgressFD_OUT_BITS_39_TO_38_0_qabsEgr_ETC__q1,
	       qabsEgressF_D_OUT[37:30],
	       CASE_qabsEgressFD_OUT_BITS_29_TO_28_0_qabsEgr_ETC__q2,
	       qabsEgressF_D_OUT[27:20],
	       CASE_qabsEgressFD_OUT_BITS_19_TO_18_0_qabsEgr_ETC__q3,
	       qabsEgressF_D_OUT[17:10],
	       CASE_qabsEgressFD_OUT_BITS_9_TO_8_0_qabsEgres_ETC__q4,
	       qabsEgressF_D_OUT[7:0] } ;
  assign RDY_qOut_get = qabsEgressF_EMPTY_N ;
  assign CAN_FIRE_qOut_get = qabsEgressF_EMPTY_N ;
  assign WILL_FIRE_qOut_get = EN_qOut_get ;

  // submodule hexbdgIngressF
  FIFO2 #(.width(32'd134), .guarded(32'd1)) hexbdgIngressF(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(hexbdgIngressF_D_IN),
							   .ENQ(hexbdgIngressF_ENQ),
							   .DEQ(hexbdgIngressF_DEQ),
							   .CLR(hexbdgIngressF_CLR),
							   .D_OUT(hexbdgIngressF_D_OUT),
							   .FULL_N(hexbdgIngressF_FULL_N),
							   .EMPTY_N(hexbdgIngressF_EMPTY_N));

  // submodule qabsEgressF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) qabsEgressF(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(qabsEgressF_D_IN),
						       .ENQ(qabsEgressF_ENQ),
						       .DEQ(qabsEgressF_DEQ),
						       .CLR(qabsEgressF_CLR),
						       .D_OUT(qabsEgressF_D_OUT),
						       .FULL_N(qabsEgressF_FULL_N),
						       .EMPTY_N(qabsEgressF_EMPTY_N));

  // rule RL_funnel
  assign CAN_FIRE_RL_funnel =
	     qabsEgressF_FULL_N &&
	     (index != 5'd0 || hexbdgIngressF_EMPTY_N) &&
	     NOT_index_EQ_12_AND_NOT_IF_index_EQ_0_THEN_hex_ETC___d58 ;
  assign WILL_FIRE_RL_funnel = CAN_FIRE_RL_funnel ;

  // register byteCountR
  assign byteCountR_D_IN =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4) ?
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 -
	       5'd4 :
	       CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q5 ;
  assign byteCountR_EN = CAN_FIRE_RL_funnel ;

  // register index
  assign index_D_IN =
	     (index == 5'd12 || hexbdgIngressF_D_OUT[5:1] - index < 5'd4) ?
	       5'd0 :
	       index + 5'd4 ;
  assign index_EN = CAN_FIRE_RL_funnel ;

  // submodule hexbdgIngressF
  assign hexbdgIngressF_D_IN = hIn_put ;
  assign hexbdgIngressF_ENQ = EN_hIn_put ;
  assign hexbdgIngressF_DEQ =
	     WILL_FIRE_RL_funnel &&
	     (index == 5'd12 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d13) ;
  assign hexbdgIngressF_CLR = 1'b0 ;

  // submodule qabsEgressF
  assign qabsEgressF_D_IN =
	     { IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d99,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d106,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d114,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d120 } ;
  assign qabsEgressF_ENQ = CAN_FIRE_RL_funnel ;
  assign qabsEgressF_DEQ = EN_qOut_get ;
  assign qabsEgressF_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d106 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4) ?
	       { 2'd0,
		 SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 } :
	       ((IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
		 5'd3) ?
		  { 2'd1,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 } :
		  { 2'd2,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 }) ;
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d114 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd3) ?
	       { 2'd0,
		 SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 } :
	       ((IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
		 5'd2) ?
		  { 2'd1,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 } :
		  { 2'd2,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 }) ;
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d120 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd3 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd2) ?
	       { 2'd0,
		 SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 } :
	       ((IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
		 5'd1) ?
		  { 2'd1,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 } :
		  { 2'd2,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 }) ;
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d34 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4 &&
	      !hexbdgIngressF_D_OUT[0]) ?
	       (IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
		hexbdgIngressF_EMPTY_N) &&
	       (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
		IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 !=
		5'd4 ||
		hexbdgIngressF_EMPTY_N) :
	       index == 5'd0 ||
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 !=
	       5'd4 ||
	       hexbdgIngressF_EMPTY_N ;
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d99 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4 &&
	      !hexbdgIngressF_D_OUT[0]) ?
	       { 2'd0,
		 SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 } :
	       ((IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
		 5'd4 &&
		 hexbdgIngressF_D_OUT[0]) ?
		  { 2'd1,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 } :
		  { 2'd2,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 }) ;
  assign IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 =
	     (index == 5'd0) ? hexbdgIngressF_D_OUT[5:1] : byteCountR ;
  assign IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d13 =
	     IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 < 5'd4 ;
  assign IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 =
	     IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 <=
	     5'd4 ;
  assign NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_BI_ETC___d57 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      index == 5'd0 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 !=
	      5'd4 ||
	      hexbdgIngressF_EMPTY_N) &&
	     (index == 5'd12 || hexbdgIngressF_EMPTY_N) &&
	     IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d34 &&
	     ((!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	       5'd4 ||
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	       5'd3 ||
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	       5'd2) ?
		hexbdgIngressF_EMPTY_N :
		IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 !=
		5'd1 ||
		hexbdgIngressF_EMPTY_N) ;
  assign NOT_index_EQ_12_AND_NOT_IF_index_EQ_0_THEN_hex_ETC___d58 =
	     (index != 5'd12 &&
	      !IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d13 ||
	      hexbdgIngressF_EMPTY_N) &&
	     NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_BI_ETC___d57 ;
  assign x__h1366 = index + 5'd3 ;
  assign x__h2829 = index + 5'd2 ;
  assign x__h3027 = index + 5'd1 ;
  always@(qabsEgressF_D_OUT)
  begin
    case (qabsEgressF_D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsEgressFD_OUT_BITS_39_TO_38_0_qabsEgr_ETC__q1 =
	      qabsEgressF_D_OUT[39:38];
      2'd3: CASE_qabsEgressFD_OUT_BITS_39_TO_38_0_qabsEgr_ETC__q1 = 2'd3;
    endcase
  end
  always@(qabsEgressF_D_OUT)
  begin
    case (qabsEgressF_D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsEgressFD_OUT_BITS_29_TO_28_0_qabsEgr_ETC__q2 =
	      qabsEgressF_D_OUT[29:28];
      2'd3: CASE_qabsEgressFD_OUT_BITS_29_TO_28_0_qabsEgr_ETC__q2 = 2'd3;
    endcase
  end
  always@(qabsEgressF_D_OUT)
  begin
    case (qabsEgressF_D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsEgressFD_OUT_BITS_19_TO_18_0_qabsEgr_ETC__q3 =
	      qabsEgressF_D_OUT[19:18];
      2'd3: CASE_qabsEgressFD_OUT_BITS_19_TO_18_0_qabsEgr_ETC__q3 = 2'd3;
    endcase
  end
  always@(qabsEgressF_D_OUT)
  begin
    case (qabsEgressF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsEgressFD_OUT_BITS_9_TO_8_0_qabsEgres_ETC__q4 =
	      qabsEgressF_D_OUT[9:8];
      2'd3: CASE_qabsEgressFD_OUT_BITS_9_TO_8_0_qabsEgres_ETC__q4 = 2'd3;
    endcase
  end
  always@(x__h2829 or hexbdgIngressF_D_OUT)
  begin
    case (x__h2829)
      5'd0:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[13:6];
      5'd1:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[21:14];
      5'd2:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[29:22];
      5'd3:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[37:30];
      5'd4:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[45:38];
      5'd5:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[53:46];
      5'd6:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[61:54];
      5'd7:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[69:62];
      5'd8:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[77:70];
      5'd9:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[85:78];
      5'd10:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[93:86];
      5'd11:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[101:94];
      5'd12:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[109:102];
      5'd13:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[117:110];
      5'd14:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[125:118];
      5'd15:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[133:126];
      default: SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h3027 or hexbdgIngressF_D_OUT)
  begin
    case (x__h3027)
      5'd0:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[13:6];
      5'd1:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[21:14];
      5'd2:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[29:22];
      5'd3:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[37:30];
      5'd4:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[45:38];
      5'd5:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[53:46];
      5'd6:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[61:54];
      5'd7:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[69:62];
      5'd8:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[77:70];
      5'd9:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[85:78];
      5'd10:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[93:86];
      5'd11:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[101:94];
      5'd12:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[109:102];
      5'd13:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[117:110];
      5'd14:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[125:118];
      5'd15:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[133:126];
      default: SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h1366 or hexbdgIngressF_D_OUT)
  begin
    case (x__h1366)
      5'd0:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[13:6];
      5'd1:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[21:14];
      5'd2:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[29:22];
      5'd3:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[37:30];
      5'd4:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[45:38];
      5'd5:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[53:46];
      5'd6:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[61:54];
      5'd7:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[69:62];
      5'd8:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[77:70];
      5'd9:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[85:78];
      5'd10:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[93:86];
      5'd11:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[101:94];
      5'd12:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[109:102];
      5'd13:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[117:110];
      5'd14:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[125:118];
      5'd15:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[133:126];
      default: SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(index or hexbdgIngressF_D_OUT)
  begin
    case (index)
      5'd0:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[13:6];
      5'd1:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[21:14];
      5'd2:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[29:22];
      5'd3:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[37:30];
      5'd4:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[45:38];
      5'd5:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[53:46];
      5'd6:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[61:54];
      5'd7:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[69:62];
      5'd8:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[77:70];
      5'd9:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[85:78];
      5'd10:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[93:86];
      5'd11:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[101:94];
      5'd12:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[109:102];
      5'd13:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[117:110];
      5'd14:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[125:118];
      5'd15:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[133:126];
      default: SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12)
  begin
    case (IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12)
      5'd1:
	  CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q5 =
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 - 5'd1;
      5'd2:
	  CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q5 =
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 - 5'd2;
      5'd3:
	  CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q5 =
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 - 5'd3;
      default: CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q5 =
		   IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        byteCountR <= `BSV_ASSIGNMENT_DELAY 5'd0;
	index <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (byteCountR_EN)
	  byteCountR <= `BSV_ASSIGNMENT_DELAY byteCountR_D_IN;
	if (index_EN) index <= `BSV_ASSIGNMENT_DELAY index_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    byteCountR = 5'h0A;
    index = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkHBDG2QABS

