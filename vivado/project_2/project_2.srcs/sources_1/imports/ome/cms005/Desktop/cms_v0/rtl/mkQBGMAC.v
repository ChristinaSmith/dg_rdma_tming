//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Thu Jun 13 12:34:42 CDT 2013
//
// Method conflict info:
// Method: gmii_rx_rxd
// Conflict-free: gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Sequenced before (restricted): gmii_rx_rxd
//
// Method: gmii_rx_rx_dv
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Sequenced before (restricted): gmii_rx_rx_dv
//
// Method: gmii_rx_rx_er
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Sequenced before (restricted): gmii_rx_rx_er
//
// Method: gmii_tx_txd
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
//
// Method: gmii_tx_tx_en
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
//
// Method: gmii_tx_tx_er
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
//
// Method: gmii_col
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Conflicts: gmii_col
//
// Method: gmii_crs
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Conflicts: gmii_crs
//
// Method: gmii_intr
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Conflicts: gmii_intr
//
// Method: gmii_led
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
//
// Method: rx_get
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Conflicts: rx_get
//
// Method: tx_put
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Conflicts: tx_put
//
// Method: rxOperate
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Sequenced before (restricted): rxOperate
//
// Method: txOperate
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
// Sequenced before (restricted): txOperate
//
// Method: rxOverFlow
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
//
// Method: txUnderFlow
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
//
// Method: phyInterrupt
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       rx_get,
// 	       tx_put,
// 	       rxOperate,
// 	       txOperate,
// 	       rxOverFlow,
// 	       txUnderFlow,
// 	       phyInterrupt
//
//
// Ports:
// Name                         I/O  size props
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// rx_get                         O    40
// RDY_rx_get                     O     1
// RDY_tx_put                     O     1
// RDY_rxOperate                  O     1 const
// RDY_txOperate                  O     1 const
// rxOverFlow                     O     1 const
// RDY_rxOverFlow                 O     1 const
// txUnderFlow                    O     1 const
// RDY_txUnderFlow                O     1 const
// phyInterrupt                   O     1 const
// RDY_phyInterrupt               O     1 const
// CLK_gmii_tx_tx_clk             O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// CLK_rxclkBnd                   O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// CLK_rxClk                      I     1 clock
// CLK_txClk                      I     1 clock
// RST_N_gmRst                    I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// tx_put                         I    40
// EN_tx_put                      I     1
// EN_rxOperate                   I     1 reg
// EN_txOperate                   I     1 reg
// EN_rx_get                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkQBGMAC(CLK_rxClk,
		CLK_txClk,
		RST_N_gmRst,
		CLK,
		RST_N,

		gmii_rx_rxd_i,

		gmii_rx_rx_dv_i,

		gmii_rx_rx_er_i,

		gmii_tx_txd,

		gmii_tx_tx_en,

		gmii_tx_tx_er,

		gmii_col_i,

		gmii_crs_i,

		gmii_intr_i,

		gmii_led,

		EN_rx_get,
		rx_get,
		RDY_rx_get,

		tx_put,
		EN_tx_put,
		RDY_tx_put,

		EN_rxOperate,
		RDY_rxOperate,

		EN_txOperate,
		RDY_txOperate,

		rxOverFlow,
		RDY_rxOverFlow,

		txUnderFlow,
		RDY_txUnderFlow,

		phyInterrupt,
		RDY_phyInterrupt,

		CLK_gmii_tx_tx_clk,
		CLK_GATE_gmii_tx_tx_clk,

		CLK_rxclkBnd,
		CLK_GATE_rxclkBnd);
  input  CLK_rxClk;
  input  CLK_txClk;
  input  RST_N_gmRst;
  input  CLK;
  input  RST_N;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // actionvalue method rx_get
  input  EN_rx_get;
  output [39 : 0] rx_get;
  output RDY_rx_get;

  // action method tx_put
  input  [39 : 0] tx_put;
  input  EN_tx_put;
  output RDY_tx_put;

  // action method rxOperate
  input  EN_rxOperate;
  output RDY_rxOperate;

  // action method txOperate
  input  EN_txOperate;
  output RDY_txOperate;

  // value method rxOverFlow
  output rxOverFlow;
  output RDY_rxOverFlow;

  // value method txUnderFlow
  output txUnderFlow;
  output RDY_txUnderFlow;

  // value method phyInterrupt
  output phyInterrupt;
  output RDY_phyInterrupt;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  output CLK_gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // oscillator and gates for output clock CLK_rxclkBnd
  output CLK_rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // signals for module outputs
  wire [39 : 0] rx_get;
  wire [7 : 0] gmii_tx_txd;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       CLK_gmii_tx_tx_clk,
       CLK_rxclkBnd,
       RDY_phyInterrupt,
       RDY_rxOperate,
       RDY_rxOverFlow,
       RDY_rx_get,
       RDY_txOperate,
       RDY_txUnderFlow,
       RDY_tx_put,
       gmii_led,
       gmii_tx_tx_en,
       gmii_tx_tx_er,
       phyInterrupt,
       rxOverFlow,
       txUnderFlow;

  // register rxOperD
  reg rxOperD;
  wire rxOperD_D_IN, rxOperD_EN;

  // register rxfun_ptr
  reg [1 : 0] rxfun_ptr;
  wire [1 : 0] rxfun_ptr_D_IN;
  wire rxfun_ptr_EN;

  // register rxfun_sr
  reg [29 : 0] rxfun_sr;
  wire [29 : 0] rxfun_sr_D_IN;
  wire rxfun_sr_EN;

  // register txOperD
  reg txOperD;
  wire txOperD_D_IN, txOperD_EN;

  // register txfun_ptr
  reg [1 : 0] txfun_ptr;
  wire [1 : 0] txfun_ptr_D_IN;
  wire txfun_ptr_EN;

  // ports of submodule gmac
  wire [9 : 0] gmac_rx_get, gmac_tx_put;
  wire [7 : 0] gmac_gmii_rx_rxd_i, gmac_gmii_tx_txd;
  wire gmac_CLK_gmii_tx_tx_clk,
       gmac_CLK_rxclkBnd,
       gmac_EN_rxOperate,
       gmac_EN_rx_get,
       gmac_EN_txOperate,
       gmac_EN_tx_put,
       gmac_RDY_rx_get,
       gmac_RDY_tx_put,
       gmac_gmii_col_i,
       gmac_gmii_crs_i,
       gmac_gmii_intr_i,
       gmac_gmii_led,
       gmac_gmii_rx_rx_dv_i,
       gmac_gmii_rx_rx_er_i,
       gmac_gmii_tx_tx_en,
       gmac_gmii_tx_tx_er;

  // ports of submodule ovfBit
  wire ovfBit_sD_IN, ovfBit_sEN;

  // ports of submodule rxF
  wire [39 : 0] rxF_dD_OUT, rxF_sD_IN;
  wire rxF_dDEQ, rxF_dEMPTY_N, rxF_sENQ, rxF_sFULL_N;

  // ports of submodule rxOper
  wire rxOper_dD_OUT, rxOper_sD_IN, rxOper_sEN;

  // ports of submodule rxfun_inF
  wire [9 : 0] rxfun_inF_D_IN, rxfun_inF_D_OUT;
  wire rxfun_inF_CLR,
       rxfun_inF_DEQ,
       rxfun_inF_EMPTY_N,
       rxfun_inF_ENQ,
       rxfun_inF_FULL_N;

  // ports of submodule rxfun_outF
  wire [39 : 0] rxfun_outF_D_IN, rxfun_outF_D_OUT;
  wire rxfun_outF_CLR,
       rxfun_outF_DEQ,
       rxfun_outF_EMPTY_N,
       rxfun_outF_ENQ,
       rxfun_outF_FULL_N;

  // ports of submodule txF
  wire [39 : 0] txF_dD_OUT, txF_sD_IN;
  wire txF_dDEQ, txF_dEMPTY_N, txF_sENQ, txF_sFULL_N;

  // ports of submodule txOper
  wire txOper_dD_OUT, txOper_sD_IN, txOper_sEN;

  // ports of submodule txfun_inF
  wire [39 : 0] txfun_inF_D_IN, txfun_inF_D_OUT;
  wire txfun_inF_CLR,
       txfun_inF_DEQ,
       txfun_inF_EMPTY_N,
       txfun_inF_ENQ,
       txfun_inF_FULL_N;

  // ports of submodule txfun_outF
  wire [9 : 0] txfun_outF_D_IN, txfun_outF_D_OUT;
  wire txfun_outF_CLR,
       txfun_outF_DEQ,
       txfun_outF_EMPTY_N,
       txfun_outF_ENQ,
       txfun_outF_FULL_N;

  // ports of submodule unfBit
  wire unfBit_sD_IN, unfBit_sEN;

  // rule scheduling signals
  wire CAN_FIRE_RL_connect_rxOperate,
       CAN_FIRE_RL_connect_txOperate,
       CAN_FIRE_RL_cross_rx_Operate,
       CAN_FIRE_RL_cross_tx_Operate,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_rxOperD__dreg_update,
       CAN_FIRE_RL_rxfun_unfunnel,
       CAN_FIRE_RL_txOperD__dreg_update,
       CAN_FIRE_RL_txfun_funnel,
       CAN_FIRE_gmii_col,
       CAN_FIRE_gmii_crs,
       CAN_FIRE_gmii_intr,
       CAN_FIRE_gmii_rx_rx_dv,
       CAN_FIRE_gmii_rx_rx_er,
       CAN_FIRE_gmii_rx_rxd,
       CAN_FIRE_rxOperate,
       CAN_FIRE_rx_get,
       CAN_FIRE_txOperate,
       CAN_FIRE_tx_put,
       WILL_FIRE_RL_connect_rxOperate,
       WILL_FIRE_RL_connect_txOperate,
       WILL_FIRE_RL_cross_rx_Operate,
       WILL_FIRE_RL_cross_tx_Operate,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_rxOperD__dreg_update,
       WILL_FIRE_RL_rxfun_unfunnel,
       WILL_FIRE_RL_txOperD__dreg_update,
       WILL_FIRE_RL_txfun_funnel,
       WILL_FIRE_gmii_col,
       WILL_FIRE_gmii_crs,
       WILL_FIRE_gmii_intr,
       WILL_FIRE_gmii_rx_rx_dv,
       WILL_FIRE_gmii_rx_rx_er,
       WILL_FIRE_gmii_rx_rxd,
       WILL_FIRE_rxOperate,
       WILL_FIRE_rx_get,
       WILL_FIRE_txOperate,
       WILL_FIRE_tx_put;

  // remaining internal signals
  reg [7 : 0] SEL_ARR_txfun_inF_first__0_BITS_7_TO_0_4_txfun_ETC___d89;
  reg [1 : 0] CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q15,
	      CASE_rxFdD_OUT_BITS_19_TO_18_0_rxFdD_OUT_BIT_ETC__q3,
	      CASE_rxFdD_OUT_BITS_29_TO_28_0_rxFdD_OUT_BIT_ETC__q2,
	      CASE_rxFdD_OUT_BITS_39_TO_38_0_rxFdD_OUT_BIT_ETC__q1,
	      CASE_rxFdD_OUT_BITS_9_TO_8_0_rxFdD_OUT_BITS__ETC__q4,
	      CASE_rxfun_inFD_OUT_BITS_9_TO_8_0_rxfun_inFD_ETC__q5,
	      CASE_rxfun_outFD_OUT_BITS_19_TO_18_0_rxfun_ou_ETC__q13,
	      CASE_rxfun_outFD_OUT_BITS_29_TO_28_0_rxfun_ou_ETC__q12,
	      CASE_rxfun_outFD_OUT_BITS_39_TO_38_0_rxfun_ou_ETC__q11,
	      CASE_rxfun_outFD_OUT_BITS_9_TO_8_0_rxfun_outF_ETC__q14,
	      CASE_rxfun_sr_BITS_19_TO_18_0_rxfun_sr_BITS_19_ETC__q7,
	      CASE_rxfun_sr_BITS_29_TO_28_0_rxfun_sr_BITS_29_ETC__q16,
	      CASE_rxfun_sr_BITS_9_TO_8_0_rxfun_sr_BITS_9_TO_ETC__q6,
	      CASE_txFdD_OUT_BITS_19_TO_18_0_txFdD_OUT_BIT_ETC__q23,
	      CASE_txFdD_OUT_BITS_29_TO_28_0_txFdD_OUT_BIT_ETC__q22,
	      CASE_txFdD_OUT_BITS_39_TO_38_0_txFdD_OUT_BIT_ETC__q21,
	      CASE_txFdD_OUT_BITS_9_TO_8_0_txFdD_OUT_BITS__ETC__q24,
	      CASE_tx_put_BITS_19_TO_18_0_tx_put_BITS_19_TO__ETC__q19,
	      CASE_tx_put_BITS_29_TO_28_0_tx_put_BITS_29_TO__ETC__q18,
	      CASE_tx_put_BITS_39_TO_38_0_tx_put_BITS_39_TO__ETC__q17,
	      CASE_tx_put_BITS_9_TO_8_0_tx_put_BITS_9_TO_8_1_ETC__q20,
	      CASE_txfun_outFD_OUT_BITS_9_TO_8_0_txfun_outF_ETC__q10;
  reg CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q8,
      CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q9,
      SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_0__ETC___d81;
  wire [9 : 0] IF_SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_ETC___d105,
	       IF_SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_ETC___d106,
	       IF_rxfun_inF_first__1_BITS_9_TO_8_2_EQ_0_3_OR__ETC___d49,
	       IF_rxfun_sr_8_BITS_19_TO_18_9_EQ_0_0_OR_rxfun__ETC___d29,
	       IF_rxfun_sr_8_BITS_9_TO_8_0_EQ_0_1_OR_rxfun_sr_ETC___d40;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  assign CLK_gmii_tx_tx_clk = gmac_CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // oscillator and gates for output clock CLK_rxclkBnd
  assign CLK_rxclkBnd = gmac_CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // action method gmii_rx_rxd
  assign CAN_FIRE_gmii_rx_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rxd = 1'd1 ;

  // action method gmii_rx_rx_dv
  assign CAN_FIRE_gmii_rx_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_dv = 1'd1 ;

  // action method gmii_rx_rx_er
  assign CAN_FIRE_gmii_rx_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_er = 1'd1 ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gmac_gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gmac_gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gmac_gmii_tx_tx_er ;

  // action method gmii_col
  assign CAN_FIRE_gmii_col = 1'd1 ;
  assign WILL_FIRE_gmii_col = 1'd1 ;

  // action method gmii_crs
  assign CAN_FIRE_gmii_crs = 1'd1 ;
  assign WILL_FIRE_gmii_crs = 1'd1 ;

  // action method gmii_intr
  assign CAN_FIRE_gmii_intr = 1'd1 ;
  assign WILL_FIRE_gmii_intr = 1'd1 ;

  // value method gmii_led
  assign gmii_led = gmac_gmii_led ;

  // actionvalue method rx_get
  assign rx_get =
	     { CASE_rxFdD_OUT_BITS_39_TO_38_0_rxFdD_OUT_BIT_ETC__q1,
	       rxF_dD_OUT[37:30],
	       CASE_rxFdD_OUT_BITS_29_TO_28_0_rxFdD_OUT_BIT_ETC__q2,
	       rxF_dD_OUT[27:20],
	       CASE_rxFdD_OUT_BITS_19_TO_18_0_rxFdD_OUT_BIT_ETC__q3,
	       rxF_dD_OUT[17:10],
	       CASE_rxFdD_OUT_BITS_9_TO_8_0_rxFdD_OUT_BITS__ETC__q4,
	       rxF_dD_OUT[7:0] } ;
  assign RDY_rx_get = rxF_dEMPTY_N ;
  assign CAN_FIRE_rx_get = rxF_dEMPTY_N ;
  assign WILL_FIRE_rx_get = EN_rx_get ;

  // action method tx_put
  assign RDY_tx_put = txF_sFULL_N ;
  assign CAN_FIRE_tx_put = txF_sFULL_N ;
  assign WILL_FIRE_tx_put = EN_tx_put ;

  // action method rxOperate
  assign RDY_rxOperate = 1'd1 ;
  assign CAN_FIRE_rxOperate = 1'd1 ;
  assign WILL_FIRE_rxOperate = EN_rxOperate ;

  // action method txOperate
  assign RDY_txOperate = 1'd1 ;
  assign CAN_FIRE_txOperate = 1'd1 ;
  assign WILL_FIRE_txOperate = EN_txOperate ;

  // value method rxOverFlow
  assign rxOverFlow = 1'd0 ;
  assign RDY_rxOverFlow = 1'd1 ;

  // value method txUnderFlow
  assign txUnderFlow = 1'd0 ;
  assign RDY_txUnderFlow = 1'd1 ;

  // value method phyInterrupt
  assign phyInterrupt = 1'd0 ;
  assign RDY_phyInterrupt = 1'd1 ;

  // submodule gmac
  mkGMAC gmac(.CLK_rxClk(CLK_rxClk),
	      .CLK_txClk(CLK_txClk),
	      .CLK(CLK_txClk),
	      .RST_N(RST_N_gmRst),
	      .gmii_col_i(gmac_gmii_col_i),
	      .gmii_crs_i(gmac_gmii_crs_i),
	      .gmii_intr_i(gmac_gmii_intr_i),
	      .gmii_rx_rx_dv_i(gmac_gmii_rx_rx_dv_i),
	      .gmii_rx_rx_er_i(gmac_gmii_rx_rx_er_i),
	      .gmii_rx_rxd_i(gmac_gmii_rx_rxd_i),
	      .tx_put(gmac_tx_put),
	      .EN_rx_get(gmac_EN_rx_get),
	      .EN_tx_put(gmac_EN_tx_put),
	      .EN_rxOperate(gmac_EN_rxOperate),
	      .EN_txOperate(gmac_EN_txOperate),
	      .gmii_tx_txd(gmac_gmii_tx_txd),
	      .gmii_tx_tx_en(gmac_gmii_tx_tx_en),
	      .gmii_tx_tx_er(gmac_gmii_tx_tx_er),
	      .gmii_led(gmac_gmii_led),
	      .rx_get(gmac_rx_get),
	      .RDY_rx_get(gmac_RDY_rx_get),
	      .RDY_tx_put(gmac_RDY_tx_put),
	      .RDY_rxOperate(),
	      .RDY_txOperate(),
	      .rxOverFlow(),
	      .RDY_rxOverFlow(),
	      .txUnderFlow(),
	      .RDY_txUnderFlow(),
	      .phyInterrupt(),
	      .RDY_phyInterrupt(),
	      .CLK_gmii_tx_tx_clk(gmac_CLK_gmii_tx_tx_clk),
	      .CLK_GATE_gmii_tx_tx_clk(),
	      .CLK_rxclkBnd(gmac_CLK_rxclkBnd),
	      .CLK_GATE_rxclkBnd());

  // submodule ovfBit
  SyncBit #(.init(1'd0)) ovfBit(.sCLK(CLK_txClk),
				.dCLK(CLK),
				.sRST(RST_N_gmRst),
				.sD_IN(ovfBit_sD_IN),
				.sEN(ovfBit_sEN),
				.dD_OUT());

  // submodule rxF
  SyncFIFO #(.dataWidth(32'd40),
	     .depth(32'd8),
	     .indxWidth(32'd3)) rxF(.sCLK(CLK_txClk),
				    .dCLK(CLK),
				    .sRST(RST_N_gmRst),
				    .sD_IN(rxF_sD_IN),
				    .sENQ(rxF_sENQ),
				    .dDEQ(rxF_dDEQ),
				    .dD_OUT(rxF_dD_OUT),
				    .sFULL_N(rxF_sFULL_N),
				    .dEMPTY_N(rxF_dEMPTY_N));

  // submodule rxOper
  SyncBit #(.init(1'd0)) rxOper(.sCLK(CLK),
				.dCLK(CLK_txClk),
				.sRST(RST_N),
				.sD_IN(rxOper_sD_IN),
				.sEN(rxOper_sEN),
				.dD_OUT(rxOper_dD_OUT));

  // submodule rxfun_inF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) rxfun_inF(.RST(RST_N_gmRst),
						     .CLK(CLK_txClk),
						     .D_IN(rxfun_inF_D_IN),
						     .ENQ(rxfun_inF_ENQ),
						     .DEQ(rxfun_inF_DEQ),
						     .CLR(rxfun_inF_CLR),
						     .D_OUT(rxfun_inF_D_OUT),
						     .FULL_N(rxfun_inF_FULL_N),
						     .EMPTY_N(rxfun_inF_EMPTY_N));

  // submodule rxfun_outF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) rxfun_outF(.RST(RST_N_gmRst),
						      .CLK(CLK_txClk),
						      .D_IN(rxfun_outF_D_IN),
						      .ENQ(rxfun_outF_ENQ),
						      .DEQ(rxfun_outF_DEQ),
						      .CLR(rxfun_outF_CLR),
						      .D_OUT(rxfun_outF_D_OUT),
						      .FULL_N(rxfun_outF_FULL_N),
						      .EMPTY_N(rxfun_outF_EMPTY_N));

  // submodule txF
  SyncFIFO #(.dataWidth(32'd40),
	     .depth(32'd8),
	     .indxWidth(32'd3)) txF(.sCLK(CLK),
				    .dCLK(CLK_txClk),
				    .sRST(RST_N),
				    .sD_IN(txF_sD_IN),
				    .sENQ(txF_sENQ),
				    .dDEQ(txF_dDEQ),
				    .dD_OUT(txF_dD_OUT),
				    .sFULL_N(txF_sFULL_N),
				    .dEMPTY_N(txF_dEMPTY_N));

  // submodule txOper
  SyncBit #(.init(1'd0)) txOper(.sCLK(CLK),
				.dCLK(CLK_txClk),
				.sRST(RST_N),
				.sD_IN(txOper_sD_IN),
				.sEN(txOper_sEN),
				.dD_OUT(txOper_dD_OUT));

  // submodule txfun_inF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) txfun_inF(.RST(RST_N_gmRst),
						     .CLK(CLK_txClk),
						     .D_IN(txfun_inF_D_IN),
						     .ENQ(txfun_inF_ENQ),
						     .DEQ(txfun_inF_DEQ),
						     .CLR(txfun_inF_CLR),
						     .D_OUT(txfun_inF_D_OUT),
						     .FULL_N(txfun_inF_FULL_N),
						     .EMPTY_N(txfun_inF_EMPTY_N));

  // submodule txfun_outF
  FIFO2 #(.width(32'd10), .guarded(32'd1)) txfun_outF(.RST(RST_N_gmRst),
						      .CLK(CLK_txClk),
						      .D_IN(txfun_outF_D_IN),
						      .ENQ(txfun_outF_ENQ),
						      .DEQ(txfun_outF_DEQ),
						      .CLR(txfun_outF_CLR),
						      .D_OUT(txfun_outF_D_OUT),
						      .FULL_N(txfun_outF_FULL_N),
						      .EMPTY_N(txfun_outF_EMPTY_N));

  // submodule unfBit
  SyncBit #(.init(1'd0)) unfBit(.sCLK(CLK_txClk),
				.dCLK(CLK),
				.sRST(RST_N_gmRst),
				.sD_IN(unfBit_sD_IN),
				.sEN(unfBit_sEN),
				.dD_OUT());

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     gmac_RDY_rx_get && rxfun_inF_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     rxF_sFULL_N && rxfun_outF_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 = txF_dEMPTY_N && txfun_inF_FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     gmac_RDY_tx_put && txfun_outF_EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_cross_rx_Operate
  assign CAN_FIRE_RL_cross_rx_Operate = 1'd1 ;
  assign WILL_FIRE_RL_cross_rx_Operate = 1'd1 ;

  // rule RL_cross_tx_Operate
  assign CAN_FIRE_RL_cross_tx_Operate = 1'd1 ;
  assign WILL_FIRE_RL_cross_tx_Operate = 1'd1 ;

  // rule RL_connect_rxOperate
  assign CAN_FIRE_RL_connect_rxOperate = rxOper_dD_OUT ;
  assign WILL_FIRE_RL_connect_rxOperate = rxOper_dD_OUT ;

  // rule RL_connect_txOperate
  assign CAN_FIRE_RL_connect_txOperate = txOper_dD_OUT ;
  assign WILL_FIRE_RL_connect_txOperate = txOper_dD_OUT ;

  // rule RL_rxOperD__dreg_update
  assign CAN_FIRE_RL_rxOperD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rxOperD__dreg_update = 1'd1 ;

  // rule RL_txOperD__dreg_update
  assign CAN_FIRE_RL_txOperD__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_txOperD__dreg_update = 1'd1 ;

  // rule RL_rxfun_unfunnel
  assign CAN_FIRE_RL_rxfun_unfunnel =
	     rxfun_inF_EMPTY_N &&
	     (rxfun_ptr != 2'd3 && rxfun_inF_D_OUT[9:8] == 2'd0 ||
	      rxfun_outF_FULL_N) ;
  assign WILL_FIRE_RL_rxfun_unfunnel = CAN_FIRE_RL_rxfun_unfunnel ;

  // rule RL_txfun_funnel
  assign CAN_FIRE_RL_txfun_funnel = txfun_inF_EMPTY_N && txfun_outF_FULL_N ;
  assign WILL_FIRE_RL_txfun_funnel = CAN_FIRE_RL_txfun_funnel ;

  // register rxOperD
  assign rxOperD_D_IN = EN_rxOperate ;
  assign rxOperD_EN = 1'd1 ;

  // register rxfun_ptr
  assign rxfun_ptr_D_IN =
	     (rxfun_inF_D_OUT[9:8] == 2'd0) ? rxfun_ptr + 2'd1 : 2'd0 ;
  assign rxfun_ptr_EN = CAN_FIRE_RL_rxfun_unfunnel ;

  // register rxfun_sr
  assign rxfun_sr_D_IN =
	     { IF_rxfun_sr_8_BITS_19_TO_18_9_EQ_0_0_OR_rxfun__ETC___d29,
	       IF_rxfun_sr_8_BITS_9_TO_8_0_EQ_0_1_OR_rxfun_sr_ETC___d40,
	       IF_rxfun_inF_first__1_BITS_9_TO_8_2_EQ_0_3_OR__ETC___d49 } ;
  assign rxfun_sr_EN = CAN_FIRE_RL_rxfun_unfunnel ;

  // register txOperD
  assign txOperD_D_IN = EN_txOperate ;
  assign txOperD_EN = 1'd1 ;

  // register txfun_ptr
  assign txfun_ptr_D_IN =
	     SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_0__ETC___d81 ?
	       txfun_ptr + 2'd1 :
	       2'd0 ;
  assign txfun_ptr_EN = CAN_FIRE_RL_txfun_funnel ;

  // submodule gmac
  assign gmac_gmii_col_i = gmii_col_i ;
  assign gmac_gmii_crs_i = gmii_crs_i ;
  assign gmac_gmii_intr_i = gmii_intr_i ;
  assign gmac_gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gmac_gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gmac_gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gmac_tx_put =
	     { CASE_txfun_outFD_OUT_BITS_9_TO_8_0_txfun_outF_ETC__q10,
	       txfun_outF_D_OUT[7:0] } ;
  assign gmac_EN_rx_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign gmac_EN_tx_put = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign gmac_EN_rxOperate = rxOper_dD_OUT ;
  assign gmac_EN_txOperate = txOper_dD_OUT ;

  // submodule ovfBit
  assign ovfBit_sD_IN = 1'b0 ;
  assign ovfBit_sEN = 1'b0 ;

  // submodule rxF
  assign rxF_sD_IN =
	     { CASE_rxfun_outFD_OUT_BITS_39_TO_38_0_rxfun_ou_ETC__q11,
	       rxfun_outF_D_OUT[37:30],
	       CASE_rxfun_outFD_OUT_BITS_29_TO_28_0_rxfun_ou_ETC__q12,
	       rxfun_outF_D_OUT[27:20],
	       CASE_rxfun_outFD_OUT_BITS_19_TO_18_0_rxfun_ou_ETC__q13,
	       rxfun_outF_D_OUT[17:10],
	       CASE_rxfun_outFD_OUT_BITS_9_TO_8_0_rxfun_outF_ETC__q14,
	       rxfun_outF_D_OUT[7:0] } ;
  assign rxF_sENQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign rxF_dDEQ = EN_rx_get ;

  // submodule rxOper
  assign rxOper_sD_IN = rxOperD ;
  assign rxOper_sEN = 1'd1 ;

  // submodule rxfun_inF
  assign rxfun_inF_D_IN =
	     { CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q15,
	       gmac_rx_get[7:0] } ;
  assign rxfun_inF_ENQ = CAN_FIRE_RL_mkConnectionGetPut ;
  assign rxfun_inF_DEQ = CAN_FIRE_RL_rxfun_unfunnel ;
  assign rxfun_inF_CLR = 1'b0 ;

  // submodule rxfun_outF
  assign rxfun_outF_D_IN =
	     { IF_rxfun_inF_first__1_BITS_9_TO_8_2_EQ_0_3_OR__ETC___d49,
	       IF_rxfun_sr_8_BITS_9_TO_8_0_EQ_0_1_OR_rxfun_sr_ETC___d40,
	       IF_rxfun_sr_8_BITS_19_TO_18_9_EQ_0_0_OR_rxfun__ETC___d29,
	       CASE_rxfun_sr_BITS_29_TO_28_0_rxfun_sr_BITS_29_ETC__q16,
	       rxfun_sr[27:20] } ;
  assign rxfun_outF_ENQ =
	     WILL_FIRE_RL_rxfun_unfunnel &&
	     (rxfun_ptr == 2'd3 || rxfun_inF_D_OUT[9:8] != 2'd0) ;
  assign rxfun_outF_DEQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign rxfun_outF_CLR = 1'b0 ;

  // submodule txF
  assign txF_sD_IN =
	     { CASE_tx_put_BITS_39_TO_38_0_tx_put_BITS_39_TO__ETC__q17,
	       tx_put[37:30],
	       CASE_tx_put_BITS_29_TO_28_0_tx_put_BITS_29_TO__ETC__q18,
	       tx_put[27:20],
	       CASE_tx_put_BITS_19_TO_18_0_tx_put_BITS_19_TO__ETC__q19,
	       tx_put[17:10],
	       CASE_tx_put_BITS_9_TO_8_0_tx_put_BITS_9_TO_8_1_ETC__q20,
	       tx_put[7:0] } ;
  assign txF_sENQ = EN_tx_put ;
  assign txF_dDEQ = CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // submodule txOper
  assign txOper_sD_IN = txOperD ;
  assign txOper_sEN = 1'd1 ;

  // submodule txfun_inF
  assign txfun_inF_D_IN =
	     { CASE_txFdD_OUT_BITS_39_TO_38_0_txFdD_OUT_BIT_ETC__q21,
	       txF_dD_OUT[37:30],
	       CASE_txFdD_OUT_BITS_29_TO_28_0_txFdD_OUT_BIT_ETC__q22,
	       txF_dD_OUT[27:20],
	       CASE_txFdD_OUT_BITS_19_TO_18_0_txFdD_OUT_BIT_ETC__q23,
	       txF_dD_OUT[17:10],
	       CASE_txFdD_OUT_BITS_9_TO_8_0_txFdD_OUT_BITS__ETC__q24,
	       txF_dD_OUT[7:0] } ;
  assign txfun_inF_ENQ = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign txfun_inF_DEQ =
	     WILL_FIRE_RL_txfun_funnel &&
	     (txfun_ptr == 2'd3 ||
	      !SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_0__ETC___d81) ;
  assign txfun_inF_CLR = 1'b0 ;

  // submodule txfun_outF
  assign txfun_outF_D_IN =
	     SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_0__ETC___d81 ?
	       { 2'd0,
		 SEL_ARR_txfun_inF_first__0_BITS_7_TO_0_4_txfun_ETC___d89 } :
	       IF_SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_ETC___d106 ;
  assign txfun_outF_ENQ = CAN_FIRE_RL_txfun_funnel ;
  assign txfun_outF_DEQ = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign txfun_outF_CLR = 1'b0 ;

  // submodule unfBit
  assign unfBit_sD_IN = 1'b0 ;
  assign unfBit_sEN = 1'b0 ;

  // remaining internal signals
  assign IF_SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_ETC___d105 =
	     { CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q8 ?
		 2'd2 :
		 2'd3,
	       SEL_ARR_txfun_inF_first__0_BITS_7_TO_0_4_txfun_ETC___d89 } ;
  assign IF_SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_ETC___d106 =
	     CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q9 ?
	       { 2'd1,
		 SEL_ARR_txfun_inF_first__0_BITS_7_TO_0_4_txfun_ETC___d89 } :
	       IF_SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_ETC___d105 ;
  assign IF_rxfun_inF_first__1_BITS_9_TO_8_2_EQ_0_3_OR__ETC___d49 =
	     { CASE_rxfun_inFD_OUT_BITS_9_TO_8_0_rxfun_inFD_ETC__q5,
	       rxfun_inF_D_OUT[7:0] } ;
  assign IF_rxfun_sr_8_BITS_19_TO_18_9_EQ_0_0_OR_rxfun__ETC___d29 =
	     { CASE_rxfun_sr_BITS_19_TO_18_0_rxfun_sr_BITS_19_ETC__q7,
	       rxfun_sr[17:10] } ;
  assign IF_rxfun_sr_8_BITS_9_TO_8_0_EQ_0_1_OR_rxfun_sr_ETC___d40 =
	     { CASE_rxfun_sr_BITS_9_TO_8_0_rxfun_sr_BITS_9_TO_ETC__q6,
	       rxfun_sr[7:0] } ;
  always@(rxF_dD_OUT)
  begin
    case (rxF_dD_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_rxFdD_OUT_BITS_39_TO_38_0_rxFdD_OUT_BIT_ETC__q1 =
	      rxF_dD_OUT[39:38];
      2'd3: CASE_rxFdD_OUT_BITS_39_TO_38_0_rxFdD_OUT_BIT_ETC__q1 = 2'd3;
    endcase
  end
  always@(rxF_dD_OUT)
  begin
    case (rxF_dD_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_rxFdD_OUT_BITS_29_TO_28_0_rxFdD_OUT_BIT_ETC__q2 =
	      rxF_dD_OUT[29:28];
      2'd3: CASE_rxFdD_OUT_BITS_29_TO_28_0_rxFdD_OUT_BIT_ETC__q2 = 2'd3;
    endcase
  end
  always@(rxF_dD_OUT)
  begin
    case (rxF_dD_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_rxFdD_OUT_BITS_19_TO_18_0_rxFdD_OUT_BIT_ETC__q3 =
	      rxF_dD_OUT[19:18];
      2'd3: CASE_rxFdD_OUT_BITS_19_TO_18_0_rxFdD_OUT_BIT_ETC__q3 = 2'd3;
    endcase
  end
  always@(rxF_dD_OUT)
  begin
    case (rxF_dD_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_rxFdD_OUT_BITS_9_TO_8_0_rxFdD_OUT_BITS__ETC__q4 =
	      rxF_dD_OUT[9:8];
      2'd3: CASE_rxFdD_OUT_BITS_9_TO_8_0_rxFdD_OUT_BITS__ETC__q4 = 2'd3;
    endcase
  end
  always@(txfun_ptr or txfun_inF_D_OUT)
  begin
    case (txfun_ptr)
      2'd0:
	  SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_0__ETC___d81 =
	      txfun_inF_D_OUT[9:8] == 2'd0;
      2'd1:
	  SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_0__ETC___d81 =
	      txfun_inF_D_OUT[19:18] == 2'd0;
      2'd2:
	  SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_0__ETC___d81 =
	      txfun_inF_D_OUT[29:28] == 2'd0;
      2'd3:
	  SEL_ARR_txfun_inF_first__0_BITS_9_TO_8_1_EQ_0__ETC___d81 =
	      txfun_inF_D_OUT[39:38] == 2'd0;
    endcase
  end
  always@(rxfun_inF_D_OUT)
  begin
    case (rxfun_inF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_inFD_OUT_BITS_9_TO_8_0_rxfun_inFD_ETC__q5 =
	      rxfun_inF_D_OUT[9:8];
      2'd3: CASE_rxfun_inFD_OUT_BITS_9_TO_8_0_rxfun_inFD_ETC__q5 = 2'd3;
    endcase
  end
  always@(rxfun_sr)
  begin
    case (rxfun_sr[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_sr_BITS_9_TO_8_0_rxfun_sr_BITS_9_TO_ETC__q6 =
	      rxfun_sr[9:8];
      2'd3: CASE_rxfun_sr_BITS_9_TO_8_0_rxfun_sr_BITS_9_TO_ETC__q6 = 2'd3;
    endcase
  end
  always@(txfun_ptr or txfun_inF_D_OUT)
  begin
    case (txfun_ptr)
      2'd0:
	  SEL_ARR_txfun_inF_first__0_BITS_7_TO_0_4_txfun_ETC___d89 =
	      txfun_inF_D_OUT[7:0];
      2'd1:
	  SEL_ARR_txfun_inF_first__0_BITS_7_TO_0_4_txfun_ETC___d89 =
	      txfun_inF_D_OUT[17:10];
      2'd2:
	  SEL_ARR_txfun_inF_first__0_BITS_7_TO_0_4_txfun_ETC___d89 =
	      txfun_inF_D_OUT[27:20];
      2'd3:
	  SEL_ARR_txfun_inF_first__0_BITS_7_TO_0_4_txfun_ETC___d89 =
	      txfun_inF_D_OUT[37:30];
    endcase
  end
  always@(rxfun_sr)
  begin
    case (rxfun_sr[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_sr_BITS_19_TO_18_0_rxfun_sr_BITS_19_ETC__q7 =
	      rxfun_sr[19:18];
      2'd3: CASE_rxfun_sr_BITS_19_TO_18_0_rxfun_sr_BITS_19_ETC__q7 = 2'd3;
    endcase
  end
  always@(txfun_ptr or txfun_inF_D_OUT)
  begin
    case (txfun_ptr)
      2'd0:
	  CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q8 =
	      txfun_inF_D_OUT[9:8] == 2'd2;
      2'd1:
	  CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q8 =
	      txfun_inF_D_OUT[19:18] == 2'd2;
      2'd2:
	  CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q8 =
	      txfun_inF_D_OUT[29:28] == 2'd2;
      2'd3:
	  CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q8 =
	      txfun_inF_D_OUT[39:38] == 2'd2;
    endcase
  end
  always@(txfun_ptr or txfun_inF_D_OUT)
  begin
    case (txfun_ptr)
      2'd0:
	  CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q9 =
	      txfun_inF_D_OUT[9:8] == 2'd1;
      2'd1:
	  CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q9 =
	      txfun_inF_D_OUT[19:18] == 2'd1;
      2'd2:
	  CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q9 =
	      txfun_inF_D_OUT[29:28] == 2'd1;
      2'd3:
	  CASE_txfun_ptr_0_txfun_inFD_OUT_BITS_9_TO_8_E_ETC__q9 =
	      txfun_inF_D_OUT[39:38] == 2'd1;
    endcase
  end
  always@(txfun_outF_D_OUT)
  begin
    case (txfun_outF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_txfun_outFD_OUT_BITS_9_TO_8_0_txfun_outF_ETC__q10 =
	      txfun_outF_D_OUT[9:8];
      2'd3: CASE_txfun_outFD_OUT_BITS_9_TO_8_0_txfun_outF_ETC__q10 = 2'd3;
    endcase
  end
  always@(rxfun_outF_D_OUT)
  begin
    case (rxfun_outF_D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_outFD_OUT_BITS_39_TO_38_0_rxfun_ou_ETC__q11 =
	      rxfun_outF_D_OUT[39:38];
      2'd3: CASE_rxfun_outFD_OUT_BITS_39_TO_38_0_rxfun_ou_ETC__q11 = 2'd3;
    endcase
  end
  always@(rxfun_outF_D_OUT)
  begin
    case (rxfun_outF_D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_outFD_OUT_BITS_29_TO_28_0_rxfun_ou_ETC__q12 =
	      rxfun_outF_D_OUT[29:28];
      2'd3: CASE_rxfun_outFD_OUT_BITS_29_TO_28_0_rxfun_ou_ETC__q12 = 2'd3;
    endcase
  end
  always@(rxfun_outF_D_OUT)
  begin
    case (rxfun_outF_D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_outFD_OUT_BITS_19_TO_18_0_rxfun_ou_ETC__q13 =
	      rxfun_outF_D_OUT[19:18];
      2'd3: CASE_rxfun_outFD_OUT_BITS_19_TO_18_0_rxfun_ou_ETC__q13 = 2'd3;
    endcase
  end
  always@(rxfun_outF_D_OUT)
  begin
    case (rxfun_outF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_outFD_OUT_BITS_9_TO_8_0_rxfun_outF_ETC__q14 =
	      rxfun_outF_D_OUT[9:8];
      2'd3: CASE_rxfun_outFD_OUT_BITS_9_TO_8_0_rxfun_outF_ETC__q14 = 2'd3;
    endcase
  end
  always@(gmac_rx_get)
  begin
    case (gmac_rx_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q15 =
	      gmac_rx_get[9:8];
      2'd3: CASE_gmacrx_get_BITS_9_TO_8_0_gmacrx_get_BIT_ETC__q15 = 2'd3;
    endcase
  end
  always@(rxfun_sr)
  begin
    case (rxfun_sr[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_rxfun_sr_BITS_29_TO_28_0_rxfun_sr_BITS_29_ETC__q16 =
	      rxfun_sr[29:28];
      2'd3: CASE_rxfun_sr_BITS_29_TO_28_0_rxfun_sr_BITS_29_ETC__q16 = 2'd3;
    endcase
  end
  always@(tx_put)
  begin
    case (tx_put[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_tx_put_BITS_39_TO_38_0_tx_put_BITS_39_TO__ETC__q17 =
	      tx_put[39:38];
      2'd3: CASE_tx_put_BITS_39_TO_38_0_tx_put_BITS_39_TO__ETC__q17 = 2'd3;
    endcase
  end
  always@(tx_put)
  begin
    case (tx_put[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_tx_put_BITS_29_TO_28_0_tx_put_BITS_29_TO__ETC__q18 =
	      tx_put[29:28];
      2'd3: CASE_tx_put_BITS_29_TO_28_0_tx_put_BITS_29_TO__ETC__q18 = 2'd3;
    endcase
  end
  always@(tx_put)
  begin
    case (tx_put[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_tx_put_BITS_19_TO_18_0_tx_put_BITS_19_TO__ETC__q19 =
	      tx_put[19:18];
      2'd3: CASE_tx_put_BITS_19_TO_18_0_tx_put_BITS_19_TO__ETC__q19 = 2'd3;
    endcase
  end
  always@(tx_put)
  begin
    case (tx_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_tx_put_BITS_9_TO_8_0_tx_put_BITS_9_TO_8_1_ETC__q20 =
	      tx_put[9:8];
      2'd3: CASE_tx_put_BITS_9_TO_8_0_tx_put_BITS_9_TO_8_1_ETC__q20 = 2'd3;
    endcase
  end
  always@(txF_dD_OUT)
  begin
    case (txF_dD_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_txFdD_OUT_BITS_39_TO_38_0_txFdD_OUT_BIT_ETC__q21 =
	      txF_dD_OUT[39:38];
      2'd3: CASE_txFdD_OUT_BITS_39_TO_38_0_txFdD_OUT_BIT_ETC__q21 = 2'd3;
    endcase
  end
  always@(txF_dD_OUT)
  begin
    case (txF_dD_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_txFdD_OUT_BITS_29_TO_28_0_txFdD_OUT_BIT_ETC__q22 =
	      txF_dD_OUT[29:28];
      2'd3: CASE_txFdD_OUT_BITS_29_TO_28_0_txFdD_OUT_BIT_ETC__q22 = 2'd3;
    endcase
  end
  always@(txF_dD_OUT)
  begin
    case (txF_dD_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_txFdD_OUT_BITS_19_TO_18_0_txFdD_OUT_BIT_ETC__q23 =
	      txF_dD_OUT[19:18];
      2'd3: CASE_txFdD_OUT_BITS_19_TO_18_0_txFdD_OUT_BIT_ETC__q23 = 2'd3;
    endcase
  end
  always@(txF_dD_OUT)
  begin
    case (txF_dD_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_txFdD_OUT_BITS_9_TO_8_0_txFdD_OUT_BITS__ETC__q24 =
	      txF_dD_OUT[9:8];
      2'd3: CASE_txFdD_OUT_BITS_9_TO_8_0_txFdD_OUT_BITS__ETC__q24 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rxOperD <= `BSV_ASSIGNMENT_DELAY 1'd0;
	txOperD <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rxOperD_EN) rxOperD <= `BSV_ASSIGNMENT_DELAY rxOperD_D_IN;
	if (txOperD_EN) txOperD <= `BSV_ASSIGNMENT_DELAY txOperD_D_IN;
      end
  end

  always@(posedge CLK_txClk)
  begin
    if (RST_N_gmRst == `BSV_RESET_VALUE)
      begin
        rxfun_ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
	txfun_ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (rxfun_ptr_EN) rxfun_ptr <= `BSV_ASSIGNMENT_DELAY rxfun_ptr_D_IN;
	if (txfun_ptr_EN) txfun_ptr <= `BSV_ASSIGNMENT_DELAY txfun_ptr_D_IN;
      end
    if (rxfun_sr_EN) rxfun_sr <= `BSV_ASSIGNMENT_DELAY rxfun_sr_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rxOperD = 1'h0;
    rxfun_ptr = 2'h2;
    rxfun_sr = 30'h2AAAAAAA;
    txOperD = 1'h0;
    txfun_ptr = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkQBGMAC

