//
// Generated by Bluespec Compiler, version 2013.01.beta5 (build 30325, 2013-01-23)
//
// On Sun Jun 16 13:35:32 CDT 2013
//
// Method conflict info:
// Method: hbdg_request_put
// Conflict-free: hbdg_response_get, qabs_request_put, qabs_response_get
// Conflicts: hbdg_request_put
//
// Method: hbdg_response_get
// Conflict-free: hbdg_request_put, qabs_request_put, qabs_response_get
// Conflicts: hbdg_response_get
//
// Method: qabs_request_put
// Conflict-free: hbdg_request_put, hbdg_response_get, qabs_response_get
// Conflicts: qabs_request_put
//
// Method: qabs_response_get
// Conflict-free: hbdg_request_put, hbdg_response_get, qabs_request_put
// Conflicts: qabs_response_get
//
//
// Ports:
// Name                         I/O  size props
// RDY_hbdg_request_put           O     1 reg
// hbdg_response_get              O   134 reg
// RDY_hbdg_response_get          O     1 reg
// RDY_qabs_request_put           O     1 reg
// qabs_response_get              O    40
// RDY_qabs_response_get          O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hbdg_request_put               I   134 reg
// qabs_request_put               I    40
// EN_hbdg_request_put            I     1
// EN_qabs_request_put            I     1
// EN_hbdg_response_get           I     1
// EN_qabs_response_get           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkHBDG2QABS(CLK,
		   RST_N,

		   hbdg_request_put,
		   EN_hbdg_request_put,
		   RDY_hbdg_request_put,

		   EN_hbdg_response_get,
		   hbdg_response_get,
		   RDY_hbdg_response_get,

		   qabs_request_put,
		   EN_qabs_request_put,
		   RDY_qabs_request_put,

		   EN_qabs_response_get,
		   qabs_response_get,
		   RDY_qabs_response_get);
  input  CLK;
  input  RST_N;

  // action method hbdg_request_put
  input  [133 : 0] hbdg_request_put;
  input  EN_hbdg_request_put;
  output RDY_hbdg_request_put;

  // actionvalue method hbdg_response_get
  input  EN_hbdg_response_get;
  output [133 : 0] hbdg_response_get;
  output RDY_hbdg_response_get;

  // action method qabs_request_put
  input  [39 : 0] qabs_request_put;
  input  EN_qabs_request_put;
  output RDY_qabs_request_put;

  // actionvalue method qabs_response_get
  input  EN_qabs_response_get;
  output [39 : 0] qabs_response_get;
  output RDY_qabs_response_get;

  // signals for module outputs
  wire [133 : 0] hbdg_response_get;
  wire [39 : 0] qabs_response_get;
  wire RDY_hbdg_request_put,
       RDY_hbdg_response_get,
       RDY_qabs_request_put,
       RDY_qabs_response_get;

  // register byteCountR
  reg [4 : 0] byteCountR;
  wire [4 : 0] byteCountR_D_IN;
  wire byteCountR_EN;

  // register cnt
  reg [2 : 0] cnt;
  wire [2 : 0] cnt_D_IN;
  wire cnt_EN;

  // register eop
  reg eop;
  wire eop_D_IN, eop_EN;

  // register index
  reg [4 : 0] index;
  wire [4 : 0] index_D_IN;
  wire index_EN;

  // register nbVal
  reg [4 : 0] nbVal;
  wire [4 : 0] nbVal_D_IN;
  wire nbVal_EN;

  // register nbValLastR
  reg [4 : 0] nbValLastR;
  wire [4 : 0] nbValLastR_D_IN;
  wire nbValLastR_EN;

  // register ptr
  reg [1 : 0] ptr;
  wire [1 : 0] ptr_D_IN;
  wire ptr_EN;

  // register sr
  reg [119 : 0] sr;
  wire [119 : 0] sr_D_IN;
  wire sr_EN;

  // register test
  reg [4 : 0] test;
  wire [4 : 0] test_D_IN;
  wire test_EN;

  // ports of submodule hexbdgEgressF
  wire [133 : 0] hexbdgEgressF_D_IN, hexbdgEgressF_D_OUT;
  wire hexbdgEgressF_CLR,
       hexbdgEgressF_DEQ,
       hexbdgEgressF_EMPTY_N,
       hexbdgEgressF_ENQ,
       hexbdgEgressF_FULL_N;

  // ports of submodule hexbdgIngressF
  wire [133 : 0] hexbdgIngressF_D_IN, hexbdgIngressF_D_OUT;
  wire hexbdgIngressF_CLR,
       hexbdgIngressF_DEQ,
       hexbdgIngressF_EMPTY_N,
       hexbdgIngressF_ENQ,
       hexbdgIngressF_FULL_N;

  // ports of submodule qabsEgressF
  wire [39 : 0] qabsEgressF_D_IN, qabsEgressF_D_OUT;
  wire qabsEgressF_CLR,
       qabsEgressF_DEQ,
       qabsEgressF_EMPTY_N,
       qabsEgressF_ENQ,
       qabsEgressF_FULL_N;

  // ports of submodule qabsIngressF
  wire [39 : 0] qabsIngressF_D_IN, qabsIngressF_D_OUT;
  wire qabsIngressF_CLR,
       qabsIngressF_DEQ,
       qabsIngressF_EMPTY_N,
       qabsIngressF_ENQ,
       qabsIngressF_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_funnel,
       CAN_FIRE_RL_unfunnel,
       CAN_FIRE_hbdg_request_put,
       CAN_FIRE_hbdg_response_get,
       CAN_FIRE_qabs_request_put,
       CAN_FIRE_qabs_response_get,
       WILL_FIRE_RL_funnel,
       WILL_FIRE_RL_unfunnel,
       WILL_FIRE_hbdg_request_put,
       WILL_FIRE_hbdg_response_get,
       WILL_FIRE_qabs_request_put,
       WILL_FIRE_qabs_response_get;

  // remaining internal signals
  reg [7 : 0] SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101,
	      SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109,
	      SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115,
	      SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93;
  reg [4 : 0] CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q9,
	      CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_1_1_1_0__q6,
	      CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_1_1_1_0__q7,
	      CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_1_1_1_0__q8,
	      CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_1_1_1_0__q5;
  reg [1 : 0] CASE_qabsEgressFD_OUT_BITS_19_TO_18_0_qabsEgr_ETC__q3,
	      CASE_qabsEgressFD_OUT_BITS_29_TO_28_0_qabsEgr_ETC__q2,
	      CASE_qabsEgressFD_OUT_BITS_39_TO_38_0_qabsEgr_ETC__q1,
	      CASE_qabsEgressFD_OUT_BITS_9_TO_8_0_qabsEgres_ETC__q4,
	      CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_qabsIn_ETC__q24,
	      CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_qabsIn_ETC__q23,
	      CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_qabsIn_ETC__q22,
	      CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_qabsIngr_ETC__q25,
	      CASE_qabs_request_put_BITS_19_TO_18_0_qabs_req_ETC__q12,
	      CASE_qabs_request_put_BITS_29_TO_28_0_qabs_req_ETC__q11,
	      CASE_qabs_request_put_BITS_39_TO_38_0_qabs_req_ETC__q10,
	      CASE_qabs_request_put_BITS_9_TO_8_0_qabs_reque_ETC__q13,
	      CASE_sr_BITS_19_TO_18_0_sr_BITS_19_TO_18_1_sr__ETC__q20,
	      CASE_sr_BITS_29_TO_28_0_sr_BITS_29_TO_28_1_sr__ETC__q19,
	      CASE_sr_BITS_39_TO_38_0_sr_BITS_39_TO_38_1_sr__ETC__q18,
	      CASE_sr_BITS_49_TO_48_0_sr_BITS_49_TO_48_1_sr__ETC__q17,
	      CASE_sr_BITS_59_TO_58_0_sr_BITS_59_TO_58_1_sr__ETC__q16,
	      CASE_sr_BITS_69_TO_68_0_sr_BITS_69_TO_68_1_sr__ETC__q15,
	      CASE_sr_BITS_79_TO_78_0_sr_BITS_79_TO_78_1_sr__ETC__q14,
	      CASE_sr_BITS_9_TO_8_0_sr_BITS_9_TO_8_1_sr_BITS_ETC__q21;
  wire [119 : 0] IF_NOT_ptr_23_EQ_2_88_89_OR_qabsIngressF_first_ETC___d475;
  wire [87 : 0] IF_NOT_ptr_23_EQ_2_88_89_OR_qabsIngressF_first_ETC___d417;
  wire [55 : 0] IF_NOT_ptr_23_EQ_2_88_89_OR_qabsIngressF_first_ETC___d375;
  wire [9 : 0] IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d106,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d114,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d120,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d99;
  wire [7 : 0] IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d440,
	       IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d456,
	       IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d471,
	       IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d487,
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d393,
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d404,
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d414,
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d425,
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d441,
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d457,
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d472,
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d488,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d354,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d364,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d373,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d383,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d394,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d405,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d415,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d426,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d442,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d458,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d473,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d489;
  wire [4 : 0] IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12,
	       nbVal_76_PLUS_IF_qabsIngressF_first__26_BITS_9_ETC___d284,
	       x__h1945,
	       x__h3408,
	       x__h3606;
  wire IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d34,
       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d13,
       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17,
       NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_BI_ETC___d57,
       NOT_index_EQ_12_AND_NOT_IF_index_EQ_0_THEN_hex_ETC___d58;

  // action method hbdg_request_put
  assign RDY_hbdg_request_put = hexbdgIngressF_FULL_N ;
  assign CAN_FIRE_hbdg_request_put = hexbdgIngressF_FULL_N ;
  assign WILL_FIRE_hbdg_request_put = EN_hbdg_request_put ;

  // actionvalue method hbdg_response_get
  assign hbdg_response_get = hexbdgEgressF_D_OUT ;
  assign RDY_hbdg_response_get = hexbdgEgressF_EMPTY_N ;
  assign CAN_FIRE_hbdg_response_get = hexbdgEgressF_EMPTY_N ;
  assign WILL_FIRE_hbdg_response_get = EN_hbdg_response_get ;

  // action method qabs_request_put
  assign RDY_qabs_request_put = qabsIngressF_FULL_N ;
  assign CAN_FIRE_qabs_request_put = qabsIngressF_FULL_N ;
  assign WILL_FIRE_qabs_request_put = EN_qabs_request_put ;

  // actionvalue method qabs_response_get
  assign qabs_response_get =
	     { CASE_qabsEgressFD_OUT_BITS_39_TO_38_0_qabsEgr_ETC__q1,
	       qabsEgressF_D_OUT[37:30],
	       CASE_qabsEgressFD_OUT_BITS_29_TO_28_0_qabsEgr_ETC__q2,
	       qabsEgressF_D_OUT[27:20],
	       CASE_qabsEgressFD_OUT_BITS_19_TO_18_0_qabsEgr_ETC__q3,
	       qabsEgressF_D_OUT[17:10],
	       CASE_qabsEgressFD_OUT_BITS_9_TO_8_0_qabsEgres_ETC__q4,
	       qabsEgressF_D_OUT[7:0] } ;
  assign RDY_qabs_response_get = qabsEgressF_EMPTY_N ;
  assign CAN_FIRE_qabs_response_get = qabsEgressF_EMPTY_N ;
  assign WILL_FIRE_qabs_response_get = EN_qabs_response_get ;

  // submodule hexbdgEgressF
  FIFO2 #(.width(32'd134), .guarded(32'd1)) hexbdgEgressF(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(hexbdgEgressF_D_IN),
							  .ENQ(hexbdgEgressF_ENQ),
							  .DEQ(hexbdgEgressF_DEQ),
							  .CLR(hexbdgEgressF_CLR),
							  .D_OUT(hexbdgEgressF_D_OUT),
							  .FULL_N(hexbdgEgressF_FULL_N),
							  .EMPTY_N(hexbdgEgressF_EMPTY_N));

  // submodule hexbdgIngressF
  FIFO2 #(.width(32'd134), .guarded(32'd1)) hexbdgIngressF(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(hexbdgIngressF_D_IN),
							   .ENQ(hexbdgIngressF_ENQ),
							   .DEQ(hexbdgIngressF_DEQ),
							   .CLR(hexbdgIngressF_CLR),
							   .D_OUT(hexbdgIngressF_D_OUT),
							   .FULL_N(hexbdgIngressF_FULL_N),
							   .EMPTY_N(hexbdgIngressF_EMPTY_N));

  // submodule qabsEgressF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) qabsEgressF(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(qabsEgressF_D_IN),
						       .ENQ(qabsEgressF_ENQ),
						       .DEQ(qabsEgressF_DEQ),
						       .CLR(qabsEgressF_CLR),
						       .D_OUT(qabsEgressF_D_OUT),
						       .FULL_N(qabsEgressF_FULL_N),
						       .EMPTY_N(qabsEgressF_EMPTY_N));

  // submodule qabsIngressF
  FIFO2 #(.width(32'd40), .guarded(32'd1)) qabsIngressF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(qabsIngressF_D_IN),
							.ENQ(qabsIngressF_ENQ),
							.DEQ(qabsIngressF_DEQ),
							.CLR(qabsIngressF_CLR),
							.D_OUT(qabsIngressF_D_OUT),
							.FULL_N(qabsIngressF_FULL_N),
							.EMPTY_N(qabsIngressF_EMPTY_N));

  // rule RL_funnel
  assign CAN_FIRE_RL_funnel =
	     qabsEgressF_FULL_N &&
	     (index != 5'd0 || hexbdgIngressF_EMPTY_N) &&
	     NOT_index_EQ_12_AND_NOT_IF_index_EQ_0_THEN_hex_ETC___d58 ;
  assign WILL_FIRE_RL_funnel = CAN_FIRE_RL_funnel ;

  // rule RL_unfunnel
  assign CAN_FIRE_RL_unfunnel =
	     qabsIngressF_EMPTY_N &&
	     (ptr != 2'd3 && qabsIngressF_D_OUT[9:8] == 2'd0 &&
	      qabsIngressF_D_OUT[19:18] == 2'd0 &&
	      qabsIngressF_D_OUT[29:28] == 2'd0 &&
	      qabsIngressF_D_OUT[39:38] == 2'd0 ||
	      hexbdgEgressF_FULL_N) ;
  assign WILL_FIRE_RL_unfunnel = CAN_FIRE_RL_unfunnel ;

  // register byteCountR
  assign byteCountR_D_IN =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4) ?
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 -
	       5'd4 :
	       CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q9 ;
  assign byteCountR_EN = CAN_FIRE_RL_funnel ;

  // register cnt
  assign cnt_D_IN = 3'h0 ;
  assign cnt_EN = 1'b0 ;

  // register eop
  assign eop_D_IN =
	     qabsIngressF_D_OUT[9:8] != 2'd0 ||
	     qabsIngressF_D_OUT[19:18] != 2'd0 ||
	     qabsIngressF_D_OUT[29:28] != 2'd0 ||
	     qabsIngressF_D_OUT[39:38] != 2'd0 ;
  assign eop_EN = CAN_FIRE_RL_unfunnel ;

  // register index
  assign index_D_IN =
	     (index == 5'd12 || hexbdgIngressF_D_OUT[5:1] - index < 5'd4) ?
	       5'd0 :
	       index + 5'd4 ;
  assign index_EN = CAN_FIRE_RL_funnel ;

  // register nbVal
  assign nbVal_D_IN =
	     (ptr == 2'd3 || qabsIngressF_D_OUT[9:8] != 2'd0 ||
	      qabsIngressF_D_OUT[19:18] != 2'd0 ||
	      qabsIngressF_D_OUT[29:28] != 2'd0 ||
	      qabsIngressF_D_OUT[39:38] != 2'd0) ?
	       5'd0 :
	       nbVal_76_PLUS_IF_qabsIngressF_first__26_BITS_9_ETC___d284 ;
  assign nbVal_EN = CAN_FIRE_RL_unfunnel ;

  // register nbValLastR
  assign nbValLastR_D_IN =
	     (nbVal_76_PLUS_IF_qabsIngressF_first__26_BITS_9_ETC___d284 ==
	      5'd16) ?
	       5'd0 :
	       nbVal_76_PLUS_IF_qabsIngressF_first__26_BITS_9_ETC___d284 ;
  assign nbValLastR_EN = CAN_FIRE_RL_unfunnel ;

  // register ptr
  assign ptr_D_IN =
	     (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	      qabsIngressF_D_OUT[19:18] != 2'd0 ||
	      qabsIngressF_D_OUT[29:28] != 2'd0 ||
	      qabsIngressF_D_OUT[39:38] != 2'd0) ?
	       2'd0 :
	       ptr + 2'd1 ;
  assign ptr_EN = CAN_FIRE_RL_unfunnel ;

  // register sr
  assign sr_D_IN =
	     { CASE_sr_BITS_79_TO_78_0_sr_BITS_79_TO_78_1_sr__ETC__q14,
	       sr[77:70],
	       CASE_sr_BITS_69_TO_68_0_sr_BITS_69_TO_68_1_sr__ETC__q15,
	       sr[67:60],
	       CASE_sr_BITS_59_TO_58_0_sr_BITS_59_TO_58_1_sr__ETC__q16,
	       sr[57:50],
	       CASE_sr_BITS_49_TO_48_0_sr_BITS_49_TO_48_1_sr__ETC__q17,
	       sr[47:40],
	       CASE_sr_BITS_39_TO_38_0_sr_BITS_39_TO_38_1_sr__ETC__q18,
	       sr[37:30],
	       CASE_sr_BITS_29_TO_28_0_sr_BITS_29_TO_28_1_sr__ETC__q19,
	       sr[27:20],
	       CASE_sr_BITS_19_TO_18_0_sr_BITS_19_TO_18_1_sr__ETC__q20,
	       sr[17:10],
	       CASE_sr_BITS_9_TO_8_0_sr_BITS_9_TO_8_1_sr_BITS_ETC__q21,
	       sr[7:0],
	       CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_qabsIn_ETC__q22,
	       qabsIngressF_D_OUT[37:30],
	       CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_qabsIn_ETC__q23,
	       qabsIngressF_D_OUT[27:20],
	       CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_qabsIn_ETC__q24,
	       qabsIngressF_D_OUT[17:10],
	       CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_qabsIngr_ETC__q25,
	       qabsIngressF_D_OUT[7:0] } ;
  assign sr_EN = CAN_FIRE_RL_unfunnel ;

  // register test
  assign test_D_IN = 5'h0 ;
  assign test_EN = 1'b0 ;

  // submodule hexbdgEgressF
  assign hexbdgEgressF_D_IN =
	     { IF_NOT_ptr_23_EQ_2_88_89_OR_qabsIngressF_first_ETC___d475,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d489,
	       eop ?
		 nbValLastR :
		 nbVal_76_PLUS_IF_qabsIngressF_first__26_BITS_9_ETC___d284,
	       qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0 } ;
  assign hexbdgEgressF_ENQ =
	     WILL_FIRE_RL_unfunnel &&
	     (ptr == 2'd3 || qabsIngressF_D_OUT[9:8] != 2'd0 ||
	      qabsIngressF_D_OUT[19:18] != 2'd0 ||
	      qabsIngressF_D_OUT[29:28] != 2'd0 ||
	      qabsIngressF_D_OUT[39:38] != 2'd0) ;
  assign hexbdgEgressF_DEQ = EN_hbdg_response_get ;
  assign hexbdgEgressF_CLR = 1'b0 ;

  // submodule hexbdgIngressF
  assign hexbdgIngressF_D_IN = hbdg_request_put ;
  assign hexbdgIngressF_ENQ = EN_hbdg_request_put ;
  assign hexbdgIngressF_DEQ =
	     WILL_FIRE_RL_funnel &&
	     (index == 5'd12 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d13) ;
  assign hexbdgIngressF_CLR = 1'b0 ;

  // submodule qabsEgressF
  assign qabsEgressF_D_IN =
	     { IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d99,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d106,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d114,
	       IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d120 } ;
  assign qabsEgressF_ENQ = CAN_FIRE_RL_funnel ;
  assign qabsEgressF_DEQ = EN_qabs_response_get ;
  assign qabsEgressF_CLR = 1'b0 ;

  // submodule qabsIngressF
  assign qabsIngressF_D_IN =
	     { CASE_qabs_request_put_BITS_39_TO_38_0_qabs_req_ETC__q10,
	       qabs_request_put[37:30],
	       CASE_qabs_request_put_BITS_29_TO_28_0_qabs_req_ETC__q11,
	       qabs_request_put[27:20],
	       CASE_qabs_request_put_BITS_19_TO_18_0_qabs_req_ETC__q12,
	       qabs_request_put[17:10],
	       CASE_qabs_request_put_BITS_9_TO_8_0_qabs_reque_ETC__q13,
	       qabs_request_put[7:0] } ;
  assign qabsIngressF_ENQ = EN_qabs_request_put ;
  assign qabsIngressF_DEQ = CAN_FIRE_RL_unfunnel ;
  assign qabsIngressF_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d106 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4) ?
	       { 2'd0,
		 SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 } :
	       ((IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
		 5'd3) ?
		  { 2'd1,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 } :
		  { 2'd2,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 }) ;
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d114 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd3) ?
	       { 2'd0,
		 SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 } :
	       ((IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
		 5'd2) ?
		  { 2'd1,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 } :
		  { 2'd2,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 }) ;
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d120 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd3 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd2) ?
	       { 2'd0,
		 SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 } :
	       ((IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
		 5'd1) ?
		  { 2'd1,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 } :
		  { 2'd2,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 }) ;
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d34 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4 &&
	      !hexbdgIngressF_D_OUT[0]) ?
	       (IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
		hexbdgIngressF_EMPTY_N) &&
	       (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
		IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 !=
		5'd4 ||
		hexbdgIngressF_EMPTY_N) :
	       index == 5'd0 ||
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 !=
	       5'd4 ||
	       hexbdgIngressF_EMPTY_N ;
  assign IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d99 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	      5'd4 &&
	      !hexbdgIngressF_D_OUT[0]) ?
	       { 2'd0,
		 SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 } :
	       ((IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
		 5'd4 &&
		 hexbdgIngressF_D_OUT[0]) ?
		  { 2'd1,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 } :
		  { 2'd2,
		    SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 }) ;
  assign IF_NOT_ptr_23_EQ_2_88_89_OR_qabsIngressF_first_ETC___d375 =
	     { qabsIngressF_D_OUT[37:30],
	       qabsIngressF_D_OUT[27:20],
	       qabsIngressF_D_OUT[17:10],
	       qabsIngressF_D_OUT[7:0],
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d354,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d364,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d373 } ;
  assign IF_NOT_ptr_23_EQ_2_88_89_OR_qabsIngressF_first_ETC___d417 =
	     { IF_NOT_ptr_23_EQ_2_88_89_OR_qabsIngressF_first_ETC___d375,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d383,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d394,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d405,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d415 } ;
  assign IF_NOT_ptr_23_EQ_2_88_89_OR_qabsIngressF_first_ETC___d475 =
	     { IF_NOT_ptr_23_EQ_2_88_89_OR_qabsIngressF_first_ETC___d417,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d426,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d442,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d458,
	       IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d473 } ;
  assign IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 =
	     (index == 5'd0) ? hexbdgIngressF_D_OUT[5:1] : byteCountR ;
  assign IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d13 =
	     IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 < 5'd4 ;
  assign IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 =
	     IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 <=
	     5'd4 ;
  assign IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d440 =
	     (ptr == 2'd0 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[37:30] :
	       sr[117:110] ;
  assign IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d456 =
	     (ptr == 2'd0 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[27:20] :
	       sr[107:100] ;
  assign IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d471 =
	     (ptr == 2'd0 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[17:10] :
	       sr[97:90] ;
  assign IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d487 =
	     (ptr == 2'd0 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[7:0] :
	       sr[87:80] ;
  assign IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d393 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[37:30] :
	       sr[77:70] ;
  assign IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d404 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[27:20] :
	       sr[67:60] ;
  assign IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d414 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[17:10] :
	       sr[57:50] ;
  assign IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d425 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[7:0] :
	       sr[47:40] ;
  assign IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d441 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[37:30] :
	       IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d440 ;
  assign IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d457 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[27:20] :
	       IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d456 ;
  assign IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d472 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[17:10] :
	       IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d471 ;
  assign IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d488 =
	     (ptr == 2'd1 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[7:0] :
	       IF_ptr_23_EQ_0_96_AND_NOT_qabsIngressF_first___ETC___d487 ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d354 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[37:30] :
	       sr[37:30] ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d364 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[27:20] :
	       sr[27:20] ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d373 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[17:10] :
	       sr[17:10] ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d383 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       qabsIngressF_D_OUT[7:0] :
	       sr[7:0] ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d394 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[37:30] :
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d393 ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d405 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[27:20] :
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d404 ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d415 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[17:10] :
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d414 ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d426 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[7:0] :
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d425 ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d442 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[77:70] :
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d441 ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d458 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[67:60] :
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d457 ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d473 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[57:50] :
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d472 ;
  assign IF_ptr_23_EQ_2_88_AND_NOT_qabsIngressF_first___ETC___d489 =
	     (ptr == 2'd2 &&
	      (qabsIngressF_D_OUT[9:8] != 2'd0 ||
	       qabsIngressF_D_OUT[19:18] != 2'd0 ||
	       qabsIngressF_D_OUT[29:28] != 2'd0 ||
	       qabsIngressF_D_OUT[39:38] != 2'd0)) ?
	       sr[47:40] :
	       IF_ptr_23_EQ_1_93_AND_NOT_qabsIngressF_first___ETC___d488 ;
  assign NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_BI_ETC___d57 =
	     (!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	      index == 5'd0 ||
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 !=
	      5'd4 ||
	      hexbdgIngressF_EMPTY_N) &&
	     (index == 5'd12 || hexbdgIngressF_EMPTY_N) &&
	     IF_NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_ETC___d34 &&
	     ((!IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d17 ||
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	       5'd4 ||
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	       5'd3 ||
	       IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 ==
	       5'd2) ?
		hexbdgIngressF_EMPTY_N :
		IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 !=
		5'd1 ||
		hexbdgIngressF_EMPTY_N) ;
  assign NOT_index_EQ_12_AND_NOT_IF_index_EQ_0_THEN_hex_ETC___d58 =
	     (index != 5'd12 &&
	      !IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d13 ||
	      hexbdgIngressF_EMPTY_N) &&
	     NOT_IF_index_EQ_0_THEN_hexbdgIngressF_first_BI_ETC___d57 ;
  assign nbVal_76_PLUS_IF_qabsIngressF_first__26_BITS_9_ETC___d284 =
	     nbVal + CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_1_1_1_0__q5 +
	     CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_1_1_1_0__q6 +
	     CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_1_1_1_0__q7 +
	     CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_1_1_1_0__q8 ;
  assign x__h1945 = index + 5'd3 ;
  assign x__h3408 = index + 5'd2 ;
  assign x__h3606 = index + 5'd1 ;
  always@(qabsEgressF_D_OUT)
  begin
    case (qabsEgressF_D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsEgressFD_OUT_BITS_39_TO_38_0_qabsEgr_ETC__q1 =
	      qabsEgressF_D_OUT[39:38];
      2'd3: CASE_qabsEgressFD_OUT_BITS_39_TO_38_0_qabsEgr_ETC__q1 = 2'd3;
    endcase
  end
  always@(qabsEgressF_D_OUT)
  begin
    case (qabsEgressF_D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsEgressFD_OUT_BITS_29_TO_28_0_qabsEgr_ETC__q2 =
	      qabsEgressF_D_OUT[29:28];
      2'd3: CASE_qabsEgressFD_OUT_BITS_29_TO_28_0_qabsEgr_ETC__q2 = 2'd3;
    endcase
  end
  always@(qabsEgressF_D_OUT)
  begin
    case (qabsEgressF_D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsEgressFD_OUT_BITS_19_TO_18_0_qabsEgr_ETC__q3 =
	      qabsEgressF_D_OUT[19:18];
      2'd3: CASE_qabsEgressFD_OUT_BITS_19_TO_18_0_qabsEgr_ETC__q3 = 2'd3;
    endcase
  end
  always@(qabsEgressF_D_OUT)
  begin
    case (qabsEgressF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsEgressFD_OUT_BITS_9_TO_8_0_qabsEgres_ETC__q4 =
	      qabsEgressF_D_OUT[9:8];
      2'd3: CASE_qabsEgressFD_OUT_BITS_9_TO_8_0_qabsEgres_ETC__q4 = 2'd3;
    endcase
  end
  always@(x__h3408 or hexbdgIngressF_D_OUT)
  begin
    case (x__h3408)
      5'd0:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[13:6];
      5'd1:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[21:14];
      5'd2:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[29:22];
      5'd3:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[37:30];
      5'd4:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[45:38];
      5'd5:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[53:46];
      5'd6:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[61:54];
      5'd7:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[69:62];
      5'd8:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[77:70];
      5'd9:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[85:78];
      5'd10:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[93:86];
      5'd11:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[101:94];
      5'd12:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[109:102];
      5'd13:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[117:110];
      5'd14:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[125:118];
      5'd15:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
	      hexbdgIngressF_D_OUT[133:126];
      default: SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d101 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h3606 or hexbdgIngressF_D_OUT)
  begin
    case (x__h3606)
      5'd0:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[13:6];
      5'd1:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[21:14];
      5'd2:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[29:22];
      5'd3:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[37:30];
      5'd4:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[45:38];
      5'd5:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[53:46];
      5'd6:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[61:54];
      5'd7:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[69:62];
      5'd8:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[77:70];
      5'd9:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[85:78];
      5'd10:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[93:86];
      5'd11:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[101:94];
      5'd12:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[109:102];
      5'd13:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[117:110];
      5'd14:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[125:118];
      5'd15:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
	      hexbdgIngressF_D_OUT[133:126];
      default: SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d109 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h1945 or hexbdgIngressF_D_OUT)
  begin
    case (x__h1945)
      5'd0:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[13:6];
      5'd1:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[21:14];
      5'd2:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[29:22];
      5'd3:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[37:30];
      5'd4:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[45:38];
      5'd5:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[53:46];
      5'd6:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[61:54];
      5'd7:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[69:62];
      5'd8:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[77:70];
      5'd9:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[85:78];
      5'd10:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[93:86];
      5'd11:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[101:94];
      5'd12:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[109:102];
      5'd13:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[117:110];
      5'd14:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[125:118];
      5'd15:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
	      hexbdgIngressF_D_OUT[133:126];
      default: SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d93 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(index or hexbdgIngressF_D_OUT)
  begin
    case (index)
      5'd0:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[13:6];
      5'd1:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[21:14];
      5'd2:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[29:22];
      5'd3:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[37:30];
      5'd4:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[45:38];
      5'd5:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[53:46];
      5'd6:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[61:54];
      5'd7:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[69:62];
      5'd8:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[77:70];
      5'd9:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[85:78];
      5'd10:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[93:86];
      5'd11:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[101:94];
      5'd12:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[109:102];
      5'd13:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[117:110];
      5'd14:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[125:118];
      5'd15:
	  SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
	      hexbdgIngressF_D_OUT[133:126];
      default: SEL_ARR_hexbdgIngressF_first_BITS_13_TO_6_5_he_ETC___d115 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[9:8])
      2'd0, 2'd1: CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_1_1_1_0__q5 = 5'd1;
      default: CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_1_1_1_0__q5 = 5'd0;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[19:18])
      2'd0, 2'd1: CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_1_1_1_0__q6 = 5'd1;
      default: CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_1_1_1_0__q6 = 5'd0;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[29:28])
      2'd0, 2'd1: CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_1_1_1_0__q7 = 5'd1;
      default: CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_1_1_1_0__q7 = 5'd0;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[39:38])
      2'd0, 2'd1: CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_1_1_1_0__q8 = 5'd1;
      default: CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_1_1_1_0__q8 = 5'd0;
    endcase
  end
  always@(IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12)
  begin
    case (IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12)
      5'd1:
	  CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q9 =
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 - 5'd1;
      5'd2:
	  CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q9 =
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 - 5'd2;
      5'd3:
	  CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q9 =
	      IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12 - 5'd3;
      default: CASE_IF_index_EQ_0_THEN_hexbdgIngressF_first_B_ETC__q9 =
		   IF_index_EQ_0_THEN_hexbdgIngressF_first_BITS_5_ETC___d12;
    endcase
  end
  always@(qabs_request_put)
  begin
    case (qabs_request_put[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_qabs_request_put_BITS_39_TO_38_0_qabs_req_ETC__q10 =
	      qabs_request_put[39:38];
      2'd3: CASE_qabs_request_put_BITS_39_TO_38_0_qabs_req_ETC__q10 = 2'd3;
    endcase
  end
  always@(qabs_request_put)
  begin
    case (qabs_request_put[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_qabs_request_put_BITS_29_TO_28_0_qabs_req_ETC__q11 =
	      qabs_request_put[29:28];
      2'd3: CASE_qabs_request_put_BITS_29_TO_28_0_qabs_req_ETC__q11 = 2'd3;
    endcase
  end
  always@(qabs_request_put)
  begin
    case (qabs_request_put[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_qabs_request_put_BITS_19_TO_18_0_qabs_req_ETC__q12 =
	      qabs_request_put[19:18];
      2'd3: CASE_qabs_request_put_BITS_19_TO_18_0_qabs_req_ETC__q12 = 2'd3;
    endcase
  end
  always@(qabs_request_put)
  begin
    case (qabs_request_put[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_qabs_request_put_BITS_9_TO_8_0_qabs_reque_ETC__q13 =
	      qabs_request_put[9:8];
      2'd3: CASE_qabs_request_put_BITS_9_TO_8_0_qabs_reque_ETC__q13 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[79:78])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_79_TO_78_0_sr_BITS_79_TO_78_1_sr__ETC__q14 = sr[79:78];
      2'd3: CASE_sr_BITS_79_TO_78_0_sr_BITS_79_TO_78_1_sr__ETC__q14 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[69:68])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_69_TO_68_0_sr_BITS_69_TO_68_1_sr__ETC__q15 = sr[69:68];
      2'd3: CASE_sr_BITS_69_TO_68_0_sr_BITS_69_TO_68_1_sr__ETC__q15 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[59:58])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_59_TO_58_0_sr_BITS_59_TO_58_1_sr__ETC__q16 = sr[59:58];
      2'd3: CASE_sr_BITS_59_TO_58_0_sr_BITS_59_TO_58_1_sr__ETC__q16 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[49:48])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_49_TO_48_0_sr_BITS_49_TO_48_1_sr__ETC__q17 = sr[49:48];
      2'd3: CASE_sr_BITS_49_TO_48_0_sr_BITS_49_TO_48_1_sr__ETC__q17 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_39_TO_38_0_sr_BITS_39_TO_38_1_sr__ETC__q18 = sr[39:38];
      2'd3: CASE_sr_BITS_39_TO_38_0_sr_BITS_39_TO_38_1_sr__ETC__q18 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_29_TO_28_0_sr_BITS_29_TO_28_1_sr__ETC__q19 = sr[29:28];
      2'd3: CASE_sr_BITS_29_TO_28_0_sr_BITS_29_TO_28_1_sr__ETC__q19 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_19_TO_18_0_sr_BITS_19_TO_18_1_sr__ETC__q20 = sr[19:18];
      2'd3: CASE_sr_BITS_19_TO_18_0_sr_BITS_19_TO_18_1_sr__ETC__q20 = 2'd3;
    endcase
  end
  always@(sr)
  begin
    case (sr[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_sr_BITS_9_TO_8_0_sr_BITS_9_TO_8_1_sr_BITS_ETC__q21 = sr[9:8];
      2'd3: CASE_sr_BITS_9_TO_8_0_sr_BITS_9_TO_8_1_sr_BITS_ETC__q21 = 2'd3;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_qabsIn_ETC__q22 =
	      qabsIngressF_D_OUT[39:38];
      2'd3: CASE_qabsIngressFD_OUT_BITS_39_TO_38_0_qabsIn_ETC__q22 = 2'd3;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_qabsIn_ETC__q23 =
	      qabsIngressF_D_OUT[29:28];
      2'd3: CASE_qabsIngressFD_OUT_BITS_29_TO_28_0_qabsIn_ETC__q23 = 2'd3;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_qabsIn_ETC__q24 =
	      qabsIngressF_D_OUT[19:18];
      2'd3: CASE_qabsIngressFD_OUT_BITS_19_TO_18_0_qabsIn_ETC__q24 = 2'd3;
    endcase
  end
  always@(qabsIngressF_D_OUT)
  begin
    case (qabsIngressF_D_OUT[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_qabsIngr_ETC__q25 =
	      qabsIngressF_D_OUT[9:8];
      2'd3: CASE_qabsIngressFD_OUT_BITS_9_TO_8_0_qabsIngr_ETC__q25 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        byteCountR <= `BSV_ASSIGNMENT_DELAY 5'd0;
	cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	eop <= `BSV_ASSIGNMENT_DELAY 1'd0;
	index <= `BSV_ASSIGNMENT_DELAY 5'd0;
	nbVal <= `BSV_ASSIGNMENT_DELAY 5'd0;
	nbValLastR <= `BSV_ASSIGNMENT_DELAY 5'd0;
	ptr <= `BSV_ASSIGNMENT_DELAY 2'd0;
	test <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (byteCountR_EN)
	  byteCountR <= `BSV_ASSIGNMENT_DELAY byteCountR_D_IN;
	if (cnt_EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt_D_IN;
	if (eop_EN) eop <= `BSV_ASSIGNMENT_DELAY eop_D_IN;
	if (index_EN) index <= `BSV_ASSIGNMENT_DELAY index_D_IN;
	if (nbVal_EN) nbVal <= `BSV_ASSIGNMENT_DELAY nbVal_D_IN;
	if (nbValLastR_EN)
	  nbValLastR <= `BSV_ASSIGNMENT_DELAY nbValLastR_D_IN;
	if (ptr_EN) ptr <= `BSV_ASSIGNMENT_DELAY ptr_D_IN;
	if (test_EN) test <= `BSV_ASSIGNMENT_DELAY test_D_IN;
      end
    if (sr_EN) sr <= `BSV_ASSIGNMENT_DELAY sr_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    byteCountR = 5'h0A;
    cnt = 3'h2;
    eop = 1'h0;
    index = 5'h0A;
    nbVal = 5'h0A;
    nbValLastR = 5'h0A;
    ptr = 2'h2;
    sr = 120'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    test = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkHBDG2QABS

